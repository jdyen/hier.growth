// Generated by rstantools.  Do not edit by hand.

/*
    hier.growth is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    hier.growth is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with hier.growth.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_spline_nopred_onemod_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_spline_nopred_onemod");
    reader.add_event(95, 93, "end", "model_spline_nopred_onemod");
    return reader;
}
#include <stan_meta_header.hpp>
class model_spline_nopred_onemod : public prob_grad {
private:
        int n;
        int n_pred;
        vector_d size_data;
        vector_d age;
        int n_age;
        int n_age_pred;
        int n_k;
        std::vector<int> age_index;
        std::vector<int> age_index_pred;
        std::vector<row_vector_d> b_spline;
        std::vector<row_vector_d> b_spline_pred;
        int n_plot;
        vector_d age_plot;
        std::vector<std::vector<row_vector_d> > b_spline_plot;
        std::vector<std::vector<row_vector_d> > b_spline_deriv;
public:
    model_spline_nopred_onemod(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_spline_nopred_onemod(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_spline_nopred_onemod_namespace::model_spline_nopred_onemod";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_pred", "int", context__.to_vec());
            n_pred = int(0);
            vals_i__ = context__.vals_i("n_pred");
            pos__ = 0;
            n_pred = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_pred", n_pred, 0);
            current_statement_begin__ = 4;
            validate_non_negative_index("size_data", "n", n);
            context__.validate_dims("data initialization", "size_data", "vector_d", context__.to_vec(n));
            size_data = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("size_data");
            pos__ = 0;
            size_t size_data_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < size_data_j_1_max__; ++j_1__) {
                size_data(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "size_data", size_data, 0);
            current_statement_begin__ = 5;
            validate_non_negative_index("age", "n", n);
            context__.validate_dims("data initialization", "age", "vector_d", context__.to_vec(n));
            age = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("age");
            pos__ = 0;
            size_t age_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < age_j_1_max__; ++j_1__) {
                age(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "n_age", "int", context__.to_vec());
            n_age = int(0);
            vals_i__ = context__.vals_i("n_age");
            pos__ = 0;
            n_age = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_age", n_age, 0);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "n_age_pred", "int", context__.to_vec());
            n_age_pred = int(0);
            vals_i__ = context__.vals_i("n_age_pred");
            pos__ = 0;
            n_age_pred = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_age_pred", n_age_pred, 0);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "n_k", "int", context__.to_vec());
            n_k = int(0);
            vals_i__ = context__.vals_i("n_k");
            pos__ = 0;
            n_k = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_k", n_k, 0);
            current_statement_begin__ = 9;
            validate_non_negative_index("age_index", "n", n);
            context__.validate_dims("data initialization", "age_index", "int", context__.to_vec(n));
            age_index = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("age_index");
            pos__ = 0;
            size_t age_index_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < age_index_k_0_max__; ++k_0__) {
                age_index[k_0__] = vals_i__[pos__++];
            }
            size_t age_index_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < age_index_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "age_index[i_0__]", age_index[i_0__], 0);
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("age_index_pred", "n_pred", n_pred);
            context__.validate_dims("data initialization", "age_index_pred", "int", context__.to_vec(n_pred));
            age_index_pred = std::vector<int>(n_pred, int(0));
            vals_i__ = context__.vals_i("age_index_pred");
            pos__ = 0;
            size_t age_index_pred_k_0_max__ = n_pred;
            for (size_t k_0__ = 0; k_0__ < age_index_pred_k_0_max__; ++k_0__) {
                age_index_pred[k_0__] = vals_i__[pos__++];
            }
            size_t age_index_pred_i_0_max__ = n_pred;
            for (size_t i_0__ = 0; i_0__ < age_index_pred_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "age_index_pred[i_0__]", age_index_pred[i_0__], 0);
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("b_spline", "n_k", n_k);
            validate_non_negative_index("b_spline", "n_age", n_age);
            context__.validate_dims("data initialization", "b_spline", "row_vector_d", context__.to_vec(n_age,n_k));
            b_spline = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(n_age, Eigen::Matrix<double, 1, Eigen::Dynamic>(n_k));
            vals_r__ = context__.vals_r("b_spline");
            pos__ = 0;
            size_t b_spline_j_1_max__ = n_k;
            size_t b_spline_k_0_max__ = n_age;
            for (size_t j_1__ = 0; j_1__ < b_spline_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < b_spline_k_0_max__; ++k_0__) {
                    b_spline[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("b_spline_pred", "n_k", n_k);
            validate_non_negative_index("b_spline_pred", "n_age_pred", n_age_pred);
            context__.validate_dims("data initialization", "b_spline_pred", "row_vector_d", context__.to_vec(n_age_pred,n_k));
            b_spline_pred = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(n_age_pred, Eigen::Matrix<double, 1, Eigen::Dynamic>(n_k));
            vals_r__ = context__.vals_r("b_spline_pred");
            pos__ = 0;
            size_t b_spline_pred_j_1_max__ = n_k;
            size_t b_spline_pred_k_0_max__ = n_age_pred;
            for (size_t j_1__ = 0; j_1__ < b_spline_pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < b_spline_pred_k_0_max__; ++k_0__) {
                    b_spline_pred[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "n_plot", "int", context__.to_vec());
            n_plot = int(0);
            vals_i__ = context__.vals_i("n_plot");
            pos__ = 0;
            n_plot = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_plot", n_plot, 0);
            current_statement_begin__ = 14;
            validate_non_negative_index("age_plot", "n_plot", n_plot);
            context__.validate_dims("data initialization", "age_plot", "vector_d", context__.to_vec(n_plot));
            age_plot = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_plot);
            vals_r__ = context__.vals_r("age_plot");
            pos__ = 0;
            size_t age_plot_j_1_max__ = n_plot;
            for (size_t j_1__ = 0; j_1__ < age_plot_j_1_max__; ++j_1__) {
                age_plot(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("b_spline_plot", "n_k", n_k);
            validate_non_negative_index("b_spline_plot", "n_plot", n_plot);
            validate_non_negative_index("b_spline_plot", "1", 1);
            context__.validate_dims("data initialization", "b_spline_plot", "row_vector_d", context__.to_vec(n_plot,1,n_k));
            b_spline_plot = std::vector<std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> > >(n_plot, std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(1, Eigen::Matrix<double, 1, Eigen::Dynamic>(n_k)));
            vals_r__ = context__.vals_r("b_spline_plot");
            pos__ = 0;
            size_t b_spline_plot_j_1_max__ = n_k;
            size_t b_spline_plot_k_0_max__ = n_plot;
            size_t b_spline_plot_k_1_max__ = 1;
            for (size_t j_1__ = 0; j_1__ < b_spline_plot_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < b_spline_plot_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < b_spline_plot_k_0_max__; ++k_0__) {
                        b_spline_plot[k_0__][k_1__](j_1__) = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("b_spline_deriv", "n_k", n_k);
            validate_non_negative_index("b_spline_deriv", "n_plot", n_plot);
            validate_non_negative_index("b_spline_deriv", "1", 1);
            context__.validate_dims("data initialization", "b_spline_deriv", "row_vector_d", context__.to_vec(n_plot,1,n_k));
            b_spline_deriv = std::vector<std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> > >(n_plot, std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(1, Eigen::Matrix<double, 1, Eigen::Dynamic>(n_k)));
            vals_r__ = context__.vals_r("b_spline_deriv");
            pos__ = 0;
            size_t b_spline_deriv_j_1_max__ = n_k;
            size_t b_spline_deriv_k_0_max__ = n_plot;
            size_t b_spline_deriv_k_1_max__ = 1;
            for (size_t j_1__ = 0; j_1__ < b_spline_deriv_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < b_spline_deriv_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < b_spline_deriv_k_0_max__; ++k_0__) {
                        b_spline_deriv[k_0__][k_1__](j_1__) = vals_r__[pos__++];
                    }
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 20;
            num_params_r__ += 1;
            current_statement_begin__ = 21;
            num_params_r__ += 1;
            current_statement_begin__ = 22;
            num_params_r__ += 1;
            current_statement_begin__ = 23;
            num_params_r__ += 1;
            current_statement_begin__ = 24;
            num_params_r__ += 1;
            current_statement_begin__ = 25;
            num_params_r__ += 1;
            current_statement_begin__ = 26;
            num_params_r__ += 1;
            current_statement_begin__ = 27;
            num_params_r__ += 1;
            current_statement_begin__ = 28;
            num_params_r__ += 1;
            current_statement_begin__ = 29;
            num_params_r__ += 1;
            current_statement_begin__ = 30;
            num_params_r__ += 1;
            current_statement_begin__ = 31;
            num_params_r__ += 1;
            current_statement_begin__ = 32;
            num_params_r__ += 1;
            current_statement_begin__ = 33;
            num_params_r__ += 1;
            current_statement_begin__ = 34;
            num_params_r__ += 1;
            current_statement_begin__ = 35;
            num_params_r__ += 1;
            current_statement_begin__ = 36;
            num_params_r__ += 1;
            current_statement_begin__ = 37;
            num_params_r__ += 1;
            current_statement_begin__ = 38;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_spline_nopred_onemod() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 20;
        if (!(context__.contains_r("sigma_obs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_obs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_obs", "double", context__.to_vec());
        double sigma_obs(0);
        sigma_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_obs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 21;
        if (!(context__.contains_r("h1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h1", "double", context__.to_vec());
        double h1(0);
        h1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 22;
        if (!(context__.contains_r("h2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h2", "double", context__.to_vec());
        double h2(0);
        h2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 23;
        if (!(context__.contains_r("h3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h3");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h3", "double", context__.to_vec());
        double h3(0);
        h3 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 24;
        if (!(context__.contains_r("h4")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h4 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h4");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h4", "double", context__.to_vec());
        double h4(0);
        h4 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h4);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h4: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 25;
        if (!(context__.contains_r("h5")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h5 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h5");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h5", "double", context__.to_vec());
        double h5(0);
        h5 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h5);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h5: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("h6")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h6 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h6");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h6", "double", context__.to_vec());
        double h6(0);
        h6 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h6);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h6: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("h7")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h7 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h7");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h7", "double", context__.to_vec());
        double h7(0);
        h7 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h7);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h7: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 28;
        if (!(context__.contains_r("h8")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h8 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h8");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h8", "double", context__.to_vec());
        double h8(0);
        h8 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h8);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h8: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 29;
        if (!(context__.contains_r("h9")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h9 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h9");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h9", "double", context__.to_vec());
        double h9(0);
        h9 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h9);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h9: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 30;
        if (!(context__.contains_r("h10")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h10 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h10");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h10", "double", context__.to_vec());
        double h10(0);
        h10 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h10);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h10: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 31;
        if (!(context__.contains_r("h11")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h11 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h11");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h11", "double", context__.to_vec());
        double h11(0);
        h11 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h11);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h11: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("h12")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h12 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h12");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h12", "double", context__.to_vec());
        double h12(0);
        h12 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h12);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h12: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("h13")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h13 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h13");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h13", "double", context__.to_vec());
        double h13(0);
        h13 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h13);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h13: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 34;
        if (!(context__.contains_r("h14")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h14 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h14");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h14", "double", context__.to_vec());
        double h14(0);
        h14 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h14);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h14: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("h15")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h15 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h15");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h15", "double", context__.to_vec());
        double h15(0);
        h15 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h15);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h15: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("h16")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h16 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h16");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h16", "double", context__.to_vec());
        double h16(0);
        h16 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h16);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h16: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 37;
        if (!(context__.contains_r("h17")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h17 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h17");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h17", "double", context__.to_vec());
        double h17(0);
        h17 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h17);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h17: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("h18")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h18 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h18");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h18", "double", context__.to_vec());
        double h18(0);
        h18 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h18);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h18: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 20;
            local_scalar_t__ sigma_obs;
            (void) sigma_obs;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_obs = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_obs = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 21;
            local_scalar_t__ h1;
            (void) h1;  // dummy to suppress unused var warning
            if (jacobian__)
                h1 = in__.scalar_constrain(lp__);
            else
                h1 = in__.scalar_constrain();
            current_statement_begin__ = 22;
            local_scalar_t__ h2;
            (void) h2;  // dummy to suppress unused var warning
            if (jacobian__)
                h2 = in__.scalar_constrain(lp__);
            else
                h2 = in__.scalar_constrain();
            current_statement_begin__ = 23;
            local_scalar_t__ h3;
            (void) h3;  // dummy to suppress unused var warning
            if (jacobian__)
                h3 = in__.scalar_constrain(lp__);
            else
                h3 = in__.scalar_constrain();
            current_statement_begin__ = 24;
            local_scalar_t__ h4;
            (void) h4;  // dummy to suppress unused var warning
            if (jacobian__)
                h4 = in__.scalar_constrain(lp__);
            else
                h4 = in__.scalar_constrain();
            current_statement_begin__ = 25;
            local_scalar_t__ h5;
            (void) h5;  // dummy to suppress unused var warning
            if (jacobian__)
                h5 = in__.scalar_constrain(lp__);
            else
                h5 = in__.scalar_constrain();
            current_statement_begin__ = 26;
            local_scalar_t__ h6;
            (void) h6;  // dummy to suppress unused var warning
            if (jacobian__)
                h6 = in__.scalar_constrain(lp__);
            else
                h6 = in__.scalar_constrain();
            current_statement_begin__ = 27;
            local_scalar_t__ h7;
            (void) h7;  // dummy to suppress unused var warning
            if (jacobian__)
                h7 = in__.scalar_constrain(lp__);
            else
                h7 = in__.scalar_constrain();
            current_statement_begin__ = 28;
            local_scalar_t__ h8;
            (void) h8;  // dummy to suppress unused var warning
            if (jacobian__)
                h8 = in__.scalar_constrain(lp__);
            else
                h8 = in__.scalar_constrain();
            current_statement_begin__ = 29;
            local_scalar_t__ h9;
            (void) h9;  // dummy to suppress unused var warning
            if (jacobian__)
                h9 = in__.scalar_constrain(lp__);
            else
                h9 = in__.scalar_constrain();
            current_statement_begin__ = 30;
            local_scalar_t__ h10;
            (void) h10;  // dummy to suppress unused var warning
            if (jacobian__)
                h10 = in__.scalar_constrain(lp__);
            else
                h10 = in__.scalar_constrain();
            current_statement_begin__ = 31;
            local_scalar_t__ h11;
            (void) h11;  // dummy to suppress unused var warning
            if (jacobian__)
                h11 = in__.scalar_constrain(lp__);
            else
                h11 = in__.scalar_constrain();
            current_statement_begin__ = 32;
            local_scalar_t__ h12;
            (void) h12;  // dummy to suppress unused var warning
            if (jacobian__)
                h12 = in__.scalar_constrain(lp__);
            else
                h12 = in__.scalar_constrain();
            current_statement_begin__ = 33;
            local_scalar_t__ h13;
            (void) h13;  // dummy to suppress unused var warning
            if (jacobian__)
                h13 = in__.scalar_constrain(lp__);
            else
                h13 = in__.scalar_constrain();
            current_statement_begin__ = 34;
            local_scalar_t__ h14;
            (void) h14;  // dummy to suppress unused var warning
            if (jacobian__)
                h14 = in__.scalar_constrain(lp__);
            else
                h14 = in__.scalar_constrain();
            current_statement_begin__ = 35;
            local_scalar_t__ h15;
            (void) h15;  // dummy to suppress unused var warning
            if (jacobian__)
                h15 = in__.scalar_constrain(lp__);
            else
                h15 = in__.scalar_constrain();
            current_statement_begin__ = 36;
            local_scalar_t__ h16;
            (void) h16;  // dummy to suppress unused var warning
            if (jacobian__)
                h16 = in__.scalar_constrain(lp__);
            else
                h16 = in__.scalar_constrain();
            current_statement_begin__ = 37;
            local_scalar_t__ h17;
            (void) h17;  // dummy to suppress unused var warning
            if (jacobian__)
                h17 = in__.scalar_constrain(lp__);
            else
                h17 = in__.scalar_constrain();
            current_statement_begin__ = 38;
            local_scalar_t__ h18;
            (void) h18;  // dummy to suppress unused var warning
            if (jacobian__)
                h18 = in__.scalar_constrain(lp__);
            else
                h18 = in__.scalar_constrain();
            // transformed parameters
            current_statement_begin__ = 42;
            validate_non_negative_index("mu", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(n);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 43;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 44;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((((((((((((((((((get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 1, "b_spline", 2) * h1) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 2, "b_spline", 2) * h2)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 3, "b_spline", 2) * h3)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 4, "b_spline", 2) * h4)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 5, "b_spline", 2) * h5)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 6, "b_spline", 2) * h6)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 7, "b_spline", 2) * h7)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 8, "b_spline", 2) * h8)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 9, "b_spline", 2) * h9)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 10, "b_spline", 2) * h10)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 11, "b_spline", 2) * h11)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 12, "b_spline", 2) * h12)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 13, "b_spline", 2) * h13)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 14, "b_spline", 2) * h14)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 15, "b_spline", 2) * h15)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 16, "b_spline", 2) * h16)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 17, "b_spline", 2) * h17)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 18, "b_spline", 2) * h18)), 
                            "assigning variable mu");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 42;
            size_t mu_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 48;
            lp_accum__.add(normal_log<propto__>(stan::math::log(size_data), mu, sigma_obs));
            current_statement_begin__ = 49;
            lp_accum__.add(normal_log<propto__>(sigma_obs, 0, 2));
            current_statement_begin__ = 50;
            lp_accum__.add(normal_log<propto__>(h1, 0.0, 2.0));
            current_statement_begin__ = 51;
            lp_accum__.add(normal_log<propto__>(h2, 0.0, 2.0));
            current_statement_begin__ = 52;
            lp_accum__.add(normal_log<propto__>(h3, 0.0, 2.0));
            current_statement_begin__ = 53;
            lp_accum__.add(normal_log<propto__>(h4, 0.0, 2.0));
            current_statement_begin__ = 54;
            lp_accum__.add(normal_log<propto__>(h5, 0.0, 2.0));
            current_statement_begin__ = 55;
            lp_accum__.add(normal_log<propto__>(h6, 0.0, 2.0));
            current_statement_begin__ = 56;
            lp_accum__.add(normal_log<propto__>(h7, 0.0, 2.0));
            current_statement_begin__ = 57;
            lp_accum__.add(normal_log<propto__>(h8, 0.0, 2.0));
            current_statement_begin__ = 58;
            lp_accum__.add(normal_log<propto__>(h9, 0.0, 2.0));
            current_statement_begin__ = 59;
            lp_accum__.add(normal_log<propto__>(h10, 0.0, 2.0));
            current_statement_begin__ = 60;
            lp_accum__.add(normal_log<propto__>(h11, 0.0, 2.0));
            current_statement_begin__ = 61;
            lp_accum__.add(normal_log<propto__>(h12, 0.0, 2.0));
            current_statement_begin__ = 62;
            lp_accum__.add(normal_log<propto__>(h13, 0.0, 2.0));
            current_statement_begin__ = 63;
            lp_accum__.add(normal_log<propto__>(h14, 0.0, 2.0));
            current_statement_begin__ = 64;
            lp_accum__.add(normal_log<propto__>(h15, 0.0, 2.0));
            current_statement_begin__ = 65;
            lp_accum__.add(normal_log<propto__>(h16, 0.0, 2.0));
            current_statement_begin__ = 66;
            lp_accum__.add(normal_log<propto__>(h17, 0.0, 2.0));
            current_statement_begin__ = 67;
            lp_accum__.add(normal_log<propto__>(h18, 0.0, 2.0));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma_obs");
        names__.push_back("h1");
        names__.push_back("h2");
        names__.push_back("h3");
        names__.push_back("h4");
        names__.push_back("h5");
        names__.push_back("h6");
        names__.push_back("h7");
        names__.push_back("h8");
        names__.push_back("h9");
        names__.push_back("h10");
        names__.push_back("h11");
        names__.push_back("h12");
        names__.push_back("h13");
        names__.push_back("h14");
        names__.push_back("h15");
        names__.push_back("h16");
        names__.push_back("h17");
        names__.push_back("h18");
        names__.push_back("mu");
        names__.push_back("mu_plot_growth");
        names__.push_back("mu_plot_agr");
        names__.push_back("mu_pred");
        names__.push_back("size_plot");
        names__.push_back("size_plot_agr");
        names__.push_back("size_pred");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_spline_nopred_onemod_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigma_obs = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_obs);
        double h1 = in__.scalar_constrain();
        vars__.push_back(h1);
        double h2 = in__.scalar_constrain();
        vars__.push_back(h2);
        double h3 = in__.scalar_constrain();
        vars__.push_back(h3);
        double h4 = in__.scalar_constrain();
        vars__.push_back(h4);
        double h5 = in__.scalar_constrain();
        vars__.push_back(h5);
        double h6 = in__.scalar_constrain();
        vars__.push_back(h6);
        double h7 = in__.scalar_constrain();
        vars__.push_back(h7);
        double h8 = in__.scalar_constrain();
        vars__.push_back(h8);
        double h9 = in__.scalar_constrain();
        vars__.push_back(h9);
        double h10 = in__.scalar_constrain();
        vars__.push_back(h10);
        double h11 = in__.scalar_constrain();
        vars__.push_back(h11);
        double h12 = in__.scalar_constrain();
        vars__.push_back(h12);
        double h13 = in__.scalar_constrain();
        vars__.push_back(h13);
        double h14 = in__.scalar_constrain();
        vars__.push_back(h14);
        double h15 = in__.scalar_constrain();
        vars__.push_back(h15);
        double h16 = in__.scalar_constrain();
        vars__.push_back(h16);
        double h17 = in__.scalar_constrain();
        vars__.push_back(h17);
        double h18 = in__.scalar_constrain();
        vars__.push_back(h18);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 42;
            validate_non_negative_index("mu", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu(n);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 43;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 44;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((((((((((((((((((get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 1, "b_spline", 2) * h1) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 2, "b_spline", 2) * h2)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 3, "b_spline", 2) * h3)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 4, "b_spline", 2) * h4)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 5, "b_spline", 2) * h5)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 6, "b_spline", 2) * h6)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 7, "b_spline", 2) * h7)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 8, "b_spline", 2) * h8)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 9, "b_spline", 2) * h9)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 10, "b_spline", 2) * h10)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 11, "b_spline", 2) * h11)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 12, "b_spline", 2) * h12)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 13, "b_spline", 2) * h13)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 14, "b_spline", 2) * h14)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 15, "b_spline", 2) * h15)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 16, "b_spline", 2) * h16)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 17, "b_spline", 2) * h17)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 18, "b_spline", 2) * h18)), 
                            "assigning variable mu");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t mu_j_1_max__ = n;
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    vars__.push_back(mu(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 71;
            validate_non_negative_index("mu_plot_growth", "n_plot", n_plot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_plot_growth(n_plot);
            stan::math::initialize(mu_plot_growth, DUMMY_VAR__);
            stan::math::fill(mu_plot_growth, DUMMY_VAR__);
            current_statement_begin__ = 72;
            validate_non_negative_index("mu_plot_agr", "n_plot", n_plot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_plot_agr(n_plot);
            stan::math::initialize(mu_plot_agr, DUMMY_VAR__);
            stan::math::fill(mu_plot_agr, DUMMY_VAR__);
            current_statement_begin__ = 73;
            validate_non_negative_index("mu_pred", "n_pred", n_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_pred(n_pred);
            stan::math::initialize(mu_pred, DUMMY_VAR__);
            stan::math::fill(mu_pred, DUMMY_VAR__);
            current_statement_begin__ = 74;
            validate_non_negative_index("size_plot", "n_plot", n_plot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> size_plot(n_plot);
            stan::math::initialize(size_plot, DUMMY_VAR__);
            stan::math::fill(size_plot, DUMMY_VAR__);
            current_statement_begin__ = 75;
            validate_non_negative_index("size_plot_agr", "n_plot", n_plot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> size_plot_agr(n_plot);
            stan::math::initialize(size_plot_agr, DUMMY_VAR__);
            stan::math::fill(size_plot_agr, DUMMY_VAR__);
            current_statement_begin__ = 76;
            validate_non_negative_index("size_pred", "n_pred", n_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> size_pred(n_pred);
            stan::math::initialize(size_pred, DUMMY_VAR__);
            stan::math::fill(size_pred, DUMMY_VAR__);
            current_statement_begin__ = 77;
            validate_non_negative_index("log_lik", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(n);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 79;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 80;
                stan::model::assign(mu_plot_growth, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((((((((((((((((((get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 1, "b_spline_plot", 3) * h1) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 2, "b_spline_plot", 3) * h2)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 3, "b_spline_plot", 3) * h3)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 4, "b_spline_plot", 3) * h4)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 5, "b_spline_plot", 3) * h5)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 6, "b_spline_plot", 3) * h6)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 7, "b_spline_plot", 3) * h7)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 8, "b_spline_plot", 3) * h8)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 9, "b_spline_plot", 3) * h9)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 10, "b_spline_plot", 3) * h10)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 11, "b_spline_plot", 3) * h11)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 12, "b_spline_plot", 3) * h12)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 13, "b_spline_plot", 3) * h13)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 14, "b_spline_plot", 3) * h14)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 15, "b_spline_plot", 3) * h15)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 16, "b_spline_plot", 3) * h16)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 17, "b_spline_plot", 3) * h17)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), 1, "b_spline_plot", 2), 18, "b_spline_plot", 3) * h18)), 
                            "assigning variable mu_plot_growth");
            }
            current_statement_begin__ = 81;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 82;
                stan::model::assign(size_plot, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(mu_plot_growth, i, "mu_plot_growth", 1)), 
                            "assigning variable size_plot");
            }
            current_statement_begin__ = 83;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 84;
                stan::model::assign(mu_plot_agr, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((((((((((((((((((get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 1, "b_spline_deriv", 3) * h1) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 2, "b_spline_deriv", 3) * h2)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 3, "b_spline_deriv", 3) * h3)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 4, "b_spline_deriv", 3) * h4)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 5, "b_spline_deriv", 3) * h5)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 6, "b_spline_deriv", 3) * h6)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 7, "b_spline_deriv", 3) * h7)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 8, "b_spline_deriv", 3) * h8)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 9, "b_spline_deriv", 3) * h9)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 10, "b_spline_deriv", 3) * h10)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 11, "b_spline_deriv", 3) * h11)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 12, "b_spline_deriv", 3) * h12)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 13, "b_spline_deriv", 3) * h13)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 14, "b_spline_deriv", 3) * h14)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 15, "b_spline_deriv", 3) * h15)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 16, "b_spline_deriv", 3) * h16)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 17, "b_spline_deriv", 3) * h17)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), 1, "b_spline_deriv", 2), 18, "b_spline_deriv", 3) * h18)), 
                            "assigning variable mu_plot_agr");
            }
            current_statement_begin__ = 85;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 86;
                stan::model::assign(size_plot_agr, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(mu_plot_agr, i, "mu_plot_agr", 1)), 
                            "assigning variable size_plot_agr");
            }
            current_statement_begin__ = 87;
            for (int i = 1; i <= n_pred; ++i) {
                current_statement_begin__ = 88;
                stan::model::assign(mu_pred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((((((((((((((((((get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 1, "b_spline_pred", 2) * h1) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 2, "b_spline_pred", 2) * h2)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 3, "b_spline_pred", 2) * h3)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 4, "b_spline_pred", 2) * h4)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 5, "b_spline_pred", 2) * h5)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 6, "b_spline_pred", 2) * h6)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 7, "b_spline_pred", 2) * h7)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 8, "b_spline_pred", 2) * h8)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 9, "b_spline_pred", 2) * h9)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 10, "b_spline_pred", 2) * h10)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 11, "b_spline_pred", 2) * h11)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 12, "b_spline_pred", 2) * h12)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 13, "b_spline_pred", 2) * h13)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 14, "b_spline_pred", 2) * h14)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 15, "b_spline_pred", 2) * h15)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 16, "b_spline_pred", 2) * h16)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 17, "b_spline_pred", 2) * h17)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 18, "b_spline_pred", 2) * h18)), 
                            "assigning variable mu_pred");
            }
            current_statement_begin__ = 89;
            for (int i = 1; i <= n_pred; ++i) {
                current_statement_begin__ = 90;
                stan::model::assign(size_pred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(mu_pred, i, "mu_pred", 1)), 
                            "assigning variable size_pred");
            }
            current_statement_begin__ = 91;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 92;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_log(stan::math::log(get_base1(size_data, i, "size_data", 1)), get_base1(mu, i, "mu", 1), sigma_obs), 
                            "assigning variable log_lik");
            }
            // validate, write generated quantities
            current_statement_begin__ = 71;
            size_t mu_plot_growth_j_1_max__ = n_plot;
            for (size_t j_1__ = 0; j_1__ < mu_plot_growth_j_1_max__; ++j_1__) {
                vars__.push_back(mu_plot_growth(j_1__));
            }
            current_statement_begin__ = 72;
            size_t mu_plot_agr_j_1_max__ = n_plot;
            for (size_t j_1__ = 0; j_1__ < mu_plot_agr_j_1_max__; ++j_1__) {
                vars__.push_back(mu_plot_agr(j_1__));
            }
            current_statement_begin__ = 73;
            size_t mu_pred_j_1_max__ = n_pred;
            for (size_t j_1__ = 0; j_1__ < mu_pred_j_1_max__; ++j_1__) {
                vars__.push_back(mu_pred(j_1__));
            }
            current_statement_begin__ = 74;
            check_greater_or_equal(function__, "size_plot", size_plot, 0);
            size_t size_plot_j_1_max__ = n_plot;
            for (size_t j_1__ = 0; j_1__ < size_plot_j_1_max__; ++j_1__) {
                vars__.push_back(size_plot(j_1__));
            }
            current_statement_begin__ = 75;
            check_greater_or_equal(function__, "size_plot_agr", size_plot_agr, 0);
            size_t size_plot_agr_j_1_max__ = n_plot;
            for (size_t j_1__ = 0; j_1__ < size_plot_agr_j_1_max__; ++j_1__) {
                vars__.push_back(size_plot_agr(j_1__));
            }
            current_statement_begin__ = 76;
            check_greater_or_equal(function__, "size_pred", size_pred, 0);
            size_t size_pred_j_1_max__ = n_pred;
            for (size_t j_1__ = 0; j_1__ < size_pred_j_1_max__; ++j_1__) {
                vars__.push_back(size_pred(j_1__));
            }
            current_statement_begin__ = 77;
            size_t log_lik_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_spline_nopred_onemod";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h18";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t mu_plot_growth_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < mu_plot_growth_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_growth" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_plot_agr_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < mu_plot_agr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_agr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < mu_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_plot_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < size_plot_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_plot_agr_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < size_plot_agr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot_agr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < size_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h18";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t mu_plot_growth_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < mu_plot_growth_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_growth" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_plot_agr_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < mu_plot_agr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_agr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < mu_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_plot_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < size_plot_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_plot_agr_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < size_plot_agr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot_agr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < size_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_spline_nopred_onemod_namespace::model_spline_nopred_onemod stan_model;
#endif
