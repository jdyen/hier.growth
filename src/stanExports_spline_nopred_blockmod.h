// Generated by rstantools.  Do not edit by hand.

/*
    hier.growth is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    hier.growth is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with hier.growth.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_spline_nopred_blockmod_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_spline_nopred_blockmod");
    reader.add_event(318, 316, "end", "model_spline_nopred_blockmod");
    return reader;
}
#include <stan_meta_header.hpp>
class model_spline_nopred_blockmod : public prob_grad {
private:
        int n;
        int n_block;
        int n_pred;
        int n_block_pred;
        vector_d size_data;
        int n_age;
        int n_age_pred;
        int n_k;
        std::vector<int> age_index;
        std::vector<int> age_index_pred;
        std::vector<int> block_data;
        std::vector<int> block_holdout;
        std::vector<row_vector_d> b_spline;
        std::vector<row_vector_d> b_spline_pred;
        int n_plot;
        vector_d age_plot;
        std::vector<std::vector<row_vector_d> > b_spline_plot;
        std::vector<std::vector<row_vector_d> > b_spline_deriv;
public:
    model_spline_nopred_blockmod(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_spline_nopred_blockmod(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_spline_nopred_blockmod_namespace::model_spline_nopred_blockmod";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_block", "int", context__.to_vec());
            n_block = int(0);
            vals_i__ = context__.vals_i("n_block");
            pos__ = 0;
            n_block = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_block", n_block, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_pred", "int", context__.to_vec());
            n_pred = int(0);
            vals_i__ = context__.vals_i("n_pred");
            pos__ = 0;
            n_pred = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_pred", n_pred, 0);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "n_block_pred", "int", context__.to_vec());
            n_block_pred = int(0);
            vals_i__ = context__.vals_i("n_block_pred");
            pos__ = 0;
            n_block_pred = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_block_pred", n_block_pred, 0);
            current_statement_begin__ = 6;
            validate_non_negative_index("size_data", "n", n);
            context__.validate_dims("data initialization", "size_data", "vector_d", context__.to_vec(n));
            size_data = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("size_data");
            pos__ = 0;
            size_t size_data_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < size_data_j_1_max__; ++j_1__) {
                size_data(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "size_data", size_data, 0);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "n_age", "int", context__.to_vec());
            n_age = int(0);
            vals_i__ = context__.vals_i("n_age");
            pos__ = 0;
            n_age = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_age", n_age, 0);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "n_age_pred", "int", context__.to_vec());
            n_age_pred = int(0);
            vals_i__ = context__.vals_i("n_age_pred");
            pos__ = 0;
            n_age_pred = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_age_pred", n_age_pred, 0);
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "n_k", "int", context__.to_vec());
            n_k = int(0);
            vals_i__ = context__.vals_i("n_k");
            pos__ = 0;
            n_k = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_k", n_k, 0);
            current_statement_begin__ = 10;
            validate_non_negative_index("age_index", "n", n);
            context__.validate_dims("data initialization", "age_index", "int", context__.to_vec(n));
            age_index = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("age_index");
            pos__ = 0;
            size_t age_index_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < age_index_k_0_max__; ++k_0__) {
                age_index[k_0__] = vals_i__[pos__++];
            }
            size_t age_index_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < age_index_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "age_index[i_0__]", age_index[i_0__], 0);
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("age_index_pred", "n_pred", n_pred);
            context__.validate_dims("data initialization", "age_index_pred", "int", context__.to_vec(n_pred));
            age_index_pred = std::vector<int>(n_pred, int(0));
            vals_i__ = context__.vals_i("age_index_pred");
            pos__ = 0;
            size_t age_index_pred_k_0_max__ = n_pred;
            for (size_t k_0__ = 0; k_0__ < age_index_pred_k_0_max__; ++k_0__) {
                age_index_pred[k_0__] = vals_i__[pos__++];
            }
            size_t age_index_pred_i_0_max__ = n_pred;
            for (size_t i_0__ = 0; i_0__ < age_index_pred_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "age_index_pred[i_0__]", age_index_pred[i_0__], 0);
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("block_data", "n", n);
            context__.validate_dims("data initialization", "block_data", "int", context__.to_vec(n));
            block_data = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("block_data");
            pos__ = 0;
            size_t block_data_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < block_data_k_0_max__; ++k_0__) {
                block_data[k_0__] = vals_i__[pos__++];
            }
            size_t block_data_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < block_data_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "block_data[i_0__]", block_data[i_0__], 0);
                check_less_or_equal(function__, "block_data[i_0__]", block_data[i_0__], n_block);
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("block_holdout", "n_pred", n_pred);
            context__.validate_dims("data initialization", "block_holdout", "int", context__.to_vec(n_pred));
            block_holdout = std::vector<int>(n_pred, int(0));
            vals_i__ = context__.vals_i("block_holdout");
            pos__ = 0;
            size_t block_holdout_k_0_max__ = n_pred;
            for (size_t k_0__ = 0; k_0__ < block_holdout_k_0_max__; ++k_0__) {
                block_holdout[k_0__] = vals_i__[pos__++];
            }
            size_t block_holdout_i_0_max__ = n_pred;
            for (size_t i_0__ = 0; i_0__ < block_holdout_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "block_holdout[i_0__]", block_holdout[i_0__], 0);
                check_less_or_equal(function__, "block_holdout[i_0__]", block_holdout[i_0__], n_block_pred);
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("b_spline", "n_k", n_k);
            validate_non_negative_index("b_spline", "n_age", n_age);
            context__.validate_dims("data initialization", "b_spline", "row_vector_d", context__.to_vec(n_age,n_k));
            b_spline = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(n_age, Eigen::Matrix<double, 1, Eigen::Dynamic>(n_k));
            vals_r__ = context__.vals_r("b_spline");
            pos__ = 0;
            size_t b_spline_j_1_max__ = n_k;
            size_t b_spline_k_0_max__ = n_age;
            for (size_t j_1__ = 0; j_1__ < b_spline_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < b_spline_k_0_max__; ++k_0__) {
                    b_spline[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("b_spline_pred", "n_k", n_k);
            validate_non_negative_index("b_spline_pred", "n_age_pred", n_age_pred);
            context__.validate_dims("data initialization", "b_spline_pred", "row_vector_d", context__.to_vec(n_age_pred,n_k));
            b_spline_pred = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(n_age_pred, Eigen::Matrix<double, 1, Eigen::Dynamic>(n_k));
            vals_r__ = context__.vals_r("b_spline_pred");
            pos__ = 0;
            size_t b_spline_pred_j_1_max__ = n_k;
            size_t b_spline_pred_k_0_max__ = n_age_pred;
            for (size_t j_1__ = 0; j_1__ < b_spline_pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < b_spline_pred_k_0_max__; ++k_0__) {
                    b_spline_pred[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "n_plot", "int", context__.to_vec());
            n_plot = int(0);
            vals_i__ = context__.vals_i("n_plot");
            pos__ = 0;
            n_plot = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_plot", n_plot, 0);
            current_statement_begin__ = 17;
            validate_non_negative_index("age_plot", "n_plot", n_plot);
            context__.validate_dims("data initialization", "age_plot", "vector_d", context__.to_vec(n_plot));
            age_plot = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_plot);
            vals_r__ = context__.vals_r("age_plot");
            pos__ = 0;
            size_t age_plot_j_1_max__ = n_plot;
            for (size_t j_1__ = 0; j_1__ < age_plot_j_1_max__; ++j_1__) {
                age_plot(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("b_spline_plot", "n_k", n_k);
            validate_non_negative_index("b_spline_plot", "n_plot", n_plot);
            validate_non_negative_index("b_spline_plot", "n_block", n_block);
            context__.validate_dims("data initialization", "b_spline_plot", "row_vector_d", context__.to_vec(n_plot,n_block,n_k));
            b_spline_plot = std::vector<std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> > >(n_plot, std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(n_block, Eigen::Matrix<double, 1, Eigen::Dynamic>(n_k)));
            vals_r__ = context__.vals_r("b_spline_plot");
            pos__ = 0;
            size_t b_spline_plot_j_1_max__ = n_k;
            size_t b_spline_plot_k_0_max__ = n_plot;
            size_t b_spline_plot_k_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < b_spline_plot_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < b_spline_plot_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < b_spline_plot_k_0_max__; ++k_0__) {
                        b_spline_plot[k_0__][k_1__](j_1__) = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("b_spline_deriv", "n_k", n_k);
            validate_non_negative_index("b_spline_deriv", "n_plot", n_plot);
            validate_non_negative_index("b_spline_deriv", "n_block", n_block);
            context__.validate_dims("data initialization", "b_spline_deriv", "row_vector_d", context__.to_vec(n_plot,n_block,n_k));
            b_spline_deriv = std::vector<std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> > >(n_plot, std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(n_block, Eigen::Matrix<double, 1, Eigen::Dynamic>(n_k)));
            vals_r__ = context__.vals_r("b_spline_deriv");
            pos__ = 0;
            size_t b_spline_deriv_j_1_max__ = n_k;
            size_t b_spline_deriv_k_0_max__ = n_plot;
            size_t b_spline_deriv_k_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < b_spline_deriv_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < b_spline_deriv_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < b_spline_deriv_k_0_max__; ++k_0__) {
                        b_spline_deriv[k_0__][k_1__](j_1__) = vals_r__[pos__++];
                    }
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 23;
            num_params_r__ += 1;
            current_statement_begin__ = 24;
            num_params_r__ += 1;
            current_statement_begin__ = 25;
            num_params_r__ += 1;
            current_statement_begin__ = 26;
            num_params_r__ += 1;
            current_statement_begin__ = 27;
            num_params_r__ += 1;
            current_statement_begin__ = 28;
            num_params_r__ += 1;
            current_statement_begin__ = 29;
            num_params_r__ += 1;
            current_statement_begin__ = 30;
            num_params_r__ += 1;
            current_statement_begin__ = 31;
            num_params_r__ += 1;
            current_statement_begin__ = 32;
            num_params_r__ += 1;
            current_statement_begin__ = 33;
            num_params_r__ += 1;
            current_statement_begin__ = 34;
            num_params_r__ += 1;
            current_statement_begin__ = 35;
            num_params_r__ += 1;
            current_statement_begin__ = 36;
            num_params_r__ += 1;
            current_statement_begin__ = 37;
            num_params_r__ += 1;
            current_statement_begin__ = 38;
            num_params_r__ += 1;
            current_statement_begin__ = 39;
            num_params_r__ += 1;
            current_statement_begin__ = 40;
            num_params_r__ += 1;
            current_statement_begin__ = 41;
            num_params_r__ += 1;
            current_statement_begin__ = 42;
            num_params_r__ += 1;
            current_statement_begin__ = 43;
            num_params_r__ += 1;
            current_statement_begin__ = 44;
            num_params_r__ += 1;
            current_statement_begin__ = 45;
            num_params_r__ += 1;
            current_statement_begin__ = 46;
            num_params_r__ += 1;
            current_statement_begin__ = 47;
            num_params_r__ += 1;
            current_statement_begin__ = 48;
            num_params_r__ += 1;
            current_statement_begin__ = 49;
            num_params_r__ += 1;
            current_statement_begin__ = 50;
            num_params_r__ += 1;
            current_statement_begin__ = 51;
            num_params_r__ += 1;
            current_statement_begin__ = 52;
            num_params_r__ += 1;
            current_statement_begin__ = 53;
            num_params_r__ += 1;
            current_statement_begin__ = 54;
            num_params_r__ += 1;
            current_statement_begin__ = 55;
            num_params_r__ += 1;
            current_statement_begin__ = 56;
            num_params_r__ += 1;
            current_statement_begin__ = 57;
            num_params_r__ += 1;
            current_statement_begin__ = 58;
            num_params_r__ += 1;
            current_statement_begin__ = 59;
            num_params_r__ += 1;
            current_statement_begin__ = 60;
            num_params_r__ += 1;
            current_statement_begin__ = 61;
            num_params_r__ += 1;
            current_statement_begin__ = 62;
            num_params_r__ += 1;
            current_statement_begin__ = 63;
            num_params_r__ += 1;
            current_statement_begin__ = 64;
            num_params_r__ += 1;
            current_statement_begin__ = 65;
            num_params_r__ += 1;
            current_statement_begin__ = 66;
            num_params_r__ += 1;
            current_statement_begin__ = 67;
            num_params_r__ += 1;
            current_statement_begin__ = 68;
            num_params_r__ += 1;
            current_statement_begin__ = 69;
            num_params_r__ += 1;
            current_statement_begin__ = 70;
            num_params_r__ += 1;
            current_statement_begin__ = 71;
            num_params_r__ += 1;
            current_statement_begin__ = 72;
            num_params_r__ += 1;
            current_statement_begin__ = 73;
            num_params_r__ += 1;
            current_statement_begin__ = 74;
            num_params_r__ += 1;
            current_statement_begin__ = 75;
            num_params_r__ += 1;
            current_statement_begin__ = 76;
            num_params_r__ += 1;
            current_statement_begin__ = 77;
            num_params_r__ += 1;
            current_statement_begin__ = 78;
            validate_non_negative_index("psi1", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 79;
            validate_non_negative_index("psi2", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 80;
            validate_non_negative_index("psi3", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 81;
            validate_non_negative_index("psi4", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 82;
            validate_non_negative_index("psi5", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 83;
            validate_non_negative_index("psi6", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 84;
            validate_non_negative_index("psi7", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 85;
            validate_non_negative_index("psi8", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 86;
            validate_non_negative_index("psi9", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 87;
            validate_non_negative_index("psi10", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 88;
            validate_non_negative_index("psi11", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 89;
            validate_non_negative_index("psi12", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 90;
            validate_non_negative_index("psi13", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 91;
            validate_non_negative_index("psi14", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 92;
            validate_non_negative_index("psi15", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 93;
            validate_non_negative_index("psi16", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 94;
            validate_non_negative_index("psi17", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 95;
            validate_non_negative_index("psi18", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 96;
            validate_non_negative_index("h1", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 97;
            validate_non_negative_index("h2", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 98;
            validate_non_negative_index("h3", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 99;
            validate_non_negative_index("h4", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 100;
            validate_non_negative_index("h5", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 101;
            validate_non_negative_index("h6", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 102;
            validate_non_negative_index("h7", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 103;
            validate_non_negative_index("h8", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 104;
            validate_non_negative_index("h9", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 105;
            validate_non_negative_index("h10", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 106;
            validate_non_negative_index("h11", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 107;
            validate_non_negative_index("h12", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 108;
            validate_non_negative_index("h13", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 109;
            validate_non_negative_index("h14", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 110;
            validate_non_negative_index("h15", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 111;
            validate_non_negative_index("h16", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 112;
            validate_non_negative_index("h17", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 113;
            validate_non_negative_index("h18", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 114;
            validate_non_negative_index("h1_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 115;
            validate_non_negative_index("h2_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 116;
            validate_non_negative_index("h3_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 117;
            validate_non_negative_index("h4_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 118;
            validate_non_negative_index("h5_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 119;
            validate_non_negative_index("h6_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 120;
            validate_non_negative_index("h7_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 121;
            validate_non_negative_index("h8_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 122;
            validate_non_negative_index("h9_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 123;
            validate_non_negative_index("h10_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 124;
            validate_non_negative_index("h11_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 125;
            validate_non_negative_index("h12_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 126;
            validate_non_negative_index("h13_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 127;
            validate_non_negative_index("h14_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 128;
            validate_non_negative_index("h15_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 129;
            validate_non_negative_index("h16_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 130;
            validate_non_negative_index("h17_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 131;
            validate_non_negative_index("h18_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_spline_nopred_blockmod() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 23;
        if (!(context__.contains_r("sigma_obs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_obs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_obs", "double", context__.to_vec());
        double sigma_obs(0);
        sigma_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_obs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 24;
        if (!(context__.contains_r("block_sd1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd1", "double", context__.to_vec());
        double block_sd1(0);
        block_sd1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 25;
        if (!(context__.contains_r("block_sd2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd2", "double", context__.to_vec());
        double block_sd2(0);
        block_sd2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("block_sd3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd3");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd3", "double", context__.to_vec());
        double block_sd3(0);
        block_sd3 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("block_sd4")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd4 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd4");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd4", "double", context__.to_vec());
        double block_sd4(0);
        block_sd4 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd4);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd4: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 28;
        if (!(context__.contains_r("block_sd5")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd5 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd5");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd5", "double", context__.to_vec());
        double block_sd5(0);
        block_sd5 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd5);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd5: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 29;
        if (!(context__.contains_r("block_sd6")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd6 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd6");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd6", "double", context__.to_vec());
        double block_sd6(0);
        block_sd6 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd6);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd6: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 30;
        if (!(context__.contains_r("block_sd7")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd7 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd7");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd7", "double", context__.to_vec());
        double block_sd7(0);
        block_sd7 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd7);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd7: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 31;
        if (!(context__.contains_r("block_sd8")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd8 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd8");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd8", "double", context__.to_vec());
        double block_sd8(0);
        block_sd8 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd8);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd8: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("block_sd9")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd9 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd9");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd9", "double", context__.to_vec());
        double block_sd9(0);
        block_sd9 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd9);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd9: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("block_sd10")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd10 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd10");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd10", "double", context__.to_vec());
        double block_sd10(0);
        block_sd10 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd10);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd10: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 34;
        if (!(context__.contains_r("block_sd11")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd11 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd11");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd11", "double", context__.to_vec());
        double block_sd11(0);
        block_sd11 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd11);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd11: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("block_sd12")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd12 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd12");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd12", "double", context__.to_vec());
        double block_sd12(0);
        block_sd12 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd12);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd12: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("block_sd13")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd13 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd13");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd13", "double", context__.to_vec());
        double block_sd13(0);
        block_sd13 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd13);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd13: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 37;
        if (!(context__.contains_r("block_sd14")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd14 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd14");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd14", "double", context__.to_vec());
        double block_sd14(0);
        block_sd14 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd14);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd14: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("block_sd15")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd15 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd15");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd15", "double", context__.to_vec());
        double block_sd15(0);
        block_sd15 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd15);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd15: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 39;
        if (!(context__.contains_r("block_sd16")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd16 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd16");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd16", "double", context__.to_vec());
        double block_sd16(0);
        block_sd16 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd16);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd16: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 40;
        if (!(context__.contains_r("block_sd17")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd17 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd17");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd17", "double", context__.to_vec());
        double block_sd17(0);
        block_sd17 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd17);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd17: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("block_sd18")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable block_sd18 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("block_sd18");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "block_sd18", "double", context__.to_vec());
        double block_sd18(0);
        block_sd18 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, block_sd18);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable block_sd18: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("psi_mean1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean1", "double", context__.to_vec());
        double psi_mean1(0);
        psi_mean1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 43;
        if (!(context__.contains_r("psi_mean2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean2", "double", context__.to_vec());
        double psi_mean2(0);
        psi_mean2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 44;
        if (!(context__.contains_r("psi_mean3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean3");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean3", "double", context__.to_vec());
        double psi_mean3(0);
        psi_mean3 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 45;
        if (!(context__.contains_r("psi_mean4")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean4 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean4");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean4", "double", context__.to_vec());
        double psi_mean4(0);
        psi_mean4 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean4);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean4: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 46;
        if (!(context__.contains_r("psi_mean5")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean5 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean5");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean5", "double", context__.to_vec());
        double psi_mean5(0);
        psi_mean5 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean5);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean5: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 47;
        if (!(context__.contains_r("psi_mean6")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean6 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean6");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean6", "double", context__.to_vec());
        double psi_mean6(0);
        psi_mean6 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean6);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean6: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 48;
        if (!(context__.contains_r("psi_mean7")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean7 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean7");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean7", "double", context__.to_vec());
        double psi_mean7(0);
        psi_mean7 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean7);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean7: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 49;
        if (!(context__.contains_r("psi_mean8")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean8 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean8");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean8", "double", context__.to_vec());
        double psi_mean8(0);
        psi_mean8 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean8);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean8: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 50;
        if (!(context__.contains_r("psi_mean9")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean9 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean9");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean9", "double", context__.to_vec());
        double psi_mean9(0);
        psi_mean9 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean9);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean9: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 51;
        if (!(context__.contains_r("psi_mean10")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean10 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean10");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean10", "double", context__.to_vec());
        double psi_mean10(0);
        psi_mean10 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean10);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean10: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 52;
        if (!(context__.contains_r("psi_mean11")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean11 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean11");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean11", "double", context__.to_vec());
        double psi_mean11(0);
        psi_mean11 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean11);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean11: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 53;
        if (!(context__.contains_r("psi_mean12")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean12 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean12");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean12", "double", context__.to_vec());
        double psi_mean12(0);
        psi_mean12 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean12);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean12: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 54;
        if (!(context__.contains_r("psi_mean13")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean13 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean13");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean13", "double", context__.to_vec());
        double psi_mean13(0);
        psi_mean13 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean13);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean13: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 55;
        if (!(context__.contains_r("psi_mean14")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean14 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean14");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean14", "double", context__.to_vec());
        double psi_mean14(0);
        psi_mean14 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean14);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean14: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 56;
        if (!(context__.contains_r("psi_mean15")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean15 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean15");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean15", "double", context__.to_vec());
        double psi_mean15(0);
        psi_mean15 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean15);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean15: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 57;
        if (!(context__.contains_r("psi_mean16")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean16 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean16");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean16", "double", context__.to_vec());
        double psi_mean16(0);
        psi_mean16 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean16);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean16: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 58;
        if (!(context__.contains_r("psi_mean17")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean17 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean17");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean17", "double", context__.to_vec());
        double psi_mean17(0);
        psi_mean17 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean17);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean17: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 59;
        if (!(context__.contains_r("psi_mean18")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_mean18 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_mean18");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "psi_mean18", "double", context__.to_vec());
        double psi_mean18(0);
        psi_mean18 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean18);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_mean18: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 60;
        if (!(context__.contains_r("sd_h1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h1", "double", context__.to_vec());
        double sd_h1(0);
        sd_h1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 61;
        if (!(context__.contains_r("sd_h2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h2", "double", context__.to_vec());
        double sd_h2(0);
        sd_h2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 62;
        if (!(context__.contains_r("sd_h3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h3");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h3", "double", context__.to_vec());
        double sd_h3(0);
        sd_h3 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 63;
        if (!(context__.contains_r("sd_h4")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h4 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h4");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h4", "double", context__.to_vec());
        double sd_h4(0);
        sd_h4 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h4);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h4: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 64;
        if (!(context__.contains_r("sd_h5")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h5 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h5");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h5", "double", context__.to_vec());
        double sd_h5(0);
        sd_h5 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h5);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h5: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 65;
        if (!(context__.contains_r("sd_h6")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h6 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h6");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h6", "double", context__.to_vec());
        double sd_h6(0);
        sd_h6 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h6);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h6: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 66;
        if (!(context__.contains_r("sd_h7")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h7 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h7");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h7", "double", context__.to_vec());
        double sd_h7(0);
        sd_h7 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h7);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h7: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 67;
        if (!(context__.contains_r("sd_h8")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h8 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h8");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h8", "double", context__.to_vec());
        double sd_h8(0);
        sd_h8 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h8);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h8: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 68;
        if (!(context__.contains_r("sd_h9")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h9 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h9");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h9", "double", context__.to_vec());
        double sd_h9(0);
        sd_h9 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h9);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h9: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 69;
        if (!(context__.contains_r("sd_h10")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h10 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h10");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h10", "double", context__.to_vec());
        double sd_h10(0);
        sd_h10 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h10);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h10: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 70;
        if (!(context__.contains_r("sd_h11")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h11 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h11");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h11", "double", context__.to_vec());
        double sd_h11(0);
        sd_h11 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h11);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h11: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 71;
        if (!(context__.contains_r("sd_h12")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h12 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h12");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h12", "double", context__.to_vec());
        double sd_h12(0);
        sd_h12 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h12);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h12: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 72;
        if (!(context__.contains_r("sd_h13")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h13 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h13");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h13", "double", context__.to_vec());
        double sd_h13(0);
        sd_h13 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h13);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h13: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 73;
        if (!(context__.contains_r("sd_h14")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h14 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h14");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h14", "double", context__.to_vec());
        double sd_h14(0);
        sd_h14 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h14);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h14: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 74;
        if (!(context__.contains_r("sd_h15")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h15 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h15");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h15", "double", context__.to_vec());
        double sd_h15(0);
        sd_h15 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h15);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h15: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 75;
        if (!(context__.contains_r("sd_h16")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h16 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h16");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h16", "double", context__.to_vec());
        double sd_h16(0);
        sd_h16 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h16);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h16: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 76;
        if (!(context__.contains_r("sd_h17")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h17 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h17");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h17", "double", context__.to_vec());
        double sd_h17(0);
        sd_h17 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h17);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h17: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 77;
        if (!(context__.contains_r("sd_h18")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h18 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h18");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h18", "double", context__.to_vec());
        double sd_h18(0);
        sd_h18 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h18);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h18: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 78;
        if (!(context__.contains_r("psi1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi1");
        pos__ = 0U;
        validate_non_negative_index("psi1", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi1", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi1(n_block);
        size_t psi1_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi1_j_1_max__; ++j_1__) {
            psi1(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 79;
        if (!(context__.contains_r("psi2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi2");
        pos__ = 0U;
        validate_non_negative_index("psi2", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi2", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi2(n_block);
        size_t psi2_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi2_j_1_max__; ++j_1__) {
            psi2(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 80;
        if (!(context__.contains_r("psi3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi3");
        pos__ = 0U;
        validate_non_negative_index("psi3", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi3", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi3(n_block);
        size_t psi3_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi3_j_1_max__; ++j_1__) {
            psi3(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 81;
        if (!(context__.contains_r("psi4")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi4 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi4");
        pos__ = 0U;
        validate_non_negative_index("psi4", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi4", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi4(n_block);
        size_t psi4_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi4_j_1_max__; ++j_1__) {
            psi4(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi4);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi4: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 82;
        if (!(context__.contains_r("psi5")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi5 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi5");
        pos__ = 0U;
        validate_non_negative_index("psi5", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi5", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi5(n_block);
        size_t psi5_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi5_j_1_max__; ++j_1__) {
            psi5(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi5);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi5: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 83;
        if (!(context__.contains_r("psi6")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi6 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi6");
        pos__ = 0U;
        validate_non_negative_index("psi6", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi6", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi6(n_block);
        size_t psi6_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi6_j_1_max__; ++j_1__) {
            psi6(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi6);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi6: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 84;
        if (!(context__.contains_r("psi7")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi7 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi7");
        pos__ = 0U;
        validate_non_negative_index("psi7", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi7", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi7(n_block);
        size_t psi7_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi7_j_1_max__; ++j_1__) {
            psi7(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi7);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi7: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 85;
        if (!(context__.contains_r("psi8")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi8 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi8");
        pos__ = 0U;
        validate_non_negative_index("psi8", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi8", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi8(n_block);
        size_t psi8_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi8_j_1_max__; ++j_1__) {
            psi8(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi8);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi8: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 86;
        if (!(context__.contains_r("psi9")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi9 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi9");
        pos__ = 0U;
        validate_non_negative_index("psi9", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi9", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi9(n_block);
        size_t psi9_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi9_j_1_max__; ++j_1__) {
            psi9(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi9);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi9: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 87;
        if (!(context__.contains_r("psi10")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi10 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi10");
        pos__ = 0U;
        validate_non_negative_index("psi10", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi10", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi10(n_block);
        size_t psi10_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi10_j_1_max__; ++j_1__) {
            psi10(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi10);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi10: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 88;
        if (!(context__.contains_r("psi11")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi11 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi11");
        pos__ = 0U;
        validate_non_negative_index("psi11", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi11", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi11(n_block);
        size_t psi11_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi11_j_1_max__; ++j_1__) {
            psi11(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi11);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi11: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 89;
        if (!(context__.contains_r("psi12")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi12 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi12");
        pos__ = 0U;
        validate_non_negative_index("psi12", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi12", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi12(n_block);
        size_t psi12_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi12_j_1_max__; ++j_1__) {
            psi12(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi12);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi12: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 90;
        if (!(context__.contains_r("psi13")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi13 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi13");
        pos__ = 0U;
        validate_non_negative_index("psi13", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi13", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi13(n_block);
        size_t psi13_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi13_j_1_max__; ++j_1__) {
            psi13(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi13);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi13: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 91;
        if (!(context__.contains_r("psi14")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi14 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi14");
        pos__ = 0U;
        validate_non_negative_index("psi14", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi14", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi14(n_block);
        size_t psi14_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi14_j_1_max__; ++j_1__) {
            psi14(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi14);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi14: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 92;
        if (!(context__.contains_r("psi15")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi15 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi15");
        pos__ = 0U;
        validate_non_negative_index("psi15", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi15", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi15(n_block);
        size_t psi15_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi15_j_1_max__; ++j_1__) {
            psi15(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi15);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi15: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 93;
        if (!(context__.contains_r("psi16")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi16 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi16");
        pos__ = 0U;
        validate_non_negative_index("psi16", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi16", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi16(n_block);
        size_t psi16_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi16_j_1_max__; ++j_1__) {
            psi16(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi16);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi16: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 94;
        if (!(context__.contains_r("psi17")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi17 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi17");
        pos__ = 0U;
        validate_non_negative_index("psi17", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi17", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi17(n_block);
        size_t psi17_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi17_j_1_max__; ++j_1__) {
            psi17(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi17);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi17: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 95;
        if (!(context__.contains_r("psi18")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi18 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi18");
        pos__ = 0U;
        validate_non_negative_index("psi18", "n_block", n_block);
        context__.validate_dims("parameter initialization", "psi18", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi18(n_block);
        size_t psi18_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi18_j_1_max__; ++j_1__) {
            psi18(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(psi18);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi18: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 96;
        if (!(context__.contains_r("h1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h1");
        pos__ = 0U;
        validate_non_negative_index("h1", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h1", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h1(n_block);
        size_t h1_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h1_j_1_max__; ++j_1__) {
            h1(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 97;
        if (!(context__.contains_r("h2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h2");
        pos__ = 0U;
        validate_non_negative_index("h2", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h2", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h2(n_block);
        size_t h2_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h2_j_1_max__; ++j_1__) {
            h2(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 98;
        if (!(context__.contains_r("h3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h3");
        pos__ = 0U;
        validate_non_negative_index("h3", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h3", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h3(n_block);
        size_t h3_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h3_j_1_max__; ++j_1__) {
            h3(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 99;
        if (!(context__.contains_r("h4")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h4 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h4");
        pos__ = 0U;
        validate_non_negative_index("h4", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h4", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h4(n_block);
        size_t h4_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h4_j_1_max__; ++j_1__) {
            h4(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h4);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h4: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 100;
        if (!(context__.contains_r("h5")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h5 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h5");
        pos__ = 0U;
        validate_non_negative_index("h5", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h5", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h5(n_block);
        size_t h5_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h5_j_1_max__; ++j_1__) {
            h5(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h5);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h5: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 101;
        if (!(context__.contains_r("h6")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h6 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h6");
        pos__ = 0U;
        validate_non_negative_index("h6", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h6", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h6(n_block);
        size_t h6_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h6_j_1_max__; ++j_1__) {
            h6(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h6);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h6: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 102;
        if (!(context__.contains_r("h7")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h7 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h7");
        pos__ = 0U;
        validate_non_negative_index("h7", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h7", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h7(n_block);
        size_t h7_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h7_j_1_max__; ++j_1__) {
            h7(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h7);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h7: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 103;
        if (!(context__.contains_r("h8")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h8 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h8");
        pos__ = 0U;
        validate_non_negative_index("h8", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h8", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h8(n_block);
        size_t h8_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h8_j_1_max__; ++j_1__) {
            h8(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h8);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h8: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 104;
        if (!(context__.contains_r("h9")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h9 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h9");
        pos__ = 0U;
        validate_non_negative_index("h9", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h9", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h9(n_block);
        size_t h9_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h9_j_1_max__; ++j_1__) {
            h9(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h9);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h9: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 105;
        if (!(context__.contains_r("h10")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h10 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h10");
        pos__ = 0U;
        validate_non_negative_index("h10", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h10", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h10(n_block);
        size_t h10_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h10_j_1_max__; ++j_1__) {
            h10(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h10);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h10: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 106;
        if (!(context__.contains_r("h11")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h11 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h11");
        pos__ = 0U;
        validate_non_negative_index("h11", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h11", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h11(n_block);
        size_t h11_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h11_j_1_max__; ++j_1__) {
            h11(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h11);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h11: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 107;
        if (!(context__.contains_r("h12")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h12 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h12");
        pos__ = 0U;
        validate_non_negative_index("h12", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h12", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h12(n_block);
        size_t h12_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h12_j_1_max__; ++j_1__) {
            h12(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h12);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h12: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 108;
        if (!(context__.contains_r("h13")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h13 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h13");
        pos__ = 0U;
        validate_non_negative_index("h13", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h13", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h13(n_block);
        size_t h13_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h13_j_1_max__; ++j_1__) {
            h13(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h13);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h13: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 109;
        if (!(context__.contains_r("h14")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h14 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h14");
        pos__ = 0U;
        validate_non_negative_index("h14", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h14", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h14(n_block);
        size_t h14_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h14_j_1_max__; ++j_1__) {
            h14(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h14);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h14: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 110;
        if (!(context__.contains_r("h15")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h15 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h15");
        pos__ = 0U;
        validate_non_negative_index("h15", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h15", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h15(n_block);
        size_t h15_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h15_j_1_max__; ++j_1__) {
            h15(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h15);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h15: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 111;
        if (!(context__.contains_r("h16")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h16 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h16");
        pos__ = 0U;
        validate_non_negative_index("h16", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h16", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h16(n_block);
        size_t h16_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h16_j_1_max__; ++j_1__) {
            h16(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h16);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h16: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 112;
        if (!(context__.contains_r("h17")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h17 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h17");
        pos__ = 0U;
        validate_non_negative_index("h17", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h17", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h17(n_block);
        size_t h17_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h17_j_1_max__; ++j_1__) {
            h17(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h17);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h17: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 113;
        if (!(context__.contains_r("h18")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h18 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h18");
        pos__ = 0U;
        validate_non_negative_index("h18", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h18", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h18(n_block);
        size_t h18_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h18_j_1_max__; ++j_1__) {
            h18(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h18);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h18: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 114;
        if (!(context__.contains_r("h1_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h1_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h1_holdout");
        pos__ = 0U;
        validate_non_negative_index("h1_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h1_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h1_holdout(n_block_pred);
        size_t h1_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h1_holdout_j_1_max__; ++j_1__) {
            h1_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h1_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h1_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 115;
        if (!(context__.contains_r("h2_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h2_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h2_holdout");
        pos__ = 0U;
        validate_non_negative_index("h2_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h2_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h2_holdout(n_block_pred);
        size_t h2_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h2_holdout_j_1_max__; ++j_1__) {
            h2_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h2_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h2_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 116;
        if (!(context__.contains_r("h3_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h3_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h3_holdout");
        pos__ = 0U;
        validate_non_negative_index("h3_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h3_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h3_holdout(n_block_pred);
        size_t h3_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h3_holdout_j_1_max__; ++j_1__) {
            h3_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h3_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h3_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 117;
        if (!(context__.contains_r("h4_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h4_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h4_holdout");
        pos__ = 0U;
        validate_non_negative_index("h4_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h4_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h4_holdout(n_block_pred);
        size_t h4_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h4_holdout_j_1_max__; ++j_1__) {
            h4_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h4_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h4_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 118;
        if (!(context__.contains_r("h5_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h5_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h5_holdout");
        pos__ = 0U;
        validate_non_negative_index("h5_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h5_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h5_holdout(n_block_pred);
        size_t h5_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h5_holdout_j_1_max__; ++j_1__) {
            h5_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h5_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h5_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 119;
        if (!(context__.contains_r("h6_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h6_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h6_holdout");
        pos__ = 0U;
        validate_non_negative_index("h6_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h6_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h6_holdout(n_block_pred);
        size_t h6_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h6_holdout_j_1_max__; ++j_1__) {
            h6_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h6_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h6_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 120;
        if (!(context__.contains_r("h7_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h7_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h7_holdout");
        pos__ = 0U;
        validate_non_negative_index("h7_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h7_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h7_holdout(n_block_pred);
        size_t h7_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h7_holdout_j_1_max__; ++j_1__) {
            h7_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h7_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h7_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 121;
        if (!(context__.contains_r("h8_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h8_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h8_holdout");
        pos__ = 0U;
        validate_non_negative_index("h8_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h8_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h8_holdout(n_block_pred);
        size_t h8_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h8_holdout_j_1_max__; ++j_1__) {
            h8_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h8_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h8_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 122;
        if (!(context__.contains_r("h9_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h9_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h9_holdout");
        pos__ = 0U;
        validate_non_negative_index("h9_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h9_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h9_holdout(n_block_pred);
        size_t h9_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h9_holdout_j_1_max__; ++j_1__) {
            h9_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h9_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h9_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 123;
        if (!(context__.contains_r("h10_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h10_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h10_holdout");
        pos__ = 0U;
        validate_non_negative_index("h10_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h10_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h10_holdout(n_block_pred);
        size_t h10_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h10_holdout_j_1_max__; ++j_1__) {
            h10_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h10_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h10_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 124;
        if (!(context__.contains_r("h11_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h11_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h11_holdout");
        pos__ = 0U;
        validate_non_negative_index("h11_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h11_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h11_holdout(n_block_pred);
        size_t h11_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h11_holdout_j_1_max__; ++j_1__) {
            h11_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h11_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h11_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 125;
        if (!(context__.contains_r("h12_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h12_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h12_holdout");
        pos__ = 0U;
        validate_non_negative_index("h12_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h12_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h12_holdout(n_block_pred);
        size_t h12_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h12_holdout_j_1_max__; ++j_1__) {
            h12_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h12_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h12_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 126;
        if (!(context__.contains_r("h13_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h13_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h13_holdout");
        pos__ = 0U;
        validate_non_negative_index("h13_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h13_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h13_holdout(n_block_pred);
        size_t h13_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h13_holdout_j_1_max__; ++j_1__) {
            h13_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h13_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h13_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 127;
        if (!(context__.contains_r("h14_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h14_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h14_holdout");
        pos__ = 0U;
        validate_non_negative_index("h14_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h14_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h14_holdout(n_block_pred);
        size_t h14_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h14_holdout_j_1_max__; ++j_1__) {
            h14_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h14_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h14_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 128;
        if (!(context__.contains_r("h15_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h15_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h15_holdout");
        pos__ = 0U;
        validate_non_negative_index("h15_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h15_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h15_holdout(n_block_pred);
        size_t h15_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h15_holdout_j_1_max__; ++j_1__) {
            h15_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h15_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h15_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 129;
        if (!(context__.contains_r("h16_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h16_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h16_holdout");
        pos__ = 0U;
        validate_non_negative_index("h16_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h16_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h16_holdout(n_block_pred);
        size_t h16_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h16_holdout_j_1_max__; ++j_1__) {
            h16_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h16_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h16_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 130;
        if (!(context__.contains_r("h17_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h17_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h17_holdout");
        pos__ = 0U;
        validate_non_negative_index("h17_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h17_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h17_holdout(n_block_pred);
        size_t h17_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h17_holdout_j_1_max__; ++j_1__) {
            h17_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h17_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h17_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 131;
        if (!(context__.contains_r("h18_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h18_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h18_holdout");
        pos__ = 0U;
        validate_non_negative_index("h18_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h18_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h18_holdout(n_block_pred);
        size_t h18_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h18_holdout_j_1_max__; ++j_1__) {
            h18_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h18_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h18_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 23;
            local_scalar_t__ sigma_obs;
            (void) sigma_obs;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_obs = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_obs = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 24;
            local_scalar_t__ block_sd1;
            (void) block_sd1;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd1 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 25;
            local_scalar_t__ block_sd2;
            (void) block_sd2;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd2 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 26;
            local_scalar_t__ block_sd3;
            (void) block_sd3;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd3 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd3 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 27;
            local_scalar_t__ block_sd4;
            (void) block_sd4;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd4 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd4 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 28;
            local_scalar_t__ block_sd5;
            (void) block_sd5;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd5 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd5 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 29;
            local_scalar_t__ block_sd6;
            (void) block_sd6;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd6 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd6 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 30;
            local_scalar_t__ block_sd7;
            (void) block_sd7;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd7 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd7 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 31;
            local_scalar_t__ block_sd8;
            (void) block_sd8;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd8 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd8 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 32;
            local_scalar_t__ block_sd9;
            (void) block_sd9;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd9 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd9 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 33;
            local_scalar_t__ block_sd10;
            (void) block_sd10;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd10 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd10 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 34;
            local_scalar_t__ block_sd11;
            (void) block_sd11;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd11 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd11 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 35;
            local_scalar_t__ block_sd12;
            (void) block_sd12;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd12 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd12 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 36;
            local_scalar_t__ block_sd13;
            (void) block_sd13;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd13 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd13 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 37;
            local_scalar_t__ block_sd14;
            (void) block_sd14;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd14 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd14 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 38;
            local_scalar_t__ block_sd15;
            (void) block_sd15;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd15 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd15 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 39;
            local_scalar_t__ block_sd16;
            (void) block_sd16;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd16 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd16 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 40;
            local_scalar_t__ block_sd17;
            (void) block_sd17;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd17 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd17 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 41;
            local_scalar_t__ block_sd18;
            (void) block_sd18;  // dummy to suppress unused var warning
            if (jacobian__)
                block_sd18 = in__.scalar_lb_constrain(0, lp__);
            else
                block_sd18 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 42;
            local_scalar_t__ psi_mean1;
            (void) psi_mean1;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean1 = in__.scalar_constrain(lp__);
            else
                psi_mean1 = in__.scalar_constrain();
            current_statement_begin__ = 43;
            local_scalar_t__ psi_mean2;
            (void) psi_mean2;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean2 = in__.scalar_constrain(lp__);
            else
                psi_mean2 = in__.scalar_constrain();
            current_statement_begin__ = 44;
            local_scalar_t__ psi_mean3;
            (void) psi_mean3;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean3 = in__.scalar_constrain(lp__);
            else
                psi_mean3 = in__.scalar_constrain();
            current_statement_begin__ = 45;
            local_scalar_t__ psi_mean4;
            (void) psi_mean4;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean4 = in__.scalar_constrain(lp__);
            else
                psi_mean4 = in__.scalar_constrain();
            current_statement_begin__ = 46;
            local_scalar_t__ psi_mean5;
            (void) psi_mean5;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean5 = in__.scalar_constrain(lp__);
            else
                psi_mean5 = in__.scalar_constrain();
            current_statement_begin__ = 47;
            local_scalar_t__ psi_mean6;
            (void) psi_mean6;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean6 = in__.scalar_constrain(lp__);
            else
                psi_mean6 = in__.scalar_constrain();
            current_statement_begin__ = 48;
            local_scalar_t__ psi_mean7;
            (void) psi_mean7;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean7 = in__.scalar_constrain(lp__);
            else
                psi_mean7 = in__.scalar_constrain();
            current_statement_begin__ = 49;
            local_scalar_t__ psi_mean8;
            (void) psi_mean8;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean8 = in__.scalar_constrain(lp__);
            else
                psi_mean8 = in__.scalar_constrain();
            current_statement_begin__ = 50;
            local_scalar_t__ psi_mean9;
            (void) psi_mean9;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean9 = in__.scalar_constrain(lp__);
            else
                psi_mean9 = in__.scalar_constrain();
            current_statement_begin__ = 51;
            local_scalar_t__ psi_mean10;
            (void) psi_mean10;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean10 = in__.scalar_constrain(lp__);
            else
                psi_mean10 = in__.scalar_constrain();
            current_statement_begin__ = 52;
            local_scalar_t__ psi_mean11;
            (void) psi_mean11;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean11 = in__.scalar_constrain(lp__);
            else
                psi_mean11 = in__.scalar_constrain();
            current_statement_begin__ = 53;
            local_scalar_t__ psi_mean12;
            (void) psi_mean12;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean12 = in__.scalar_constrain(lp__);
            else
                psi_mean12 = in__.scalar_constrain();
            current_statement_begin__ = 54;
            local_scalar_t__ psi_mean13;
            (void) psi_mean13;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean13 = in__.scalar_constrain(lp__);
            else
                psi_mean13 = in__.scalar_constrain();
            current_statement_begin__ = 55;
            local_scalar_t__ psi_mean14;
            (void) psi_mean14;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean14 = in__.scalar_constrain(lp__);
            else
                psi_mean14 = in__.scalar_constrain();
            current_statement_begin__ = 56;
            local_scalar_t__ psi_mean15;
            (void) psi_mean15;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean15 = in__.scalar_constrain(lp__);
            else
                psi_mean15 = in__.scalar_constrain();
            current_statement_begin__ = 57;
            local_scalar_t__ psi_mean16;
            (void) psi_mean16;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean16 = in__.scalar_constrain(lp__);
            else
                psi_mean16 = in__.scalar_constrain();
            current_statement_begin__ = 58;
            local_scalar_t__ psi_mean17;
            (void) psi_mean17;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean17 = in__.scalar_constrain(lp__);
            else
                psi_mean17 = in__.scalar_constrain();
            current_statement_begin__ = 59;
            local_scalar_t__ psi_mean18;
            (void) psi_mean18;  // dummy to suppress unused var warning
            if (jacobian__)
                psi_mean18 = in__.scalar_constrain(lp__);
            else
                psi_mean18 = in__.scalar_constrain();
            current_statement_begin__ = 60;
            local_scalar_t__ sd_h1;
            (void) sd_h1;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h1 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 61;
            local_scalar_t__ sd_h2;
            (void) sd_h2;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h2 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 62;
            local_scalar_t__ sd_h3;
            (void) sd_h3;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h3 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h3 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 63;
            local_scalar_t__ sd_h4;
            (void) sd_h4;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h4 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h4 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 64;
            local_scalar_t__ sd_h5;
            (void) sd_h5;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h5 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h5 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 65;
            local_scalar_t__ sd_h6;
            (void) sd_h6;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h6 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h6 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 66;
            local_scalar_t__ sd_h7;
            (void) sd_h7;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h7 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h7 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 67;
            local_scalar_t__ sd_h8;
            (void) sd_h8;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h8 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h8 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 68;
            local_scalar_t__ sd_h9;
            (void) sd_h9;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h9 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h9 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 69;
            local_scalar_t__ sd_h10;
            (void) sd_h10;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h10 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h10 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 70;
            local_scalar_t__ sd_h11;
            (void) sd_h11;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h11 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h11 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 71;
            local_scalar_t__ sd_h12;
            (void) sd_h12;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h12 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h12 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 72;
            local_scalar_t__ sd_h13;
            (void) sd_h13;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h13 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h13 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 73;
            local_scalar_t__ sd_h14;
            (void) sd_h14;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h14 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h14 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 74;
            local_scalar_t__ sd_h15;
            (void) sd_h15;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h15 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h15 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 75;
            local_scalar_t__ sd_h16;
            (void) sd_h16;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h16 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h16 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 76;
            local_scalar_t__ sd_h17;
            (void) sd_h17;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h17 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h17 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 77;
            local_scalar_t__ sd_h18;
            (void) sd_h18;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h18 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h18 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 78;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi1;
            (void) psi1;  // dummy to suppress unused var warning
            if (jacobian__)
                psi1 = in__.vector_constrain(n_block, lp__);
            else
                psi1 = in__.vector_constrain(n_block);
            current_statement_begin__ = 79;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi2;
            (void) psi2;  // dummy to suppress unused var warning
            if (jacobian__)
                psi2 = in__.vector_constrain(n_block, lp__);
            else
                psi2 = in__.vector_constrain(n_block);
            current_statement_begin__ = 80;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi3;
            (void) psi3;  // dummy to suppress unused var warning
            if (jacobian__)
                psi3 = in__.vector_constrain(n_block, lp__);
            else
                psi3 = in__.vector_constrain(n_block);
            current_statement_begin__ = 81;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi4;
            (void) psi4;  // dummy to suppress unused var warning
            if (jacobian__)
                psi4 = in__.vector_constrain(n_block, lp__);
            else
                psi4 = in__.vector_constrain(n_block);
            current_statement_begin__ = 82;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi5;
            (void) psi5;  // dummy to suppress unused var warning
            if (jacobian__)
                psi5 = in__.vector_constrain(n_block, lp__);
            else
                psi5 = in__.vector_constrain(n_block);
            current_statement_begin__ = 83;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi6;
            (void) psi6;  // dummy to suppress unused var warning
            if (jacobian__)
                psi6 = in__.vector_constrain(n_block, lp__);
            else
                psi6 = in__.vector_constrain(n_block);
            current_statement_begin__ = 84;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi7;
            (void) psi7;  // dummy to suppress unused var warning
            if (jacobian__)
                psi7 = in__.vector_constrain(n_block, lp__);
            else
                psi7 = in__.vector_constrain(n_block);
            current_statement_begin__ = 85;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi8;
            (void) psi8;  // dummy to suppress unused var warning
            if (jacobian__)
                psi8 = in__.vector_constrain(n_block, lp__);
            else
                psi8 = in__.vector_constrain(n_block);
            current_statement_begin__ = 86;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi9;
            (void) psi9;  // dummy to suppress unused var warning
            if (jacobian__)
                psi9 = in__.vector_constrain(n_block, lp__);
            else
                psi9 = in__.vector_constrain(n_block);
            current_statement_begin__ = 87;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi10;
            (void) psi10;  // dummy to suppress unused var warning
            if (jacobian__)
                psi10 = in__.vector_constrain(n_block, lp__);
            else
                psi10 = in__.vector_constrain(n_block);
            current_statement_begin__ = 88;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi11;
            (void) psi11;  // dummy to suppress unused var warning
            if (jacobian__)
                psi11 = in__.vector_constrain(n_block, lp__);
            else
                psi11 = in__.vector_constrain(n_block);
            current_statement_begin__ = 89;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi12;
            (void) psi12;  // dummy to suppress unused var warning
            if (jacobian__)
                psi12 = in__.vector_constrain(n_block, lp__);
            else
                psi12 = in__.vector_constrain(n_block);
            current_statement_begin__ = 90;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi13;
            (void) psi13;  // dummy to suppress unused var warning
            if (jacobian__)
                psi13 = in__.vector_constrain(n_block, lp__);
            else
                psi13 = in__.vector_constrain(n_block);
            current_statement_begin__ = 91;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi14;
            (void) psi14;  // dummy to suppress unused var warning
            if (jacobian__)
                psi14 = in__.vector_constrain(n_block, lp__);
            else
                psi14 = in__.vector_constrain(n_block);
            current_statement_begin__ = 92;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi15;
            (void) psi15;  // dummy to suppress unused var warning
            if (jacobian__)
                psi15 = in__.vector_constrain(n_block, lp__);
            else
                psi15 = in__.vector_constrain(n_block);
            current_statement_begin__ = 93;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi16;
            (void) psi16;  // dummy to suppress unused var warning
            if (jacobian__)
                psi16 = in__.vector_constrain(n_block, lp__);
            else
                psi16 = in__.vector_constrain(n_block);
            current_statement_begin__ = 94;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi17;
            (void) psi17;  // dummy to suppress unused var warning
            if (jacobian__)
                psi17 = in__.vector_constrain(n_block, lp__);
            else
                psi17 = in__.vector_constrain(n_block);
            current_statement_begin__ = 95;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi18;
            (void) psi18;  // dummy to suppress unused var warning
            if (jacobian__)
                psi18 = in__.vector_constrain(n_block, lp__);
            else
                psi18 = in__.vector_constrain(n_block);
            current_statement_begin__ = 96;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h1;
            (void) h1;  // dummy to suppress unused var warning
            if (jacobian__)
                h1 = in__.vector_constrain(n_block, lp__);
            else
                h1 = in__.vector_constrain(n_block);
            current_statement_begin__ = 97;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h2;
            (void) h2;  // dummy to suppress unused var warning
            if (jacobian__)
                h2 = in__.vector_constrain(n_block, lp__);
            else
                h2 = in__.vector_constrain(n_block);
            current_statement_begin__ = 98;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h3;
            (void) h3;  // dummy to suppress unused var warning
            if (jacobian__)
                h3 = in__.vector_constrain(n_block, lp__);
            else
                h3 = in__.vector_constrain(n_block);
            current_statement_begin__ = 99;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h4;
            (void) h4;  // dummy to suppress unused var warning
            if (jacobian__)
                h4 = in__.vector_constrain(n_block, lp__);
            else
                h4 = in__.vector_constrain(n_block);
            current_statement_begin__ = 100;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h5;
            (void) h5;  // dummy to suppress unused var warning
            if (jacobian__)
                h5 = in__.vector_constrain(n_block, lp__);
            else
                h5 = in__.vector_constrain(n_block);
            current_statement_begin__ = 101;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h6;
            (void) h6;  // dummy to suppress unused var warning
            if (jacobian__)
                h6 = in__.vector_constrain(n_block, lp__);
            else
                h6 = in__.vector_constrain(n_block);
            current_statement_begin__ = 102;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h7;
            (void) h7;  // dummy to suppress unused var warning
            if (jacobian__)
                h7 = in__.vector_constrain(n_block, lp__);
            else
                h7 = in__.vector_constrain(n_block);
            current_statement_begin__ = 103;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h8;
            (void) h8;  // dummy to suppress unused var warning
            if (jacobian__)
                h8 = in__.vector_constrain(n_block, lp__);
            else
                h8 = in__.vector_constrain(n_block);
            current_statement_begin__ = 104;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h9;
            (void) h9;  // dummy to suppress unused var warning
            if (jacobian__)
                h9 = in__.vector_constrain(n_block, lp__);
            else
                h9 = in__.vector_constrain(n_block);
            current_statement_begin__ = 105;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h10;
            (void) h10;  // dummy to suppress unused var warning
            if (jacobian__)
                h10 = in__.vector_constrain(n_block, lp__);
            else
                h10 = in__.vector_constrain(n_block);
            current_statement_begin__ = 106;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h11;
            (void) h11;  // dummy to suppress unused var warning
            if (jacobian__)
                h11 = in__.vector_constrain(n_block, lp__);
            else
                h11 = in__.vector_constrain(n_block);
            current_statement_begin__ = 107;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h12;
            (void) h12;  // dummy to suppress unused var warning
            if (jacobian__)
                h12 = in__.vector_constrain(n_block, lp__);
            else
                h12 = in__.vector_constrain(n_block);
            current_statement_begin__ = 108;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h13;
            (void) h13;  // dummy to suppress unused var warning
            if (jacobian__)
                h13 = in__.vector_constrain(n_block, lp__);
            else
                h13 = in__.vector_constrain(n_block);
            current_statement_begin__ = 109;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h14;
            (void) h14;  // dummy to suppress unused var warning
            if (jacobian__)
                h14 = in__.vector_constrain(n_block, lp__);
            else
                h14 = in__.vector_constrain(n_block);
            current_statement_begin__ = 110;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h15;
            (void) h15;  // dummy to suppress unused var warning
            if (jacobian__)
                h15 = in__.vector_constrain(n_block, lp__);
            else
                h15 = in__.vector_constrain(n_block);
            current_statement_begin__ = 111;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h16;
            (void) h16;  // dummy to suppress unused var warning
            if (jacobian__)
                h16 = in__.vector_constrain(n_block, lp__);
            else
                h16 = in__.vector_constrain(n_block);
            current_statement_begin__ = 112;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h17;
            (void) h17;  // dummy to suppress unused var warning
            if (jacobian__)
                h17 = in__.vector_constrain(n_block, lp__);
            else
                h17 = in__.vector_constrain(n_block);
            current_statement_begin__ = 113;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h18;
            (void) h18;  // dummy to suppress unused var warning
            if (jacobian__)
                h18 = in__.vector_constrain(n_block, lp__);
            else
                h18 = in__.vector_constrain(n_block);
            current_statement_begin__ = 114;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h1_holdout;
            (void) h1_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h1_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h1_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 115;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h2_holdout;
            (void) h2_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h2_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h2_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 116;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h3_holdout;
            (void) h3_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h3_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h3_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 117;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h4_holdout;
            (void) h4_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h4_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h4_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 118;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h5_holdout;
            (void) h5_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h5_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h5_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 119;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h6_holdout;
            (void) h6_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h6_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h6_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 120;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h7_holdout;
            (void) h7_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h7_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h7_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 121;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h8_holdout;
            (void) h8_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h8_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h8_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 122;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h9_holdout;
            (void) h9_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h9_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h9_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 123;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h10_holdout;
            (void) h10_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h10_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h10_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 124;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h11_holdout;
            (void) h11_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h11_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h11_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 125;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h12_holdout;
            (void) h12_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h12_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h12_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 126;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h13_holdout;
            (void) h13_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h13_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h13_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 127;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h14_holdout;
            (void) h14_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h14_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h14_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 128;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h15_holdout;
            (void) h15_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h15_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h15_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 129;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h16_holdout;
            (void) h16_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h16_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h16_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 130;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h17_holdout;
            (void) h17_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h17_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h17_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 131;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h18_holdout;
            (void) h18_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h18_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h18_holdout = in__.vector_constrain(n_block_pred);
            // transformed parameters
            current_statement_begin__ = 135;
            validate_non_negative_index("mu", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(n);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 136;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 137;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((((((((((((((((((get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 1, "b_spline", 2) * get_base1(h1, get_base1(block_data, i, "block_data", 1), "h1", 1)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 2, "b_spline", 2) * get_base1(h2, get_base1(block_data, i, "block_data", 1), "h2", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 3, "b_spline", 2) * get_base1(h3, get_base1(block_data, i, "block_data", 1), "h3", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 4, "b_spline", 2) * get_base1(h4, get_base1(block_data, i, "block_data", 1), "h4", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 5, "b_spline", 2) * get_base1(h5, get_base1(block_data, i, "block_data", 1), "h5", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 6, "b_spline", 2) * get_base1(h6, get_base1(block_data, i, "block_data", 1), "h6", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 7, "b_spline", 2) * get_base1(h7, get_base1(block_data, i, "block_data", 1), "h7", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 8, "b_spline", 2) * get_base1(h8, get_base1(block_data, i, "block_data", 1), "h8", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 9, "b_spline", 2) * get_base1(h9, get_base1(block_data, i, "block_data", 1), "h9", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 10, "b_spline", 2) * get_base1(h10, get_base1(block_data, i, "block_data", 1), "h10", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 11, "b_spline", 2) * get_base1(h11, get_base1(block_data, i, "block_data", 1), "h11", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 12, "b_spline", 2) * get_base1(h12, get_base1(block_data, i, "block_data", 1), "h12", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 13, "b_spline", 2) * get_base1(h13, get_base1(block_data, i, "block_data", 1), "h13", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 14, "b_spline", 2) * get_base1(h14, get_base1(block_data, i, "block_data", 1), "h14", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 15, "b_spline", 2) * get_base1(h15, get_base1(block_data, i, "block_data", 1), "h15", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 16, "b_spline", 2) * get_base1(h16, get_base1(block_data, i, "block_data", 1), "h16", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 17, "b_spline", 2) * get_base1(h17, get_base1(block_data, i, "block_data", 1), "h17", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 18, "b_spline", 2) * get_base1(h18, get_base1(block_data, i, "block_data", 1), "h18", 1))), 
                            "assigning variable mu");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 135;
            size_t mu_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 141;
            lp_accum__.add(normal_log<propto__>(stan::math::log(size_data), mu, sigma_obs));
            current_statement_begin__ = 142;
            lp_accum__.add(normal_log<propto__>(sigma_obs, 0, 2));
            current_statement_begin__ = 143;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 144;
                lp_accum__.add(normal_log<propto__>(get_base1(h1, j, "h1", 1), get_base1(psi1, j, "psi1", 1), sd_h1));
            }
            current_statement_begin__ = 145;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 146;
                lp_accum__.add(normal_log<propto__>(get_base1(h2, j, "h2", 1), get_base1(psi2, j, "psi2", 1), sd_h2));
            }
            current_statement_begin__ = 147;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 148;
                lp_accum__.add(normal_log<propto__>(get_base1(h3, j, "h3", 1), get_base1(psi3, j, "psi3", 1), sd_h3));
            }
            current_statement_begin__ = 149;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 150;
                lp_accum__.add(normal_log<propto__>(get_base1(h4, j, "h4", 1), get_base1(psi4, j, "psi4", 1), sd_h4));
            }
            current_statement_begin__ = 151;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 152;
                lp_accum__.add(normal_log<propto__>(get_base1(h5, j, "h5", 1), get_base1(psi5, j, "psi5", 1), sd_h5));
            }
            current_statement_begin__ = 153;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 154;
                lp_accum__.add(normal_log<propto__>(get_base1(h6, j, "h6", 1), get_base1(psi6, j, "psi6", 1), sd_h6));
            }
            current_statement_begin__ = 155;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 156;
                lp_accum__.add(normal_log<propto__>(get_base1(h7, j, "h7", 1), get_base1(psi7, j, "psi7", 1), sd_h7));
            }
            current_statement_begin__ = 157;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 158;
                lp_accum__.add(normal_log<propto__>(get_base1(h8, j, "h8", 1), get_base1(psi8, j, "psi8", 1), sd_h8));
            }
            current_statement_begin__ = 159;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 160;
                lp_accum__.add(normal_log<propto__>(get_base1(h9, j, "h9", 1), get_base1(psi9, j, "psi9", 1), sd_h9));
            }
            current_statement_begin__ = 161;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 162;
                lp_accum__.add(normal_log<propto__>(get_base1(h10, j, "h10", 1), get_base1(psi10, j, "psi10", 1), sd_h10));
            }
            current_statement_begin__ = 163;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 164;
                lp_accum__.add(normal_log<propto__>(get_base1(h11, j, "h11", 1), get_base1(psi11, j, "psi11", 1), sd_h11));
            }
            current_statement_begin__ = 165;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 166;
                lp_accum__.add(normal_log<propto__>(get_base1(h12, j, "h12", 1), get_base1(psi12, j, "psi12", 1), sd_h12));
            }
            current_statement_begin__ = 167;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 168;
                lp_accum__.add(normal_log<propto__>(get_base1(h13, j, "h13", 1), get_base1(psi13, j, "psi13", 1), sd_h13));
            }
            current_statement_begin__ = 169;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 170;
                lp_accum__.add(normal_log<propto__>(get_base1(h14, j, "h14", 1), get_base1(psi14, j, "psi14", 1), sd_h14));
            }
            current_statement_begin__ = 171;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 172;
                lp_accum__.add(normal_log<propto__>(get_base1(h15, j, "h15", 1), get_base1(psi15, j, "psi15", 1), sd_h15));
            }
            current_statement_begin__ = 173;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 174;
                lp_accum__.add(normal_log<propto__>(get_base1(h16, j, "h16", 1), get_base1(psi16, j, "psi16", 1), sd_h16));
            }
            current_statement_begin__ = 175;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 176;
                lp_accum__.add(normal_log<propto__>(get_base1(h17, j, "h17", 1), get_base1(psi17, j, "psi17", 1), sd_h17));
            }
            current_statement_begin__ = 177;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 178;
                lp_accum__.add(normal_log<propto__>(get_base1(h18, j, "h18", 1), get_base1(psi18, j, "psi18", 1), sd_h18));
            }
            current_statement_begin__ = 179;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 180;
                lp_accum__.add(normal_log<propto__>(get_base1(h1_holdout, j, "h1_holdout", 1), psi_mean1, sd_h1));
            }
            current_statement_begin__ = 181;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 182;
                lp_accum__.add(normal_log<propto__>(get_base1(h2_holdout, j, "h2_holdout", 1), psi_mean2, sd_h2));
            }
            current_statement_begin__ = 183;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 184;
                lp_accum__.add(normal_log<propto__>(get_base1(h3_holdout, j, "h3_holdout", 1), psi_mean3, sd_h3));
            }
            current_statement_begin__ = 185;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 186;
                lp_accum__.add(normal_log<propto__>(get_base1(h4_holdout, j, "h4_holdout", 1), psi_mean4, sd_h4));
            }
            current_statement_begin__ = 187;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 188;
                lp_accum__.add(normal_log<propto__>(get_base1(h5_holdout, j, "h5_holdout", 1), psi_mean5, sd_h5));
            }
            current_statement_begin__ = 189;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 190;
                lp_accum__.add(normal_log<propto__>(get_base1(h6_holdout, j, "h6_holdout", 1), psi_mean6, sd_h6));
            }
            current_statement_begin__ = 191;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 192;
                lp_accum__.add(normal_log<propto__>(get_base1(h7_holdout, j, "h7_holdout", 1), psi_mean7, sd_h7));
            }
            current_statement_begin__ = 193;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 194;
                lp_accum__.add(normal_log<propto__>(get_base1(h8_holdout, j, "h8_holdout", 1), psi_mean8, sd_h8));
            }
            current_statement_begin__ = 195;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 196;
                lp_accum__.add(normal_log<propto__>(get_base1(h9_holdout, j, "h9_holdout", 1), psi_mean9, sd_h9));
            }
            current_statement_begin__ = 197;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 198;
                lp_accum__.add(normal_log<propto__>(get_base1(h10_holdout, j, "h10_holdout", 1), psi_mean10, sd_h10));
            }
            current_statement_begin__ = 199;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 200;
                lp_accum__.add(normal_log<propto__>(get_base1(h11_holdout, j, "h11_holdout", 1), psi_mean11, sd_h11));
            }
            current_statement_begin__ = 201;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 202;
                lp_accum__.add(normal_log<propto__>(get_base1(h12_holdout, j, "h12_holdout", 1), psi_mean12, sd_h12));
            }
            current_statement_begin__ = 203;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 204;
                lp_accum__.add(normal_log<propto__>(get_base1(h13_holdout, j, "h13_holdout", 1), psi_mean13, sd_h13));
            }
            current_statement_begin__ = 205;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 206;
                lp_accum__.add(normal_log<propto__>(get_base1(h14_holdout, j, "h14_holdout", 1), psi_mean14, sd_h14));
            }
            current_statement_begin__ = 207;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 208;
                lp_accum__.add(normal_log<propto__>(get_base1(h15_holdout, j, "h15_holdout", 1), psi_mean15, sd_h15));
            }
            current_statement_begin__ = 209;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 210;
                lp_accum__.add(normal_log<propto__>(get_base1(h16_holdout, j, "h16_holdout", 1), psi_mean16, sd_h16));
            }
            current_statement_begin__ = 211;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 212;
                lp_accum__.add(normal_log<propto__>(get_base1(h17_holdout, j, "h17_holdout", 1), psi_mean17, sd_h17));
            }
            current_statement_begin__ = 213;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 214;
                lp_accum__.add(normal_log<propto__>(get_base1(h18_holdout, j, "h18_holdout", 1), psi_mean18, sd_h18));
            }
            current_statement_begin__ = 215;
            lp_accum__.add(normal_log<propto__>(block_sd1, 0.0, 2.0));
            current_statement_begin__ = 216;
            lp_accum__.add(normal_log<propto__>(block_sd2, 0.0, 2.0));
            current_statement_begin__ = 217;
            lp_accum__.add(normal_log<propto__>(block_sd3, 0.0, 2.0));
            current_statement_begin__ = 218;
            lp_accum__.add(normal_log<propto__>(block_sd4, 0.0, 2.0));
            current_statement_begin__ = 219;
            lp_accum__.add(normal_log<propto__>(block_sd5, 0.0, 2.0));
            current_statement_begin__ = 220;
            lp_accum__.add(normal_log<propto__>(block_sd6, 0.0, 2.0));
            current_statement_begin__ = 221;
            lp_accum__.add(normal_log<propto__>(block_sd7, 0.0, 2.0));
            current_statement_begin__ = 222;
            lp_accum__.add(normal_log<propto__>(block_sd8, 0.0, 2.0));
            current_statement_begin__ = 223;
            lp_accum__.add(normal_log<propto__>(block_sd9, 0.0, 2.0));
            current_statement_begin__ = 224;
            lp_accum__.add(normal_log<propto__>(block_sd10, 0.0, 2.0));
            current_statement_begin__ = 225;
            lp_accum__.add(normal_log<propto__>(block_sd11, 0.0, 2.0));
            current_statement_begin__ = 226;
            lp_accum__.add(normal_log<propto__>(block_sd12, 0.0, 2.0));
            current_statement_begin__ = 227;
            lp_accum__.add(normal_log<propto__>(block_sd13, 0.0, 2.0));
            current_statement_begin__ = 228;
            lp_accum__.add(normal_log<propto__>(block_sd14, 0.0, 2.0));
            current_statement_begin__ = 229;
            lp_accum__.add(normal_log<propto__>(block_sd15, 0.0, 2.0));
            current_statement_begin__ = 230;
            lp_accum__.add(normal_log<propto__>(block_sd16, 0.0, 2.0));
            current_statement_begin__ = 231;
            lp_accum__.add(normal_log<propto__>(block_sd17, 0.0, 2.0));
            current_statement_begin__ = 232;
            lp_accum__.add(normal_log<propto__>(block_sd18, 0.0, 2.0));
            current_statement_begin__ = 233;
            lp_accum__.add(normal_log<propto__>(psi_mean1, 0.0, 2.0));
            current_statement_begin__ = 234;
            lp_accum__.add(normal_log<propto__>(psi_mean2, 0.0, 2.0));
            current_statement_begin__ = 235;
            lp_accum__.add(normal_log<propto__>(psi_mean3, 0.0, 2.0));
            current_statement_begin__ = 236;
            lp_accum__.add(normal_log<propto__>(psi_mean4, 0.0, 2.0));
            current_statement_begin__ = 237;
            lp_accum__.add(normal_log<propto__>(psi_mean5, 0.0, 2.0));
            current_statement_begin__ = 238;
            lp_accum__.add(normal_log<propto__>(psi_mean6, 0.0, 2.0));
            current_statement_begin__ = 239;
            lp_accum__.add(normal_log<propto__>(psi_mean7, 0.0, 2.0));
            current_statement_begin__ = 240;
            lp_accum__.add(normal_log<propto__>(psi_mean8, 0.0, 2.0));
            current_statement_begin__ = 241;
            lp_accum__.add(normal_log<propto__>(psi_mean9, 0.0, 2.0));
            current_statement_begin__ = 242;
            lp_accum__.add(normal_log<propto__>(psi_mean10, 0.0, 2.0));
            current_statement_begin__ = 243;
            lp_accum__.add(normal_log<propto__>(psi_mean11, 0.0, 2.0));
            current_statement_begin__ = 244;
            lp_accum__.add(normal_log<propto__>(psi_mean12, 0.0, 2.0));
            current_statement_begin__ = 245;
            lp_accum__.add(normal_log<propto__>(psi_mean13, 0.0, 2.0));
            current_statement_begin__ = 246;
            lp_accum__.add(normal_log<propto__>(psi_mean14, 0.0, 2.0));
            current_statement_begin__ = 247;
            lp_accum__.add(normal_log<propto__>(psi_mean15, 0.0, 2.0));
            current_statement_begin__ = 248;
            lp_accum__.add(normal_log<propto__>(psi_mean16, 0.0, 2.0));
            current_statement_begin__ = 249;
            lp_accum__.add(normal_log<propto__>(psi_mean17, 0.0, 2.0));
            current_statement_begin__ = 250;
            lp_accum__.add(normal_log<propto__>(psi_mean18, 0.0, 2.0));
            current_statement_begin__ = 251;
            lp_accum__.add(normal_log<propto__>(psi1, psi_mean1, block_sd1));
            current_statement_begin__ = 252;
            lp_accum__.add(normal_log<propto__>(psi2, psi_mean2, block_sd2));
            current_statement_begin__ = 253;
            lp_accum__.add(normal_log<propto__>(psi3, psi_mean3, block_sd3));
            current_statement_begin__ = 254;
            lp_accum__.add(normal_log<propto__>(psi4, psi_mean4, block_sd4));
            current_statement_begin__ = 255;
            lp_accum__.add(normal_log<propto__>(psi5, psi_mean5, block_sd5));
            current_statement_begin__ = 256;
            lp_accum__.add(normal_log<propto__>(psi6, psi_mean6, block_sd6));
            current_statement_begin__ = 257;
            lp_accum__.add(normal_log<propto__>(psi7, psi_mean7, block_sd7));
            current_statement_begin__ = 258;
            lp_accum__.add(normal_log<propto__>(psi8, psi_mean8, block_sd8));
            current_statement_begin__ = 259;
            lp_accum__.add(normal_log<propto__>(psi9, psi_mean9, block_sd9));
            current_statement_begin__ = 260;
            lp_accum__.add(normal_log<propto__>(psi10, psi_mean10, block_sd10));
            current_statement_begin__ = 261;
            lp_accum__.add(normal_log<propto__>(psi11, psi_mean11, block_sd11));
            current_statement_begin__ = 262;
            lp_accum__.add(normal_log<propto__>(psi12, psi_mean12, block_sd12));
            current_statement_begin__ = 263;
            lp_accum__.add(normal_log<propto__>(psi13, psi_mean13, block_sd13));
            current_statement_begin__ = 264;
            lp_accum__.add(normal_log<propto__>(psi14, psi_mean14, block_sd14));
            current_statement_begin__ = 265;
            lp_accum__.add(normal_log<propto__>(psi15, psi_mean15, block_sd15));
            current_statement_begin__ = 266;
            lp_accum__.add(normal_log<propto__>(psi16, psi_mean16, block_sd16));
            current_statement_begin__ = 267;
            lp_accum__.add(normal_log<propto__>(psi17, psi_mean17, block_sd17));
            current_statement_begin__ = 268;
            lp_accum__.add(normal_log<propto__>(psi18, psi_mean18, block_sd18));
            current_statement_begin__ = 269;
            lp_accum__.add(normal_log<propto__>(sd_h1, 0.0, 2.0));
            current_statement_begin__ = 270;
            lp_accum__.add(normal_log<propto__>(sd_h2, 0.0, 2.0));
            current_statement_begin__ = 271;
            lp_accum__.add(normal_log<propto__>(sd_h3, 0.0, 2.0));
            current_statement_begin__ = 272;
            lp_accum__.add(normal_log<propto__>(sd_h4, 0.0, 2.0));
            current_statement_begin__ = 273;
            lp_accum__.add(normal_log<propto__>(sd_h5, 0.0, 2.0));
            current_statement_begin__ = 274;
            lp_accum__.add(normal_log<propto__>(sd_h6, 0.0, 2.0));
            current_statement_begin__ = 275;
            lp_accum__.add(normal_log<propto__>(sd_h7, 0.0, 2.0));
            current_statement_begin__ = 276;
            lp_accum__.add(normal_log<propto__>(sd_h8, 0.0, 2.0));
            current_statement_begin__ = 277;
            lp_accum__.add(normal_log<propto__>(sd_h9, 0.0, 2.0));
            current_statement_begin__ = 278;
            lp_accum__.add(normal_log<propto__>(sd_h10, 0.0, 2.0));
            current_statement_begin__ = 279;
            lp_accum__.add(normal_log<propto__>(sd_h11, 0.0, 2.0));
            current_statement_begin__ = 280;
            lp_accum__.add(normal_log<propto__>(sd_h12, 0.0, 2.0));
            current_statement_begin__ = 281;
            lp_accum__.add(normal_log<propto__>(sd_h13, 0.0, 2.0));
            current_statement_begin__ = 282;
            lp_accum__.add(normal_log<propto__>(sd_h14, 0.0, 2.0));
            current_statement_begin__ = 283;
            lp_accum__.add(normal_log<propto__>(sd_h15, 0.0, 2.0));
            current_statement_begin__ = 284;
            lp_accum__.add(normal_log<propto__>(sd_h16, 0.0, 2.0));
            current_statement_begin__ = 285;
            lp_accum__.add(normal_log<propto__>(sd_h17, 0.0, 2.0));
            current_statement_begin__ = 286;
            lp_accum__.add(normal_log<propto__>(sd_h18, 0.0, 2.0));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma_obs");
        names__.push_back("block_sd1");
        names__.push_back("block_sd2");
        names__.push_back("block_sd3");
        names__.push_back("block_sd4");
        names__.push_back("block_sd5");
        names__.push_back("block_sd6");
        names__.push_back("block_sd7");
        names__.push_back("block_sd8");
        names__.push_back("block_sd9");
        names__.push_back("block_sd10");
        names__.push_back("block_sd11");
        names__.push_back("block_sd12");
        names__.push_back("block_sd13");
        names__.push_back("block_sd14");
        names__.push_back("block_sd15");
        names__.push_back("block_sd16");
        names__.push_back("block_sd17");
        names__.push_back("block_sd18");
        names__.push_back("psi_mean1");
        names__.push_back("psi_mean2");
        names__.push_back("psi_mean3");
        names__.push_back("psi_mean4");
        names__.push_back("psi_mean5");
        names__.push_back("psi_mean6");
        names__.push_back("psi_mean7");
        names__.push_back("psi_mean8");
        names__.push_back("psi_mean9");
        names__.push_back("psi_mean10");
        names__.push_back("psi_mean11");
        names__.push_back("psi_mean12");
        names__.push_back("psi_mean13");
        names__.push_back("psi_mean14");
        names__.push_back("psi_mean15");
        names__.push_back("psi_mean16");
        names__.push_back("psi_mean17");
        names__.push_back("psi_mean18");
        names__.push_back("sd_h1");
        names__.push_back("sd_h2");
        names__.push_back("sd_h3");
        names__.push_back("sd_h4");
        names__.push_back("sd_h5");
        names__.push_back("sd_h6");
        names__.push_back("sd_h7");
        names__.push_back("sd_h8");
        names__.push_back("sd_h9");
        names__.push_back("sd_h10");
        names__.push_back("sd_h11");
        names__.push_back("sd_h12");
        names__.push_back("sd_h13");
        names__.push_back("sd_h14");
        names__.push_back("sd_h15");
        names__.push_back("sd_h16");
        names__.push_back("sd_h17");
        names__.push_back("sd_h18");
        names__.push_back("psi1");
        names__.push_back("psi2");
        names__.push_back("psi3");
        names__.push_back("psi4");
        names__.push_back("psi5");
        names__.push_back("psi6");
        names__.push_back("psi7");
        names__.push_back("psi8");
        names__.push_back("psi9");
        names__.push_back("psi10");
        names__.push_back("psi11");
        names__.push_back("psi12");
        names__.push_back("psi13");
        names__.push_back("psi14");
        names__.push_back("psi15");
        names__.push_back("psi16");
        names__.push_back("psi17");
        names__.push_back("psi18");
        names__.push_back("h1");
        names__.push_back("h2");
        names__.push_back("h3");
        names__.push_back("h4");
        names__.push_back("h5");
        names__.push_back("h6");
        names__.push_back("h7");
        names__.push_back("h8");
        names__.push_back("h9");
        names__.push_back("h10");
        names__.push_back("h11");
        names__.push_back("h12");
        names__.push_back("h13");
        names__.push_back("h14");
        names__.push_back("h15");
        names__.push_back("h16");
        names__.push_back("h17");
        names__.push_back("h18");
        names__.push_back("h1_holdout");
        names__.push_back("h2_holdout");
        names__.push_back("h3_holdout");
        names__.push_back("h4_holdout");
        names__.push_back("h5_holdout");
        names__.push_back("h6_holdout");
        names__.push_back("h7_holdout");
        names__.push_back("h8_holdout");
        names__.push_back("h9_holdout");
        names__.push_back("h10_holdout");
        names__.push_back("h11_holdout");
        names__.push_back("h12_holdout");
        names__.push_back("h13_holdout");
        names__.push_back("h14_holdout");
        names__.push_back("h15_holdout");
        names__.push_back("h16_holdout");
        names__.push_back("h17_holdout");
        names__.push_back("h18_holdout");
        names__.push_back("mu");
        names__.push_back("mu_plot_growth");
        names__.push_back("mu_plot_agr");
        names__.push_back("mu_pred");
        names__.push_back("size_plot");
        names__.push_back("size_plot_agr");
        names__.push_back("size_pred");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_spline_nopred_blockmod_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigma_obs = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_obs);
        double block_sd1 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd1);
        double block_sd2 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd2);
        double block_sd3 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd3);
        double block_sd4 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd4);
        double block_sd5 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd5);
        double block_sd6 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd6);
        double block_sd7 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd7);
        double block_sd8 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd8);
        double block_sd9 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd9);
        double block_sd10 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd10);
        double block_sd11 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd11);
        double block_sd12 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd12);
        double block_sd13 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd13);
        double block_sd14 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd14);
        double block_sd15 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd15);
        double block_sd16 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd16);
        double block_sd17 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd17);
        double block_sd18 = in__.scalar_lb_constrain(0);
        vars__.push_back(block_sd18);
        double psi_mean1 = in__.scalar_constrain();
        vars__.push_back(psi_mean1);
        double psi_mean2 = in__.scalar_constrain();
        vars__.push_back(psi_mean2);
        double psi_mean3 = in__.scalar_constrain();
        vars__.push_back(psi_mean3);
        double psi_mean4 = in__.scalar_constrain();
        vars__.push_back(psi_mean4);
        double psi_mean5 = in__.scalar_constrain();
        vars__.push_back(psi_mean5);
        double psi_mean6 = in__.scalar_constrain();
        vars__.push_back(psi_mean6);
        double psi_mean7 = in__.scalar_constrain();
        vars__.push_back(psi_mean7);
        double psi_mean8 = in__.scalar_constrain();
        vars__.push_back(psi_mean8);
        double psi_mean9 = in__.scalar_constrain();
        vars__.push_back(psi_mean9);
        double psi_mean10 = in__.scalar_constrain();
        vars__.push_back(psi_mean10);
        double psi_mean11 = in__.scalar_constrain();
        vars__.push_back(psi_mean11);
        double psi_mean12 = in__.scalar_constrain();
        vars__.push_back(psi_mean12);
        double psi_mean13 = in__.scalar_constrain();
        vars__.push_back(psi_mean13);
        double psi_mean14 = in__.scalar_constrain();
        vars__.push_back(psi_mean14);
        double psi_mean15 = in__.scalar_constrain();
        vars__.push_back(psi_mean15);
        double psi_mean16 = in__.scalar_constrain();
        vars__.push_back(psi_mean16);
        double psi_mean17 = in__.scalar_constrain();
        vars__.push_back(psi_mean17);
        double psi_mean18 = in__.scalar_constrain();
        vars__.push_back(psi_mean18);
        double sd_h1 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h1);
        double sd_h2 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h2);
        double sd_h3 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h3);
        double sd_h4 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h4);
        double sd_h5 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h5);
        double sd_h6 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h6);
        double sd_h7 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h7);
        double sd_h8 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h8);
        double sd_h9 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h9);
        double sd_h10 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h10);
        double sd_h11 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h11);
        double sd_h12 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h12);
        double sd_h13 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h13);
        double sd_h14 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h14);
        double sd_h15 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h15);
        double sd_h16 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h16);
        double sd_h17 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h17);
        double sd_h18 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h18);
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi1 = in__.vector_constrain(n_block);
        size_t psi1_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi1_j_1_max__; ++j_1__) {
            vars__.push_back(psi1(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi2 = in__.vector_constrain(n_block);
        size_t psi2_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi2_j_1_max__; ++j_1__) {
            vars__.push_back(psi2(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi3 = in__.vector_constrain(n_block);
        size_t psi3_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi3_j_1_max__; ++j_1__) {
            vars__.push_back(psi3(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi4 = in__.vector_constrain(n_block);
        size_t psi4_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi4_j_1_max__; ++j_1__) {
            vars__.push_back(psi4(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi5 = in__.vector_constrain(n_block);
        size_t psi5_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi5_j_1_max__; ++j_1__) {
            vars__.push_back(psi5(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi6 = in__.vector_constrain(n_block);
        size_t psi6_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi6_j_1_max__; ++j_1__) {
            vars__.push_back(psi6(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi7 = in__.vector_constrain(n_block);
        size_t psi7_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi7_j_1_max__; ++j_1__) {
            vars__.push_back(psi7(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi8 = in__.vector_constrain(n_block);
        size_t psi8_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi8_j_1_max__; ++j_1__) {
            vars__.push_back(psi8(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi9 = in__.vector_constrain(n_block);
        size_t psi9_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi9_j_1_max__; ++j_1__) {
            vars__.push_back(psi9(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi10 = in__.vector_constrain(n_block);
        size_t psi10_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi10_j_1_max__; ++j_1__) {
            vars__.push_back(psi10(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi11 = in__.vector_constrain(n_block);
        size_t psi11_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi11_j_1_max__; ++j_1__) {
            vars__.push_back(psi11(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi12 = in__.vector_constrain(n_block);
        size_t psi12_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi12_j_1_max__; ++j_1__) {
            vars__.push_back(psi12(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi13 = in__.vector_constrain(n_block);
        size_t psi13_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi13_j_1_max__; ++j_1__) {
            vars__.push_back(psi13(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi14 = in__.vector_constrain(n_block);
        size_t psi14_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi14_j_1_max__; ++j_1__) {
            vars__.push_back(psi14(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi15 = in__.vector_constrain(n_block);
        size_t psi15_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi15_j_1_max__; ++j_1__) {
            vars__.push_back(psi15(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi16 = in__.vector_constrain(n_block);
        size_t psi16_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi16_j_1_max__; ++j_1__) {
            vars__.push_back(psi16(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi17 = in__.vector_constrain(n_block);
        size_t psi17_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi17_j_1_max__; ++j_1__) {
            vars__.push_back(psi17(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> psi18 = in__.vector_constrain(n_block);
        size_t psi18_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi18_j_1_max__; ++j_1__) {
            vars__.push_back(psi18(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h1 = in__.vector_constrain(n_block);
        size_t h1_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h1_j_1_max__; ++j_1__) {
            vars__.push_back(h1(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h2 = in__.vector_constrain(n_block);
        size_t h2_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h2_j_1_max__; ++j_1__) {
            vars__.push_back(h2(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h3 = in__.vector_constrain(n_block);
        size_t h3_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h3_j_1_max__; ++j_1__) {
            vars__.push_back(h3(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h4 = in__.vector_constrain(n_block);
        size_t h4_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h4_j_1_max__; ++j_1__) {
            vars__.push_back(h4(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h5 = in__.vector_constrain(n_block);
        size_t h5_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h5_j_1_max__; ++j_1__) {
            vars__.push_back(h5(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h6 = in__.vector_constrain(n_block);
        size_t h6_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h6_j_1_max__; ++j_1__) {
            vars__.push_back(h6(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h7 = in__.vector_constrain(n_block);
        size_t h7_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h7_j_1_max__; ++j_1__) {
            vars__.push_back(h7(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h8 = in__.vector_constrain(n_block);
        size_t h8_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h8_j_1_max__; ++j_1__) {
            vars__.push_back(h8(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h9 = in__.vector_constrain(n_block);
        size_t h9_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h9_j_1_max__; ++j_1__) {
            vars__.push_back(h9(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h10 = in__.vector_constrain(n_block);
        size_t h10_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h10_j_1_max__; ++j_1__) {
            vars__.push_back(h10(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h11 = in__.vector_constrain(n_block);
        size_t h11_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h11_j_1_max__; ++j_1__) {
            vars__.push_back(h11(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h12 = in__.vector_constrain(n_block);
        size_t h12_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h12_j_1_max__; ++j_1__) {
            vars__.push_back(h12(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h13 = in__.vector_constrain(n_block);
        size_t h13_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h13_j_1_max__; ++j_1__) {
            vars__.push_back(h13(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h14 = in__.vector_constrain(n_block);
        size_t h14_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h14_j_1_max__; ++j_1__) {
            vars__.push_back(h14(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h15 = in__.vector_constrain(n_block);
        size_t h15_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h15_j_1_max__; ++j_1__) {
            vars__.push_back(h15(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h16 = in__.vector_constrain(n_block);
        size_t h16_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h16_j_1_max__; ++j_1__) {
            vars__.push_back(h16(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h17 = in__.vector_constrain(n_block);
        size_t h17_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h17_j_1_max__; ++j_1__) {
            vars__.push_back(h17(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h18 = in__.vector_constrain(n_block);
        size_t h18_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h18_j_1_max__; ++j_1__) {
            vars__.push_back(h18(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h1_holdout = in__.vector_constrain(n_block_pred);
        size_t h1_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h1_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h1_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h2_holdout = in__.vector_constrain(n_block_pred);
        size_t h2_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h2_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h2_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h3_holdout = in__.vector_constrain(n_block_pred);
        size_t h3_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h3_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h3_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h4_holdout = in__.vector_constrain(n_block_pred);
        size_t h4_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h4_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h4_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h5_holdout = in__.vector_constrain(n_block_pred);
        size_t h5_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h5_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h5_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h6_holdout = in__.vector_constrain(n_block_pred);
        size_t h6_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h6_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h6_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h7_holdout = in__.vector_constrain(n_block_pred);
        size_t h7_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h7_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h7_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h8_holdout = in__.vector_constrain(n_block_pred);
        size_t h8_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h8_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h8_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h9_holdout = in__.vector_constrain(n_block_pred);
        size_t h9_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h9_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h9_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h10_holdout = in__.vector_constrain(n_block_pred);
        size_t h10_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h10_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h10_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h11_holdout = in__.vector_constrain(n_block_pred);
        size_t h11_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h11_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h11_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h12_holdout = in__.vector_constrain(n_block_pred);
        size_t h12_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h12_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h12_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h13_holdout = in__.vector_constrain(n_block_pred);
        size_t h13_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h13_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h13_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h14_holdout = in__.vector_constrain(n_block_pred);
        size_t h14_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h14_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h14_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h15_holdout = in__.vector_constrain(n_block_pred);
        size_t h15_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h15_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h15_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h16_holdout = in__.vector_constrain(n_block_pred);
        size_t h16_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h16_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h16_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h17_holdout = in__.vector_constrain(n_block_pred);
        size_t h17_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h17_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h17_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h18_holdout = in__.vector_constrain(n_block_pred);
        size_t h18_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h18_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h18_holdout(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 135;
            validate_non_negative_index("mu", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu(n);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 136;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 137;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((((((((((((((((((get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 1, "b_spline", 2) * get_base1(h1, get_base1(block_data, i, "block_data", 1), "h1", 1)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 2, "b_spline", 2) * get_base1(h2, get_base1(block_data, i, "block_data", 1), "h2", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 3, "b_spline", 2) * get_base1(h3, get_base1(block_data, i, "block_data", 1), "h3", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 4, "b_spline", 2) * get_base1(h4, get_base1(block_data, i, "block_data", 1), "h4", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 5, "b_spline", 2) * get_base1(h5, get_base1(block_data, i, "block_data", 1), "h5", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 6, "b_spline", 2) * get_base1(h6, get_base1(block_data, i, "block_data", 1), "h6", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 7, "b_spline", 2) * get_base1(h7, get_base1(block_data, i, "block_data", 1), "h7", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 8, "b_spline", 2) * get_base1(h8, get_base1(block_data, i, "block_data", 1), "h8", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 9, "b_spline", 2) * get_base1(h9, get_base1(block_data, i, "block_data", 1), "h9", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 10, "b_spline", 2) * get_base1(h10, get_base1(block_data, i, "block_data", 1), "h10", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 11, "b_spline", 2) * get_base1(h11, get_base1(block_data, i, "block_data", 1), "h11", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 12, "b_spline", 2) * get_base1(h12, get_base1(block_data, i, "block_data", 1), "h12", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 13, "b_spline", 2) * get_base1(h13, get_base1(block_data, i, "block_data", 1), "h13", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 14, "b_spline", 2) * get_base1(h14, get_base1(block_data, i, "block_data", 1), "h14", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 15, "b_spline", 2) * get_base1(h15, get_base1(block_data, i, "block_data", 1), "h15", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 16, "b_spline", 2) * get_base1(h16, get_base1(block_data, i, "block_data", 1), "h16", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 17, "b_spline", 2) * get_base1(h17, get_base1(block_data, i, "block_data", 1), "h17", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 18, "b_spline", 2) * get_base1(h18, get_base1(block_data, i, "block_data", 1), "h18", 1))), 
                            "assigning variable mu");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t mu_j_1_max__ = n;
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    vars__.push_back(mu(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 290;
            validate_non_negative_index("mu_plot_growth", "n_plot", n_plot);
            validate_non_negative_index("mu_plot_growth", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mu_plot_growth(n_plot, n_block);
            stan::math::initialize(mu_plot_growth, DUMMY_VAR__);
            stan::math::fill(mu_plot_growth, DUMMY_VAR__);
            current_statement_begin__ = 291;
            validate_non_negative_index("mu_plot_agr", "n_plot", n_plot);
            validate_non_negative_index("mu_plot_agr", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mu_plot_agr(n_plot, n_block);
            stan::math::initialize(mu_plot_agr, DUMMY_VAR__);
            stan::math::fill(mu_plot_agr, DUMMY_VAR__);
            current_statement_begin__ = 292;
            validate_non_negative_index("mu_pred", "n_pred", n_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_pred(n_pred);
            stan::math::initialize(mu_pred, DUMMY_VAR__);
            stan::math::fill(mu_pred, DUMMY_VAR__);
            current_statement_begin__ = 293;
            validate_non_negative_index("size_plot", "n_plot", n_plot);
            validate_non_negative_index("size_plot", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> size_plot(n_plot, n_block);
            stan::math::initialize(size_plot, DUMMY_VAR__);
            stan::math::fill(size_plot, DUMMY_VAR__);
            current_statement_begin__ = 294;
            validate_non_negative_index("size_plot_agr", "n_plot", n_plot);
            validate_non_negative_index("size_plot_agr", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> size_plot_agr(n_plot, n_block);
            stan::math::initialize(size_plot_agr, DUMMY_VAR__);
            stan::math::fill(size_plot_agr, DUMMY_VAR__);
            current_statement_begin__ = 295;
            validate_non_negative_index("size_pred", "n_pred", n_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> size_pred(n_pred);
            stan::math::initialize(size_pred, DUMMY_VAR__);
            stan::math::fill(size_pred, DUMMY_VAR__);
            current_statement_begin__ = 296;
            validate_non_negative_index("log_lik", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(n);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 298;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 299;
                for (int j = 1; j <= n_block; ++j) {
                    current_statement_begin__ = 300;
                    stan::model::assign(mu_plot_growth, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                ((((((((((((((((((get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 1, "b_spline_plot", 3) * get_base1(h1, j, "h1", 1)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 2, "b_spline_plot", 3) * get_base1(h2, j, "h2", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 3, "b_spline_plot", 3) * get_base1(h3, j, "h3", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 4, "b_spline_plot", 3) * get_base1(h4, j, "h4", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 5, "b_spline_plot", 3) * get_base1(h5, j, "h5", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 6, "b_spline_plot", 3) * get_base1(h6, j, "h6", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 7, "b_spline_plot", 3) * get_base1(h7, j, "h7", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 8, "b_spline_plot", 3) * get_base1(h8, j, "h8", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 9, "b_spline_plot", 3) * get_base1(h9, j, "h9", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 10, "b_spline_plot", 3) * get_base1(h10, j, "h10", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 11, "b_spline_plot", 3) * get_base1(h11, j, "h11", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 12, "b_spline_plot", 3) * get_base1(h12, j, "h12", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 13, "b_spline_plot", 3) * get_base1(h13, j, "h13", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 14, "b_spline_plot", 3) * get_base1(h14, j, "h14", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 15, "b_spline_plot", 3) * get_base1(h15, j, "h15", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 16, "b_spline_plot", 3) * get_base1(h16, j, "h16", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 17, "b_spline_plot", 3) * get_base1(h17, j, "h17", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 18, "b_spline_plot", 3) * get_base1(h18, j, "h18", 1))), 
                                "assigning variable mu_plot_growth");
                }
            }
            current_statement_begin__ = 301;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 302;
                for (int j = 1; j <= n_block; ++j) {
                    current_statement_begin__ = 303;
                    stan::model::assign(size_plot, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                stan::math::exp(get_base1(mu_plot_growth, i, j, "mu_plot_growth", 1)), 
                                "assigning variable size_plot");
                }
            }
            current_statement_begin__ = 304;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 305;
                for (int j = 1; j <= n_block; ++j) {
                    current_statement_begin__ = 306;
                    stan::model::assign(mu_plot_agr, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                ((((((((((((((((((get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 1, "b_spline_deriv", 3) * get_base1(h1, j, "h1", 1)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 2, "b_spline_deriv", 3) * get_base1(h2, j, "h2", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 3, "b_spline_deriv", 3) * get_base1(h3, j, "h3", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 4, "b_spline_deriv", 3) * get_base1(h4, j, "h4", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 5, "b_spline_deriv", 3) * get_base1(h5, j, "h5", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 6, "b_spline_deriv", 3) * get_base1(h6, j, "h6", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 7, "b_spline_deriv", 3) * get_base1(h7, j, "h7", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 8, "b_spline_deriv", 3) * get_base1(h8, j, "h8", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 9, "b_spline_deriv", 3) * get_base1(h9, j, "h9", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 10, "b_spline_deriv", 3) * get_base1(h10, j, "h10", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 11, "b_spline_deriv", 3) * get_base1(h11, j, "h11", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 12, "b_spline_deriv", 3) * get_base1(h12, j, "h12", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 13, "b_spline_deriv", 3) * get_base1(h13, j, "h13", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 14, "b_spline_deriv", 3) * get_base1(h14, j, "h14", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 15, "b_spline_deriv", 3) * get_base1(h15, j, "h15", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 16, "b_spline_deriv", 3) * get_base1(h16, j, "h16", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 17, "b_spline_deriv", 3) * get_base1(h17, j, "h17", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 18, "b_spline_deriv", 3) * get_base1(h18, j, "h18", 1))), 
                                "assigning variable mu_plot_agr");
                }
            }
            current_statement_begin__ = 307;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 308;
                for (int j = 1; j <= n_block; ++j) {
                    current_statement_begin__ = 309;
                    stan::model::assign(size_plot_agr, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                stan::math::exp(get_base1(mu_plot_agr, i, j, "mu_plot_agr", 1)), 
                                "assigning variable size_plot_agr");
                }
            }
            current_statement_begin__ = 310;
            for (int i = 1; i <= n_pred; ++i) {
                current_statement_begin__ = 311;
                stan::model::assign(mu_pred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((((((((((((((((((get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 1, "b_spline_pred", 2) * get_base1(h1_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h1_holdout", 1)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 2, "b_spline_pred", 2) * get_base1(h2_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h2_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 3, "b_spline_pred", 2) * get_base1(h3_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h3_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 4, "b_spline_pred", 2) * get_base1(h4_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h4_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 5, "b_spline_pred", 2) * get_base1(h5_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h5_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 6, "b_spline_pred", 2) * get_base1(h6_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h6_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 7, "b_spline_pred", 2) * get_base1(h7_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h7_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 8, "b_spline_pred", 2) * get_base1(h8_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h8_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 9, "b_spline_pred", 2) * get_base1(h9_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h9_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 10, "b_spline_pred", 2) * get_base1(h10_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h10_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 11, "b_spline_pred", 2) * get_base1(h11_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h11_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 12, "b_spline_pred", 2) * get_base1(h12_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h12_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 13, "b_spline_pred", 2) * get_base1(h13_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h13_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 14, "b_spline_pred", 2) * get_base1(h14_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h14_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 15, "b_spline_pred", 2) * get_base1(h15_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h15_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 16, "b_spline_pred", 2) * get_base1(h16_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h16_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 17, "b_spline_pred", 2) * get_base1(h17_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h17_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 18, "b_spline_pred", 2) * get_base1(h18_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h18_holdout", 1))), 
                            "assigning variable mu_pred");
            }
            current_statement_begin__ = 312;
            for (int i = 1; i <= n_pred; ++i) {
                current_statement_begin__ = 313;
                stan::model::assign(size_pred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(mu_pred, i, "mu_pred", 1)), 
                            "assigning variable size_pred");
            }
            current_statement_begin__ = 314;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 315;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_log(stan::math::log(get_base1(size_data, i, "size_data", 1)), get_base1(mu, i, "mu", 1), sigma_obs), 
                            "assigning variable log_lik");
            }
            // validate, write generated quantities
            current_statement_begin__ = 290;
            size_t mu_plot_growth_j_2_max__ = n_block;
            size_t mu_plot_growth_j_1_max__ = n_plot;
            for (size_t j_2__ = 0; j_2__ < mu_plot_growth_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_plot_growth_j_1_max__; ++j_1__) {
                    vars__.push_back(mu_plot_growth(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 291;
            size_t mu_plot_agr_j_2_max__ = n_block;
            size_t mu_plot_agr_j_1_max__ = n_plot;
            for (size_t j_2__ = 0; j_2__ < mu_plot_agr_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_plot_agr_j_1_max__; ++j_1__) {
                    vars__.push_back(mu_plot_agr(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 292;
            size_t mu_pred_j_1_max__ = n_pred;
            for (size_t j_1__ = 0; j_1__ < mu_pred_j_1_max__; ++j_1__) {
                vars__.push_back(mu_pred(j_1__));
            }
            current_statement_begin__ = 293;
            check_greater_or_equal(function__, "size_plot", size_plot, 0);
            size_t size_plot_j_2_max__ = n_block;
            size_t size_plot_j_1_max__ = n_plot;
            for (size_t j_2__ = 0; j_2__ < size_plot_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < size_plot_j_1_max__; ++j_1__) {
                    vars__.push_back(size_plot(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 294;
            check_greater_or_equal(function__, "size_plot_agr", size_plot_agr, 0);
            size_t size_plot_agr_j_2_max__ = n_block;
            size_t size_plot_agr_j_1_max__ = n_plot;
            for (size_t j_2__ = 0; j_2__ < size_plot_agr_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < size_plot_agr_j_1_max__; ++j_1__) {
                    vars__.push_back(size_plot_agr(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 295;
            check_greater_or_equal(function__, "size_pred", size_pred, 0);
            size_t size_pred_j_1_max__ = n_pred;
            for (size_t j_1__ = 0; j_1__ < size_pred_j_1_max__; ++j_1__) {
                vars__.push_back(size_pred(j_1__));
            }
            current_statement_begin__ = 296;
            size_t log_lik_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_spline_nopred_blockmod";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd18";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean18";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h18";
        param_names__.push_back(param_name_stream__.str());
        size_t psi1_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi2_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi3_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi3_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi3" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi4_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi4_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi4" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi5_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi5_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi5" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi6_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi6_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi6" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi7_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi7_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi7" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi8_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi8_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi8" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi9_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi9_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi9" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi10_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi10_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi10" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi11_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi11_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi11" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi12_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi12_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi12" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi13_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi13_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi13" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi14_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi14_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi14" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi15_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi15_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi15" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi16_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi16_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi16" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi17_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi17_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi17" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi18_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi18_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi18" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h1_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h2_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h3_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h3_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h4_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h4_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h5_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h5_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h6_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h6_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h7_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h7_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h8_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h8_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h9_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h9_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h10_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h10_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h11_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h11_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h12_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h12_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h13_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h13_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h14_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h14_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h15_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h15_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h16_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h16_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h17_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h17_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h18_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h18_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h1_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h1_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h2_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h2_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h3_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h3_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h4_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h4_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h5_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h5_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h6_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h6_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h7_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h7_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h8_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h8_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h9_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h9_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h10_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h10_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h11_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h11_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h12_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h12_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h13_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h13_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h14_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h14_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h15_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h15_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h16_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h16_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h17_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h17_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h18_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h18_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t mu_plot_growth_j_2_max__ = n_block;
        size_t mu_plot_growth_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < mu_plot_growth_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < mu_plot_growth_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_growth" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_plot_agr_j_2_max__ = n_block;
        size_t mu_plot_agr_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < mu_plot_agr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < mu_plot_agr_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_agr" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < mu_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_plot_j_2_max__ = n_block;
        size_t size_plot_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < size_plot_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < size_plot_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t size_plot_agr_j_2_max__ = n_block;
        size_t size_plot_agr_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < size_plot_agr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < size_plot_agr_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot_agr" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t size_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < size_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd18";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean18";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h18";
        param_names__.push_back(param_name_stream__.str());
        size_t psi1_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi2_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi3_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi3_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi3" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi4_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi4_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi4" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi5_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi5_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi5" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi6_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi6_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi6" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi7_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi7_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi7" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi8_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi8_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi8" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi9_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi9_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi9" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi10_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi10_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi10" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi11_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi11_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi11" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi12_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi12_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi12" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi13_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi13_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi13" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi14_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi14_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi14" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi15_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi15_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi15" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi16_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi16_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi16" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi17_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi17_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi17" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t psi18_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < psi18_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi18" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h1_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h2_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h3_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h3_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h4_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h4_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h5_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h5_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h6_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h6_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h7_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h7_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h8_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h8_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h9_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h9_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h10_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h10_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h11_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h11_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h12_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h12_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h13_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h13_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h14_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h14_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h15_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h15_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h16_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h16_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h17_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h17_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h18_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h18_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h1_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h1_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h2_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h2_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h3_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h3_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h4_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h4_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h5_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h5_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h6_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h6_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h7_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h7_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h8_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h8_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h9_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h9_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h10_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h10_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h11_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h11_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h12_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h12_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h13_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h13_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h14_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h14_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h15_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h15_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h16_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h16_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h17_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h17_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h18_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h18_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t mu_plot_growth_j_2_max__ = n_block;
        size_t mu_plot_growth_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < mu_plot_growth_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < mu_plot_growth_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_growth" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_plot_agr_j_2_max__ = n_block;
        size_t mu_plot_agr_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < mu_plot_agr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < mu_plot_agr_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_agr" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < mu_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_plot_j_2_max__ = n_block;
        size_t size_plot_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < size_plot_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < size_plot_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t size_plot_agr_j_2_max__ = n_block;
        size_t size_plot_agr_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < size_plot_agr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < size_plot_agr_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot_agr" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t size_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < size_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_spline_nopred_blockmod_namespace::model_spline_nopred_blockmod stan_model;
#endif
