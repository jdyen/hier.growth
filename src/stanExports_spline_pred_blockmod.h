// Generated by rstantools.  Do not edit by hand.

/*
    hier.growth is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    hier.growth is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with hier.growth.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_spline_pred_blockmod_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_spline_pred_blockmod");
    reader.add_event(390, 388, "end", "model_spline_pred_blockmod");
    return reader;
}
#include <stan_meta_header.hpp>
class model_spline_pred_blockmod : public prob_grad {
private:
        int n;
        int n_pred;
        int n_block;
        int n_block_pred;
        int n_x1;
        int n_x2;
        int n_x3;
        int n_x4;
        int n_x5;
        int n_x6;
        int n_x7;
        int n_x8;
        int n_x9;
        int n_x10;
        int n_x11;
        int n_x12;
        int n_x13;
        int n_x14;
        int n_x15;
        int n_x16;
        int n_x17;
        int n_x18;
        vector_d size_data;
        int n_age;
        int n_age_pred;
        int n_k;
        std::vector<int> age_index;
        std::vector<int> age_index_pred;
        std::vector<int> block_data;
        std::vector<int> block_holdout;
        matrix_d x1;
        matrix_d x2;
        matrix_d x3;
        matrix_d x4;
        matrix_d x5;
        matrix_d x6;
        matrix_d x7;
        matrix_d x8;
        matrix_d x9;
        matrix_d x10;
        matrix_d x11;
        matrix_d x12;
        matrix_d x13;
        matrix_d x14;
        matrix_d x15;
        matrix_d x16;
        matrix_d x17;
        matrix_d x18;
        matrix_d x1_pred;
        matrix_d x2_pred;
        matrix_d x3_pred;
        matrix_d x4_pred;
        matrix_d x5_pred;
        matrix_d x6_pred;
        matrix_d x7_pred;
        matrix_d x8_pred;
        matrix_d x9_pred;
        matrix_d x10_pred;
        matrix_d x11_pred;
        matrix_d x12_pred;
        matrix_d x13_pred;
        matrix_d x14_pred;
        matrix_d x15_pred;
        matrix_d x16_pred;
        matrix_d x17_pred;
        matrix_d x18_pred;
        std::vector<row_vector_d> b_spline;
        std::vector<row_vector_d> b_spline_pred;
        int n_plot;
        vector_d age_plot;
        std::vector<std::vector<row_vector_d> > b_spline_plot;
        std::vector<std::vector<row_vector_d> > b_spline_deriv;
public:
    model_spline_pred_blockmod(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_spline_pred_blockmod(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_spline_pred_blockmod_namespace::model_spline_pred_blockmod";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_pred", "int", context__.to_vec());
            n_pred = int(0);
            vals_i__ = context__.vals_i("n_pred");
            pos__ = 0;
            n_pred = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_pred", n_pred, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_block", "int", context__.to_vec());
            n_block = int(0);
            vals_i__ = context__.vals_i("n_block");
            pos__ = 0;
            n_block = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_block", n_block, 0);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "n_block_pred", "int", context__.to_vec());
            n_block_pred = int(0);
            vals_i__ = context__.vals_i("n_block_pred");
            pos__ = 0;
            n_block_pred = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_block_pred", n_block_pred, 0);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "n_x1", "int", context__.to_vec());
            n_x1 = int(0);
            vals_i__ = context__.vals_i("n_x1");
            pos__ = 0;
            n_x1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x1", n_x1, 0);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "n_x2", "int", context__.to_vec());
            n_x2 = int(0);
            vals_i__ = context__.vals_i("n_x2");
            pos__ = 0;
            n_x2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x2", n_x2, 0);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "n_x3", "int", context__.to_vec());
            n_x3 = int(0);
            vals_i__ = context__.vals_i("n_x3");
            pos__ = 0;
            n_x3 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x3", n_x3, 0);
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "n_x4", "int", context__.to_vec());
            n_x4 = int(0);
            vals_i__ = context__.vals_i("n_x4");
            pos__ = 0;
            n_x4 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x4", n_x4, 0);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "n_x5", "int", context__.to_vec());
            n_x5 = int(0);
            vals_i__ = context__.vals_i("n_x5");
            pos__ = 0;
            n_x5 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x5", n_x5, 0);
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "n_x6", "int", context__.to_vec());
            n_x6 = int(0);
            vals_i__ = context__.vals_i("n_x6");
            pos__ = 0;
            n_x6 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x6", n_x6, 0);
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "n_x7", "int", context__.to_vec());
            n_x7 = int(0);
            vals_i__ = context__.vals_i("n_x7");
            pos__ = 0;
            n_x7 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x7", n_x7, 0);
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "n_x8", "int", context__.to_vec());
            n_x8 = int(0);
            vals_i__ = context__.vals_i("n_x8");
            pos__ = 0;
            n_x8 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x8", n_x8, 0);
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "n_x9", "int", context__.to_vec());
            n_x9 = int(0);
            vals_i__ = context__.vals_i("n_x9");
            pos__ = 0;
            n_x9 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x9", n_x9, 0);
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "n_x10", "int", context__.to_vec());
            n_x10 = int(0);
            vals_i__ = context__.vals_i("n_x10");
            pos__ = 0;
            n_x10 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x10", n_x10, 0);
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "n_x11", "int", context__.to_vec());
            n_x11 = int(0);
            vals_i__ = context__.vals_i("n_x11");
            pos__ = 0;
            n_x11 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x11", n_x11, 0);
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "n_x12", "int", context__.to_vec());
            n_x12 = int(0);
            vals_i__ = context__.vals_i("n_x12");
            pos__ = 0;
            n_x12 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x12", n_x12, 0);
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "n_x13", "int", context__.to_vec());
            n_x13 = int(0);
            vals_i__ = context__.vals_i("n_x13");
            pos__ = 0;
            n_x13 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x13", n_x13, 0);
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "n_x14", "int", context__.to_vec());
            n_x14 = int(0);
            vals_i__ = context__.vals_i("n_x14");
            pos__ = 0;
            n_x14 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x14", n_x14, 0);
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "n_x15", "int", context__.to_vec());
            n_x15 = int(0);
            vals_i__ = context__.vals_i("n_x15");
            pos__ = 0;
            n_x15 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x15", n_x15, 0);
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "n_x16", "int", context__.to_vec());
            n_x16 = int(0);
            vals_i__ = context__.vals_i("n_x16");
            pos__ = 0;
            n_x16 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x16", n_x16, 0);
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "n_x17", "int", context__.to_vec());
            n_x17 = int(0);
            vals_i__ = context__.vals_i("n_x17");
            pos__ = 0;
            n_x17 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x17", n_x17, 0);
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "n_x18", "int", context__.to_vec());
            n_x18 = int(0);
            vals_i__ = context__.vals_i("n_x18");
            pos__ = 0;
            n_x18 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x18", n_x18, 0);
            current_statement_begin__ = 24;
            validate_non_negative_index("size_data", "n", n);
            context__.validate_dims("data initialization", "size_data", "vector_d", context__.to_vec(n));
            size_data = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("size_data");
            pos__ = 0;
            size_t size_data_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < size_data_j_1_max__; ++j_1__) {
                size_data(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "size_data", size_data, 0);
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "n_age", "int", context__.to_vec());
            n_age = int(0);
            vals_i__ = context__.vals_i("n_age");
            pos__ = 0;
            n_age = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_age", n_age, 0);
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "n_age_pred", "int", context__.to_vec());
            n_age_pred = int(0);
            vals_i__ = context__.vals_i("n_age_pred");
            pos__ = 0;
            n_age_pred = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_age_pred", n_age_pred, 0);
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "n_k", "int", context__.to_vec());
            n_k = int(0);
            vals_i__ = context__.vals_i("n_k");
            pos__ = 0;
            n_k = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_k", n_k, 0);
            current_statement_begin__ = 28;
            validate_non_negative_index("age_index", "n", n);
            context__.validate_dims("data initialization", "age_index", "int", context__.to_vec(n));
            age_index = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("age_index");
            pos__ = 0;
            size_t age_index_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < age_index_k_0_max__; ++k_0__) {
                age_index[k_0__] = vals_i__[pos__++];
            }
            size_t age_index_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < age_index_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "age_index[i_0__]", age_index[i_0__], 0);
            }
            current_statement_begin__ = 29;
            validate_non_negative_index("age_index_pred", "n_pred", n_pred);
            context__.validate_dims("data initialization", "age_index_pred", "int", context__.to_vec(n_pred));
            age_index_pred = std::vector<int>(n_pred, int(0));
            vals_i__ = context__.vals_i("age_index_pred");
            pos__ = 0;
            size_t age_index_pred_k_0_max__ = n_pred;
            for (size_t k_0__ = 0; k_0__ < age_index_pred_k_0_max__; ++k_0__) {
                age_index_pred[k_0__] = vals_i__[pos__++];
            }
            size_t age_index_pred_i_0_max__ = n_pred;
            for (size_t i_0__ = 0; i_0__ < age_index_pred_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "age_index_pred[i_0__]", age_index_pred[i_0__], 0);
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("block_data", "n", n);
            context__.validate_dims("data initialization", "block_data", "int", context__.to_vec(n));
            block_data = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("block_data");
            pos__ = 0;
            size_t block_data_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < block_data_k_0_max__; ++k_0__) {
                block_data[k_0__] = vals_i__[pos__++];
            }
            size_t block_data_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < block_data_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "block_data[i_0__]", block_data[i_0__], 0);
                check_less_or_equal(function__, "block_data[i_0__]", block_data[i_0__], n_block);
            }
            current_statement_begin__ = 31;
            validate_non_negative_index("block_holdout", "n_pred", n_pred);
            context__.validate_dims("data initialization", "block_holdout", "int", context__.to_vec(n_pred));
            block_holdout = std::vector<int>(n_pred, int(0));
            vals_i__ = context__.vals_i("block_holdout");
            pos__ = 0;
            size_t block_holdout_k_0_max__ = n_pred;
            for (size_t k_0__ = 0; k_0__ < block_holdout_k_0_max__; ++k_0__) {
                block_holdout[k_0__] = vals_i__[pos__++];
            }
            size_t block_holdout_i_0_max__ = n_pred;
            for (size_t i_0__ = 0; i_0__ < block_holdout_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "block_holdout[i_0__]", block_holdout[i_0__], 0);
                check_less_or_equal(function__, "block_holdout[i_0__]", block_holdout[i_0__], n_block_pred);
            }
            current_statement_begin__ = 32;
            validate_non_negative_index("x1", "n_block", n_block);
            validate_non_negative_index("x1", "n_x1", n_x1);
            context__.validate_dims("data initialization", "x1", "matrix_d", context__.to_vec(n_block,n_x1));
            x1 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x1);
            vals_r__ = context__.vals_r("x1");
            pos__ = 0;
            size_t x1_j_2_max__ = n_x1;
            size_t x1_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x1_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x1_j_1_max__; ++j_1__) {
                    x1(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 33;
            validate_non_negative_index("x2", "n_block", n_block);
            validate_non_negative_index("x2", "n_x2", n_x2);
            context__.validate_dims("data initialization", "x2", "matrix_d", context__.to_vec(n_block,n_x2));
            x2 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x2);
            vals_r__ = context__.vals_r("x2");
            pos__ = 0;
            size_t x2_j_2_max__ = n_x2;
            size_t x2_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x2_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x2_j_1_max__; ++j_1__) {
                    x2(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 34;
            validate_non_negative_index("x3", "n_block", n_block);
            validate_non_negative_index("x3", "n_x3", n_x3);
            context__.validate_dims("data initialization", "x3", "matrix_d", context__.to_vec(n_block,n_x3));
            x3 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x3);
            vals_r__ = context__.vals_r("x3");
            pos__ = 0;
            size_t x3_j_2_max__ = n_x3;
            size_t x3_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x3_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x3_j_1_max__; ++j_1__) {
                    x3(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 35;
            validate_non_negative_index("x4", "n_block", n_block);
            validate_non_negative_index("x4", "n_x4", n_x4);
            context__.validate_dims("data initialization", "x4", "matrix_d", context__.to_vec(n_block,n_x4));
            x4 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x4);
            vals_r__ = context__.vals_r("x4");
            pos__ = 0;
            size_t x4_j_2_max__ = n_x4;
            size_t x4_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x4_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x4_j_1_max__; ++j_1__) {
                    x4(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 36;
            validate_non_negative_index("x5", "n_block", n_block);
            validate_non_negative_index("x5", "n_x5", n_x5);
            context__.validate_dims("data initialization", "x5", "matrix_d", context__.to_vec(n_block,n_x5));
            x5 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x5);
            vals_r__ = context__.vals_r("x5");
            pos__ = 0;
            size_t x5_j_2_max__ = n_x5;
            size_t x5_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x5_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x5_j_1_max__; ++j_1__) {
                    x5(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 37;
            validate_non_negative_index("x6", "n_block", n_block);
            validate_non_negative_index("x6", "n_x6", n_x6);
            context__.validate_dims("data initialization", "x6", "matrix_d", context__.to_vec(n_block,n_x6));
            x6 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x6);
            vals_r__ = context__.vals_r("x6");
            pos__ = 0;
            size_t x6_j_2_max__ = n_x6;
            size_t x6_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x6_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x6_j_1_max__; ++j_1__) {
                    x6(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 38;
            validate_non_negative_index("x7", "n_block", n_block);
            validate_non_negative_index("x7", "n_x7", n_x7);
            context__.validate_dims("data initialization", "x7", "matrix_d", context__.to_vec(n_block,n_x7));
            x7 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x7);
            vals_r__ = context__.vals_r("x7");
            pos__ = 0;
            size_t x7_j_2_max__ = n_x7;
            size_t x7_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x7_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x7_j_1_max__; ++j_1__) {
                    x7(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 39;
            validate_non_negative_index("x8", "n_block", n_block);
            validate_non_negative_index("x8", "n_x8", n_x8);
            context__.validate_dims("data initialization", "x8", "matrix_d", context__.to_vec(n_block,n_x8));
            x8 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x8);
            vals_r__ = context__.vals_r("x8");
            pos__ = 0;
            size_t x8_j_2_max__ = n_x8;
            size_t x8_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x8_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x8_j_1_max__; ++j_1__) {
                    x8(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 40;
            validate_non_negative_index("x9", "n_block", n_block);
            validate_non_negative_index("x9", "n_x9", n_x9);
            context__.validate_dims("data initialization", "x9", "matrix_d", context__.to_vec(n_block,n_x9));
            x9 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x9);
            vals_r__ = context__.vals_r("x9");
            pos__ = 0;
            size_t x9_j_2_max__ = n_x9;
            size_t x9_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x9_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x9_j_1_max__; ++j_1__) {
                    x9(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 41;
            validate_non_negative_index("x10", "n_block", n_block);
            validate_non_negative_index("x10", "n_x10", n_x10);
            context__.validate_dims("data initialization", "x10", "matrix_d", context__.to_vec(n_block,n_x10));
            x10 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x10);
            vals_r__ = context__.vals_r("x10");
            pos__ = 0;
            size_t x10_j_2_max__ = n_x10;
            size_t x10_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x10_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x10_j_1_max__; ++j_1__) {
                    x10(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 42;
            validate_non_negative_index("x11", "n_block", n_block);
            validate_non_negative_index("x11", "n_x11", n_x11);
            context__.validate_dims("data initialization", "x11", "matrix_d", context__.to_vec(n_block,n_x11));
            x11 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x11);
            vals_r__ = context__.vals_r("x11");
            pos__ = 0;
            size_t x11_j_2_max__ = n_x11;
            size_t x11_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x11_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x11_j_1_max__; ++j_1__) {
                    x11(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 43;
            validate_non_negative_index("x12", "n_block", n_block);
            validate_non_negative_index("x12", "n_x12", n_x12);
            context__.validate_dims("data initialization", "x12", "matrix_d", context__.to_vec(n_block,n_x12));
            x12 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x12);
            vals_r__ = context__.vals_r("x12");
            pos__ = 0;
            size_t x12_j_2_max__ = n_x12;
            size_t x12_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x12_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x12_j_1_max__; ++j_1__) {
                    x12(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 44;
            validate_non_negative_index("x13", "n_block", n_block);
            validate_non_negative_index("x13", "n_x13", n_x13);
            context__.validate_dims("data initialization", "x13", "matrix_d", context__.to_vec(n_block,n_x13));
            x13 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x13);
            vals_r__ = context__.vals_r("x13");
            pos__ = 0;
            size_t x13_j_2_max__ = n_x13;
            size_t x13_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x13_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x13_j_1_max__; ++j_1__) {
                    x13(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 45;
            validate_non_negative_index("x14", "n_block", n_block);
            validate_non_negative_index("x14", "n_x14", n_x14);
            context__.validate_dims("data initialization", "x14", "matrix_d", context__.to_vec(n_block,n_x14));
            x14 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x14);
            vals_r__ = context__.vals_r("x14");
            pos__ = 0;
            size_t x14_j_2_max__ = n_x14;
            size_t x14_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x14_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x14_j_1_max__; ++j_1__) {
                    x14(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 46;
            validate_non_negative_index("x15", "n_block", n_block);
            validate_non_negative_index("x15", "n_x15", n_x15);
            context__.validate_dims("data initialization", "x15", "matrix_d", context__.to_vec(n_block,n_x15));
            x15 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x15);
            vals_r__ = context__.vals_r("x15");
            pos__ = 0;
            size_t x15_j_2_max__ = n_x15;
            size_t x15_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x15_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x15_j_1_max__; ++j_1__) {
                    x15(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 47;
            validate_non_negative_index("x16", "n_block", n_block);
            validate_non_negative_index("x16", "n_x16", n_x16);
            context__.validate_dims("data initialization", "x16", "matrix_d", context__.to_vec(n_block,n_x16));
            x16 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x16);
            vals_r__ = context__.vals_r("x16");
            pos__ = 0;
            size_t x16_j_2_max__ = n_x16;
            size_t x16_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x16_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x16_j_1_max__; ++j_1__) {
                    x16(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 48;
            validate_non_negative_index("x17", "n_block", n_block);
            validate_non_negative_index("x17", "n_x17", n_x17);
            context__.validate_dims("data initialization", "x17", "matrix_d", context__.to_vec(n_block,n_x17));
            x17 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x17);
            vals_r__ = context__.vals_r("x17");
            pos__ = 0;
            size_t x17_j_2_max__ = n_x17;
            size_t x17_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x17_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x17_j_1_max__; ++j_1__) {
                    x17(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 49;
            validate_non_negative_index("x18", "n_block", n_block);
            validate_non_negative_index("x18", "n_x18", n_x18);
            context__.validate_dims("data initialization", "x18", "matrix_d", context__.to_vec(n_block,n_x18));
            x18 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block, n_x18);
            vals_r__ = context__.vals_r("x18");
            pos__ = 0;
            size_t x18_j_2_max__ = n_x18;
            size_t x18_j_1_max__ = n_block;
            for (size_t j_2__ = 0; j_2__ < x18_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x18_j_1_max__; ++j_1__) {
                    x18(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 50;
            validate_non_negative_index("x1_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x1_pred", "n_x1", n_x1);
            context__.validate_dims("data initialization", "x1_pred", "matrix_d", context__.to_vec(n_block_pred,n_x1));
            x1_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x1);
            vals_r__ = context__.vals_r("x1_pred");
            pos__ = 0;
            size_t x1_pred_j_2_max__ = n_x1;
            size_t x1_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x1_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x1_pred_j_1_max__; ++j_1__) {
                    x1_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 51;
            validate_non_negative_index("x2_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x2_pred", "n_x2", n_x2);
            context__.validate_dims("data initialization", "x2_pred", "matrix_d", context__.to_vec(n_block_pred,n_x2));
            x2_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x2);
            vals_r__ = context__.vals_r("x2_pred");
            pos__ = 0;
            size_t x2_pred_j_2_max__ = n_x2;
            size_t x2_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x2_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x2_pred_j_1_max__; ++j_1__) {
                    x2_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 52;
            validate_non_negative_index("x3_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x3_pred", "n_x3", n_x3);
            context__.validate_dims("data initialization", "x3_pred", "matrix_d", context__.to_vec(n_block_pred,n_x3));
            x3_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x3);
            vals_r__ = context__.vals_r("x3_pred");
            pos__ = 0;
            size_t x3_pred_j_2_max__ = n_x3;
            size_t x3_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x3_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x3_pred_j_1_max__; ++j_1__) {
                    x3_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 53;
            validate_non_negative_index("x4_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x4_pred", "n_x4", n_x4);
            context__.validate_dims("data initialization", "x4_pred", "matrix_d", context__.to_vec(n_block_pred,n_x4));
            x4_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x4);
            vals_r__ = context__.vals_r("x4_pred");
            pos__ = 0;
            size_t x4_pred_j_2_max__ = n_x4;
            size_t x4_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x4_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x4_pred_j_1_max__; ++j_1__) {
                    x4_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 54;
            validate_non_negative_index("x5_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x5_pred", "n_x5", n_x5);
            context__.validate_dims("data initialization", "x5_pred", "matrix_d", context__.to_vec(n_block_pred,n_x5));
            x5_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x5);
            vals_r__ = context__.vals_r("x5_pred");
            pos__ = 0;
            size_t x5_pred_j_2_max__ = n_x5;
            size_t x5_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x5_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x5_pred_j_1_max__; ++j_1__) {
                    x5_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 55;
            validate_non_negative_index("x6_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x6_pred", "n_x6", n_x6);
            context__.validate_dims("data initialization", "x6_pred", "matrix_d", context__.to_vec(n_block_pred,n_x6));
            x6_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x6);
            vals_r__ = context__.vals_r("x6_pred");
            pos__ = 0;
            size_t x6_pred_j_2_max__ = n_x6;
            size_t x6_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x6_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x6_pred_j_1_max__; ++j_1__) {
                    x6_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 56;
            validate_non_negative_index("x7_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x7_pred", "n_x7", n_x7);
            context__.validate_dims("data initialization", "x7_pred", "matrix_d", context__.to_vec(n_block_pred,n_x7));
            x7_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x7);
            vals_r__ = context__.vals_r("x7_pred");
            pos__ = 0;
            size_t x7_pred_j_2_max__ = n_x7;
            size_t x7_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x7_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x7_pred_j_1_max__; ++j_1__) {
                    x7_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 57;
            validate_non_negative_index("x8_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x8_pred", "n_x8", n_x8);
            context__.validate_dims("data initialization", "x8_pred", "matrix_d", context__.to_vec(n_block_pred,n_x8));
            x8_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x8);
            vals_r__ = context__.vals_r("x8_pred");
            pos__ = 0;
            size_t x8_pred_j_2_max__ = n_x8;
            size_t x8_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x8_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x8_pred_j_1_max__; ++j_1__) {
                    x8_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 58;
            validate_non_negative_index("x9_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x9_pred", "n_x9", n_x9);
            context__.validate_dims("data initialization", "x9_pred", "matrix_d", context__.to_vec(n_block_pred,n_x9));
            x9_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x9);
            vals_r__ = context__.vals_r("x9_pred");
            pos__ = 0;
            size_t x9_pred_j_2_max__ = n_x9;
            size_t x9_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x9_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x9_pred_j_1_max__; ++j_1__) {
                    x9_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 59;
            validate_non_negative_index("x10_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x10_pred", "n_x10", n_x10);
            context__.validate_dims("data initialization", "x10_pred", "matrix_d", context__.to_vec(n_block_pred,n_x10));
            x10_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x10);
            vals_r__ = context__.vals_r("x10_pred");
            pos__ = 0;
            size_t x10_pred_j_2_max__ = n_x10;
            size_t x10_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x10_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x10_pred_j_1_max__; ++j_1__) {
                    x10_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 60;
            validate_non_negative_index("x11_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x11_pred", "n_x11", n_x11);
            context__.validate_dims("data initialization", "x11_pred", "matrix_d", context__.to_vec(n_block_pred,n_x11));
            x11_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x11);
            vals_r__ = context__.vals_r("x11_pred");
            pos__ = 0;
            size_t x11_pred_j_2_max__ = n_x11;
            size_t x11_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x11_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x11_pred_j_1_max__; ++j_1__) {
                    x11_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 61;
            validate_non_negative_index("x12_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x12_pred", "n_x12", n_x12);
            context__.validate_dims("data initialization", "x12_pred", "matrix_d", context__.to_vec(n_block_pred,n_x12));
            x12_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x12);
            vals_r__ = context__.vals_r("x12_pred");
            pos__ = 0;
            size_t x12_pred_j_2_max__ = n_x12;
            size_t x12_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x12_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x12_pred_j_1_max__; ++j_1__) {
                    x12_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 62;
            validate_non_negative_index("x13_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x13_pred", "n_x13", n_x13);
            context__.validate_dims("data initialization", "x13_pred", "matrix_d", context__.to_vec(n_block_pred,n_x13));
            x13_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x13);
            vals_r__ = context__.vals_r("x13_pred");
            pos__ = 0;
            size_t x13_pred_j_2_max__ = n_x13;
            size_t x13_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x13_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x13_pred_j_1_max__; ++j_1__) {
                    x13_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 63;
            validate_non_negative_index("x14_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x14_pred", "n_x14", n_x14);
            context__.validate_dims("data initialization", "x14_pred", "matrix_d", context__.to_vec(n_block_pred,n_x14));
            x14_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x14);
            vals_r__ = context__.vals_r("x14_pred");
            pos__ = 0;
            size_t x14_pred_j_2_max__ = n_x14;
            size_t x14_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x14_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x14_pred_j_1_max__; ++j_1__) {
                    x14_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 64;
            validate_non_negative_index("x15_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x15_pred", "n_x15", n_x15);
            context__.validate_dims("data initialization", "x15_pred", "matrix_d", context__.to_vec(n_block_pred,n_x15));
            x15_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x15);
            vals_r__ = context__.vals_r("x15_pred");
            pos__ = 0;
            size_t x15_pred_j_2_max__ = n_x15;
            size_t x15_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x15_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x15_pred_j_1_max__; ++j_1__) {
                    x15_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 65;
            validate_non_negative_index("x16_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x16_pred", "n_x16", n_x16);
            context__.validate_dims("data initialization", "x16_pred", "matrix_d", context__.to_vec(n_block_pred,n_x16));
            x16_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x16);
            vals_r__ = context__.vals_r("x16_pred");
            pos__ = 0;
            size_t x16_pred_j_2_max__ = n_x16;
            size_t x16_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x16_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x16_pred_j_1_max__; ++j_1__) {
                    x16_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 66;
            validate_non_negative_index("x17_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x17_pred", "n_x17", n_x17);
            context__.validate_dims("data initialization", "x17_pred", "matrix_d", context__.to_vec(n_block_pred,n_x17));
            x17_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x17);
            vals_r__ = context__.vals_r("x17_pred");
            pos__ = 0;
            size_t x17_pred_j_2_max__ = n_x17;
            size_t x17_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x17_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x17_pred_j_1_max__; ++j_1__) {
                    x17_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 67;
            validate_non_negative_index("x18_pred", "n_block_pred", n_block_pred);
            validate_non_negative_index("x18_pred", "n_x18", n_x18);
            context__.validate_dims("data initialization", "x18_pred", "matrix_d", context__.to_vec(n_block_pred,n_x18));
            x18_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_block_pred, n_x18);
            vals_r__ = context__.vals_r("x18_pred");
            pos__ = 0;
            size_t x18_pred_j_2_max__ = n_x18;
            size_t x18_pred_j_1_max__ = n_block_pred;
            for (size_t j_2__ = 0; j_2__ < x18_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x18_pred_j_1_max__; ++j_1__) {
                    x18_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 68;
            validate_non_negative_index("b_spline", "n_k", n_k);
            validate_non_negative_index("b_spline", "n_age", n_age);
            context__.validate_dims("data initialization", "b_spline", "row_vector_d", context__.to_vec(n_age,n_k));
            b_spline = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(n_age, Eigen::Matrix<double, 1, Eigen::Dynamic>(n_k));
            vals_r__ = context__.vals_r("b_spline");
            pos__ = 0;
            size_t b_spline_j_1_max__ = n_k;
            size_t b_spline_k_0_max__ = n_age;
            for (size_t j_1__ = 0; j_1__ < b_spline_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < b_spline_k_0_max__; ++k_0__) {
                    b_spline[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 69;
            validate_non_negative_index("b_spline_pred", "n_k", n_k);
            validate_non_negative_index("b_spline_pred", "n_age_pred", n_age_pred);
            context__.validate_dims("data initialization", "b_spline_pred", "row_vector_d", context__.to_vec(n_age_pred,n_k));
            b_spline_pred = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(n_age_pred, Eigen::Matrix<double, 1, Eigen::Dynamic>(n_k));
            vals_r__ = context__.vals_r("b_spline_pred");
            pos__ = 0;
            size_t b_spline_pred_j_1_max__ = n_k;
            size_t b_spline_pred_k_0_max__ = n_age_pred;
            for (size_t j_1__ = 0; j_1__ < b_spline_pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < b_spline_pred_k_0_max__; ++k_0__) {
                    b_spline_pred[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 70;
            context__.validate_dims("data initialization", "n_plot", "int", context__.to_vec());
            n_plot = int(0);
            vals_i__ = context__.vals_i("n_plot");
            pos__ = 0;
            n_plot = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_plot", n_plot, 0);
            current_statement_begin__ = 71;
            validate_non_negative_index("age_plot", "n_plot", n_plot);
            context__.validate_dims("data initialization", "age_plot", "vector_d", context__.to_vec(n_plot));
            age_plot = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_plot);
            vals_r__ = context__.vals_r("age_plot");
            pos__ = 0;
            size_t age_plot_j_1_max__ = n_plot;
            for (size_t j_1__ = 0; j_1__ < age_plot_j_1_max__; ++j_1__) {
                age_plot(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 72;
            validate_non_negative_index("b_spline_plot", "n_k", n_k);
            validate_non_negative_index("b_spline_plot", "n_plot", n_plot);
            validate_non_negative_index("b_spline_plot", "n_block", n_block);
            context__.validate_dims("data initialization", "b_spline_plot", "row_vector_d", context__.to_vec(n_plot,n_block,n_k));
            b_spline_plot = std::vector<std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> > >(n_plot, std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(n_block, Eigen::Matrix<double, 1, Eigen::Dynamic>(n_k)));
            vals_r__ = context__.vals_r("b_spline_plot");
            pos__ = 0;
            size_t b_spline_plot_j_1_max__ = n_k;
            size_t b_spline_plot_k_0_max__ = n_plot;
            size_t b_spline_plot_k_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < b_spline_plot_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < b_spline_plot_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < b_spline_plot_k_0_max__; ++k_0__) {
                        b_spline_plot[k_0__][k_1__](j_1__) = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 73;
            validate_non_negative_index("b_spline_deriv", "n_k", n_k);
            validate_non_negative_index("b_spline_deriv", "n_plot", n_plot);
            validate_non_negative_index("b_spline_deriv", "n_block", n_block);
            context__.validate_dims("data initialization", "b_spline_deriv", "row_vector_d", context__.to_vec(n_plot,n_block,n_k));
            b_spline_deriv = std::vector<std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> > >(n_plot, std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(n_block, Eigen::Matrix<double, 1, Eigen::Dynamic>(n_k)));
            vals_r__ = context__.vals_r("b_spline_deriv");
            pos__ = 0;
            size_t b_spline_deriv_j_1_max__ = n_k;
            size_t b_spline_deriv_k_0_max__ = n_plot;
            size_t b_spline_deriv_k_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < b_spline_deriv_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < b_spline_deriv_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < b_spline_deriv_k_0_max__; ++k_0__) {
                        b_spline_deriv[k_0__][k_1__](j_1__) = vals_r__[pos__++];
                    }
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 77;
            num_params_r__ += 1;
            current_statement_begin__ = 78;
            num_params_r__ += 1;
            current_statement_begin__ = 79;
            num_params_r__ += 1;
            current_statement_begin__ = 80;
            num_params_r__ += 1;
            current_statement_begin__ = 81;
            num_params_r__ += 1;
            current_statement_begin__ = 82;
            num_params_r__ += 1;
            current_statement_begin__ = 83;
            num_params_r__ += 1;
            current_statement_begin__ = 84;
            num_params_r__ += 1;
            current_statement_begin__ = 85;
            num_params_r__ += 1;
            current_statement_begin__ = 86;
            num_params_r__ += 1;
            current_statement_begin__ = 87;
            num_params_r__ += 1;
            current_statement_begin__ = 88;
            num_params_r__ += 1;
            current_statement_begin__ = 89;
            num_params_r__ += 1;
            current_statement_begin__ = 90;
            num_params_r__ += 1;
            current_statement_begin__ = 91;
            num_params_r__ += 1;
            current_statement_begin__ = 92;
            num_params_r__ += 1;
            current_statement_begin__ = 93;
            num_params_r__ += 1;
            current_statement_begin__ = 94;
            num_params_r__ += 1;
            current_statement_begin__ = 95;
            num_params_r__ += 1;
            current_statement_begin__ = 96;
            validate_non_negative_index("h1", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 97;
            validate_non_negative_index("h2", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 98;
            validate_non_negative_index("h3", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 99;
            validate_non_negative_index("h4", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 100;
            validate_non_negative_index("h5", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 101;
            validate_non_negative_index("h6", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 102;
            validate_non_negative_index("h7", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 103;
            validate_non_negative_index("h8", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 104;
            validate_non_negative_index("h9", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 105;
            validate_non_negative_index("h10", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 106;
            validate_non_negative_index("h11", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 107;
            validate_non_negative_index("h12", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 108;
            validate_non_negative_index("h13", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 109;
            validate_non_negative_index("h14", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 110;
            validate_non_negative_index("h15", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 111;
            validate_non_negative_index("h16", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 112;
            validate_non_negative_index("h17", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 113;
            validate_non_negative_index("h18", "n_block", n_block);
            num_params_r__ += n_block;
            current_statement_begin__ = 114;
            validate_non_negative_index("h1_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 115;
            validate_non_negative_index("h2_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 116;
            validate_non_negative_index("h3_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 117;
            validate_non_negative_index("h4_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 118;
            validate_non_negative_index("h5_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 119;
            validate_non_negative_index("h6_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 120;
            validate_non_negative_index("h7_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 121;
            validate_non_negative_index("h8_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 122;
            validate_non_negative_index("h9_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 123;
            validate_non_negative_index("h10_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 124;
            validate_non_negative_index("h11_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 125;
            validate_non_negative_index("h12_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 126;
            validate_non_negative_index("h13_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 127;
            validate_non_negative_index("h14_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 128;
            validate_non_negative_index("h15_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 129;
            validate_non_negative_index("h16_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 130;
            validate_non_negative_index("h17_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 131;
            validate_non_negative_index("h18_holdout", "n_block_pred", n_block_pred);
            num_params_r__ += n_block_pred;
            current_statement_begin__ = 132;
            validate_non_negative_index("b1", "n_x1", n_x1);
            num_params_r__ += n_x1;
            current_statement_begin__ = 133;
            validate_non_negative_index("b2", "n_x2", n_x2);
            num_params_r__ += n_x2;
            current_statement_begin__ = 134;
            validate_non_negative_index("b3", "n_x3", n_x3);
            num_params_r__ += n_x3;
            current_statement_begin__ = 135;
            validate_non_negative_index("b4", "n_x4", n_x4);
            num_params_r__ += n_x4;
            current_statement_begin__ = 136;
            validate_non_negative_index("b5", "n_x5", n_x5);
            num_params_r__ += n_x5;
            current_statement_begin__ = 137;
            validate_non_negative_index("b6", "n_x6", n_x6);
            num_params_r__ += n_x6;
            current_statement_begin__ = 138;
            validate_non_negative_index("b7", "n_x7", n_x7);
            num_params_r__ += n_x7;
            current_statement_begin__ = 139;
            validate_non_negative_index("b8", "n_x8", n_x8);
            num_params_r__ += n_x8;
            current_statement_begin__ = 140;
            validate_non_negative_index("b9", "n_x9", n_x9);
            num_params_r__ += n_x9;
            current_statement_begin__ = 141;
            validate_non_negative_index("b10", "n_x10", n_x10);
            num_params_r__ += n_x10;
            current_statement_begin__ = 142;
            validate_non_negative_index("b11", "n_x11", n_x11);
            num_params_r__ += n_x11;
            current_statement_begin__ = 143;
            validate_non_negative_index("b12", "n_x12", n_x12);
            num_params_r__ += n_x12;
            current_statement_begin__ = 144;
            validate_non_negative_index("b13", "n_x13", n_x13);
            num_params_r__ += n_x13;
            current_statement_begin__ = 145;
            validate_non_negative_index("b14", "n_x14", n_x14);
            num_params_r__ += n_x14;
            current_statement_begin__ = 146;
            validate_non_negative_index("b15", "n_x15", n_x15);
            num_params_r__ += n_x15;
            current_statement_begin__ = 147;
            validate_non_negative_index("b16", "n_x16", n_x16);
            num_params_r__ += n_x16;
            current_statement_begin__ = 148;
            validate_non_negative_index("b17", "n_x17", n_x17);
            num_params_r__ += n_x17;
            current_statement_begin__ = 149;
            validate_non_negative_index("b18", "n_x18", n_x18);
            num_params_r__ += n_x18;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_spline_pred_blockmod() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 77;
        if (!(context__.contains_r("sigma_obs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_obs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_obs", "double", context__.to_vec());
        double sigma_obs(0);
        sigma_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_obs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 78;
        if (!(context__.contains_r("sd_h1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h1", "double", context__.to_vec());
        double sd_h1(0);
        sd_h1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 79;
        if (!(context__.contains_r("sd_h2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h2", "double", context__.to_vec());
        double sd_h2(0);
        sd_h2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 80;
        if (!(context__.contains_r("sd_h3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h3");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h3", "double", context__.to_vec());
        double sd_h3(0);
        sd_h3 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 81;
        if (!(context__.contains_r("sd_h4")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h4 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h4");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h4", "double", context__.to_vec());
        double sd_h4(0);
        sd_h4 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h4);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h4: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 82;
        if (!(context__.contains_r("sd_h5")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h5 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h5");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h5", "double", context__.to_vec());
        double sd_h5(0);
        sd_h5 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h5);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h5: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 83;
        if (!(context__.contains_r("sd_h6")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h6 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h6");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h6", "double", context__.to_vec());
        double sd_h6(0);
        sd_h6 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h6);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h6: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 84;
        if (!(context__.contains_r("sd_h7")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h7 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h7");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h7", "double", context__.to_vec());
        double sd_h7(0);
        sd_h7 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h7);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h7: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 85;
        if (!(context__.contains_r("sd_h8")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h8 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h8");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h8", "double", context__.to_vec());
        double sd_h8(0);
        sd_h8 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h8);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h8: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 86;
        if (!(context__.contains_r("sd_h9")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h9 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h9");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h9", "double", context__.to_vec());
        double sd_h9(0);
        sd_h9 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h9);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h9: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 87;
        if (!(context__.contains_r("sd_h10")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h10 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h10");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h10", "double", context__.to_vec());
        double sd_h10(0);
        sd_h10 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h10);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h10: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 88;
        if (!(context__.contains_r("sd_h11")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h11 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h11");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h11", "double", context__.to_vec());
        double sd_h11(0);
        sd_h11 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h11);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h11: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 89;
        if (!(context__.contains_r("sd_h12")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h12 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h12");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h12", "double", context__.to_vec());
        double sd_h12(0);
        sd_h12 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h12);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h12: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 90;
        if (!(context__.contains_r("sd_h13")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h13 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h13");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h13", "double", context__.to_vec());
        double sd_h13(0);
        sd_h13 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h13);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h13: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 91;
        if (!(context__.contains_r("sd_h14")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h14 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h14");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h14", "double", context__.to_vec());
        double sd_h14(0);
        sd_h14 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h14);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h14: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 92;
        if (!(context__.contains_r("sd_h15")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h15 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h15");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h15", "double", context__.to_vec());
        double sd_h15(0);
        sd_h15 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h15);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h15: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 93;
        if (!(context__.contains_r("sd_h16")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h16 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h16");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h16", "double", context__.to_vec());
        double sd_h16(0);
        sd_h16 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h16);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h16: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 94;
        if (!(context__.contains_r("sd_h17")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h17 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h17");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h17", "double", context__.to_vec());
        double sd_h17(0);
        sd_h17 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h17);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h17: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 95;
        if (!(context__.contains_r("sd_h18")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_h18 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_h18");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_h18", "double", context__.to_vec());
        double sd_h18(0);
        sd_h18 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_h18);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_h18: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 96;
        if (!(context__.contains_r("h1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h1");
        pos__ = 0U;
        validate_non_negative_index("h1", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h1", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h1(n_block);
        size_t h1_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h1_j_1_max__; ++j_1__) {
            h1(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 97;
        if (!(context__.contains_r("h2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h2");
        pos__ = 0U;
        validate_non_negative_index("h2", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h2", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h2(n_block);
        size_t h2_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h2_j_1_max__; ++j_1__) {
            h2(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 98;
        if (!(context__.contains_r("h3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h3");
        pos__ = 0U;
        validate_non_negative_index("h3", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h3", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h3(n_block);
        size_t h3_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h3_j_1_max__; ++j_1__) {
            h3(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 99;
        if (!(context__.contains_r("h4")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h4 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h4");
        pos__ = 0U;
        validate_non_negative_index("h4", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h4", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h4(n_block);
        size_t h4_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h4_j_1_max__; ++j_1__) {
            h4(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h4);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h4: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 100;
        if (!(context__.contains_r("h5")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h5 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h5");
        pos__ = 0U;
        validate_non_negative_index("h5", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h5", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h5(n_block);
        size_t h5_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h5_j_1_max__; ++j_1__) {
            h5(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h5);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h5: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 101;
        if (!(context__.contains_r("h6")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h6 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h6");
        pos__ = 0U;
        validate_non_negative_index("h6", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h6", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h6(n_block);
        size_t h6_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h6_j_1_max__; ++j_1__) {
            h6(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h6);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h6: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 102;
        if (!(context__.contains_r("h7")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h7 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h7");
        pos__ = 0U;
        validate_non_negative_index("h7", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h7", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h7(n_block);
        size_t h7_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h7_j_1_max__; ++j_1__) {
            h7(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h7);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h7: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 103;
        if (!(context__.contains_r("h8")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h8 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h8");
        pos__ = 0U;
        validate_non_negative_index("h8", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h8", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h8(n_block);
        size_t h8_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h8_j_1_max__; ++j_1__) {
            h8(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h8);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h8: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 104;
        if (!(context__.contains_r("h9")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h9 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h9");
        pos__ = 0U;
        validate_non_negative_index("h9", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h9", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h9(n_block);
        size_t h9_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h9_j_1_max__; ++j_1__) {
            h9(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h9);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h9: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 105;
        if (!(context__.contains_r("h10")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h10 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h10");
        pos__ = 0U;
        validate_non_negative_index("h10", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h10", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h10(n_block);
        size_t h10_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h10_j_1_max__; ++j_1__) {
            h10(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h10);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h10: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 106;
        if (!(context__.contains_r("h11")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h11 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h11");
        pos__ = 0U;
        validate_non_negative_index("h11", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h11", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h11(n_block);
        size_t h11_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h11_j_1_max__; ++j_1__) {
            h11(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h11);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h11: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 107;
        if (!(context__.contains_r("h12")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h12 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h12");
        pos__ = 0U;
        validate_non_negative_index("h12", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h12", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h12(n_block);
        size_t h12_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h12_j_1_max__; ++j_1__) {
            h12(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h12);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h12: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 108;
        if (!(context__.contains_r("h13")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h13 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h13");
        pos__ = 0U;
        validate_non_negative_index("h13", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h13", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h13(n_block);
        size_t h13_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h13_j_1_max__; ++j_1__) {
            h13(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h13);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h13: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 109;
        if (!(context__.contains_r("h14")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h14 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h14");
        pos__ = 0U;
        validate_non_negative_index("h14", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h14", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h14(n_block);
        size_t h14_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h14_j_1_max__; ++j_1__) {
            h14(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h14);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h14: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 110;
        if (!(context__.contains_r("h15")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h15 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h15");
        pos__ = 0U;
        validate_non_negative_index("h15", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h15", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h15(n_block);
        size_t h15_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h15_j_1_max__; ++j_1__) {
            h15(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h15);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h15: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 111;
        if (!(context__.contains_r("h16")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h16 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h16");
        pos__ = 0U;
        validate_non_negative_index("h16", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h16", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h16(n_block);
        size_t h16_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h16_j_1_max__; ++j_1__) {
            h16(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h16);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h16: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 112;
        if (!(context__.contains_r("h17")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h17 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h17");
        pos__ = 0U;
        validate_non_negative_index("h17", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h17", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h17(n_block);
        size_t h17_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h17_j_1_max__; ++j_1__) {
            h17(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h17);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h17: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 113;
        if (!(context__.contains_r("h18")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h18 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h18");
        pos__ = 0U;
        validate_non_negative_index("h18", "n_block", n_block);
        context__.validate_dims("parameter initialization", "h18", "vector_d", context__.to_vec(n_block));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h18(n_block);
        size_t h18_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h18_j_1_max__; ++j_1__) {
            h18(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h18);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h18: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 114;
        if (!(context__.contains_r("h1_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h1_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h1_holdout");
        pos__ = 0U;
        validate_non_negative_index("h1_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h1_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h1_holdout(n_block_pred);
        size_t h1_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h1_holdout_j_1_max__; ++j_1__) {
            h1_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h1_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h1_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 115;
        if (!(context__.contains_r("h2_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h2_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h2_holdout");
        pos__ = 0U;
        validate_non_negative_index("h2_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h2_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h2_holdout(n_block_pred);
        size_t h2_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h2_holdout_j_1_max__; ++j_1__) {
            h2_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h2_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h2_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 116;
        if (!(context__.contains_r("h3_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h3_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h3_holdout");
        pos__ = 0U;
        validate_non_negative_index("h3_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h3_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h3_holdout(n_block_pred);
        size_t h3_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h3_holdout_j_1_max__; ++j_1__) {
            h3_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h3_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h3_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 117;
        if (!(context__.contains_r("h4_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h4_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h4_holdout");
        pos__ = 0U;
        validate_non_negative_index("h4_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h4_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h4_holdout(n_block_pred);
        size_t h4_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h4_holdout_j_1_max__; ++j_1__) {
            h4_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h4_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h4_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 118;
        if (!(context__.contains_r("h5_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h5_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h5_holdout");
        pos__ = 0U;
        validate_non_negative_index("h5_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h5_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h5_holdout(n_block_pred);
        size_t h5_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h5_holdout_j_1_max__; ++j_1__) {
            h5_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h5_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h5_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 119;
        if (!(context__.contains_r("h6_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h6_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h6_holdout");
        pos__ = 0U;
        validate_non_negative_index("h6_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h6_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h6_holdout(n_block_pred);
        size_t h6_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h6_holdout_j_1_max__; ++j_1__) {
            h6_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h6_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h6_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 120;
        if (!(context__.contains_r("h7_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h7_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h7_holdout");
        pos__ = 0U;
        validate_non_negative_index("h7_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h7_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h7_holdout(n_block_pred);
        size_t h7_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h7_holdout_j_1_max__; ++j_1__) {
            h7_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h7_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h7_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 121;
        if (!(context__.contains_r("h8_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h8_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h8_holdout");
        pos__ = 0U;
        validate_non_negative_index("h8_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h8_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h8_holdout(n_block_pred);
        size_t h8_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h8_holdout_j_1_max__; ++j_1__) {
            h8_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h8_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h8_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 122;
        if (!(context__.contains_r("h9_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h9_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h9_holdout");
        pos__ = 0U;
        validate_non_negative_index("h9_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h9_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h9_holdout(n_block_pred);
        size_t h9_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h9_holdout_j_1_max__; ++j_1__) {
            h9_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h9_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h9_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 123;
        if (!(context__.contains_r("h10_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h10_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h10_holdout");
        pos__ = 0U;
        validate_non_negative_index("h10_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h10_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h10_holdout(n_block_pred);
        size_t h10_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h10_holdout_j_1_max__; ++j_1__) {
            h10_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h10_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h10_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 124;
        if (!(context__.contains_r("h11_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h11_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h11_holdout");
        pos__ = 0U;
        validate_non_negative_index("h11_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h11_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h11_holdout(n_block_pred);
        size_t h11_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h11_holdout_j_1_max__; ++j_1__) {
            h11_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h11_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h11_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 125;
        if (!(context__.contains_r("h12_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h12_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h12_holdout");
        pos__ = 0U;
        validate_non_negative_index("h12_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h12_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h12_holdout(n_block_pred);
        size_t h12_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h12_holdout_j_1_max__; ++j_1__) {
            h12_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h12_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h12_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 126;
        if (!(context__.contains_r("h13_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h13_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h13_holdout");
        pos__ = 0U;
        validate_non_negative_index("h13_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h13_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h13_holdout(n_block_pred);
        size_t h13_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h13_holdout_j_1_max__; ++j_1__) {
            h13_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h13_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h13_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 127;
        if (!(context__.contains_r("h14_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h14_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h14_holdout");
        pos__ = 0U;
        validate_non_negative_index("h14_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h14_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h14_holdout(n_block_pred);
        size_t h14_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h14_holdout_j_1_max__; ++j_1__) {
            h14_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h14_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h14_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 128;
        if (!(context__.contains_r("h15_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h15_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h15_holdout");
        pos__ = 0U;
        validate_non_negative_index("h15_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h15_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h15_holdout(n_block_pred);
        size_t h15_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h15_holdout_j_1_max__; ++j_1__) {
            h15_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h15_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h15_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 129;
        if (!(context__.contains_r("h16_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h16_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h16_holdout");
        pos__ = 0U;
        validate_non_negative_index("h16_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h16_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h16_holdout(n_block_pred);
        size_t h16_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h16_holdout_j_1_max__; ++j_1__) {
            h16_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h16_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h16_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 130;
        if (!(context__.contains_r("h17_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h17_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h17_holdout");
        pos__ = 0U;
        validate_non_negative_index("h17_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h17_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h17_holdout(n_block_pred);
        size_t h17_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h17_holdout_j_1_max__; ++j_1__) {
            h17_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h17_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h17_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 131;
        if (!(context__.contains_r("h18_holdout")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h18_holdout missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h18_holdout");
        pos__ = 0U;
        validate_non_negative_index("h18_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("parameter initialization", "h18_holdout", "vector_d", context__.to_vec(n_block_pred));
        Eigen::Matrix<double, Eigen::Dynamic, 1> h18_holdout(n_block_pred);
        size_t h18_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h18_holdout_j_1_max__; ++j_1__) {
            h18_holdout(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(h18_holdout);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h18_holdout: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 132;
        if (!(context__.contains_r("b1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b1");
        pos__ = 0U;
        validate_non_negative_index("b1", "n_x1", n_x1);
        context__.validate_dims("parameter initialization", "b1", "vector_d", context__.to_vec(n_x1));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b1(n_x1);
        size_t b1_j_1_max__ = n_x1;
        for (size_t j_1__ = 0; j_1__ < b1_j_1_max__; ++j_1__) {
            b1(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 133;
        if (!(context__.contains_r("b2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b2");
        pos__ = 0U;
        validate_non_negative_index("b2", "n_x2", n_x2);
        context__.validate_dims("parameter initialization", "b2", "vector_d", context__.to_vec(n_x2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b2(n_x2);
        size_t b2_j_1_max__ = n_x2;
        for (size_t j_1__ = 0; j_1__ < b2_j_1_max__; ++j_1__) {
            b2(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 134;
        if (!(context__.contains_r("b3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b3");
        pos__ = 0U;
        validate_non_negative_index("b3", "n_x3", n_x3);
        context__.validate_dims("parameter initialization", "b3", "vector_d", context__.to_vec(n_x3));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b3(n_x3);
        size_t b3_j_1_max__ = n_x3;
        for (size_t j_1__ = 0; j_1__ < b3_j_1_max__; ++j_1__) {
            b3(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 135;
        if (!(context__.contains_r("b4")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b4 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b4");
        pos__ = 0U;
        validate_non_negative_index("b4", "n_x4", n_x4);
        context__.validate_dims("parameter initialization", "b4", "vector_d", context__.to_vec(n_x4));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b4(n_x4);
        size_t b4_j_1_max__ = n_x4;
        for (size_t j_1__ = 0; j_1__ < b4_j_1_max__; ++j_1__) {
            b4(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b4);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b4: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 136;
        if (!(context__.contains_r("b5")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b5 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b5");
        pos__ = 0U;
        validate_non_negative_index("b5", "n_x5", n_x5);
        context__.validate_dims("parameter initialization", "b5", "vector_d", context__.to_vec(n_x5));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b5(n_x5);
        size_t b5_j_1_max__ = n_x5;
        for (size_t j_1__ = 0; j_1__ < b5_j_1_max__; ++j_1__) {
            b5(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b5);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b5: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 137;
        if (!(context__.contains_r("b6")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b6 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b6");
        pos__ = 0U;
        validate_non_negative_index("b6", "n_x6", n_x6);
        context__.validate_dims("parameter initialization", "b6", "vector_d", context__.to_vec(n_x6));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b6(n_x6);
        size_t b6_j_1_max__ = n_x6;
        for (size_t j_1__ = 0; j_1__ < b6_j_1_max__; ++j_1__) {
            b6(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b6);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b6: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 138;
        if (!(context__.contains_r("b7")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b7 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b7");
        pos__ = 0U;
        validate_non_negative_index("b7", "n_x7", n_x7);
        context__.validate_dims("parameter initialization", "b7", "vector_d", context__.to_vec(n_x7));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b7(n_x7);
        size_t b7_j_1_max__ = n_x7;
        for (size_t j_1__ = 0; j_1__ < b7_j_1_max__; ++j_1__) {
            b7(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b7);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b7: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 139;
        if (!(context__.contains_r("b8")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b8 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b8");
        pos__ = 0U;
        validate_non_negative_index("b8", "n_x8", n_x8);
        context__.validate_dims("parameter initialization", "b8", "vector_d", context__.to_vec(n_x8));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b8(n_x8);
        size_t b8_j_1_max__ = n_x8;
        for (size_t j_1__ = 0; j_1__ < b8_j_1_max__; ++j_1__) {
            b8(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b8);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b8: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 140;
        if (!(context__.contains_r("b9")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b9 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b9");
        pos__ = 0U;
        validate_non_negative_index("b9", "n_x9", n_x9);
        context__.validate_dims("parameter initialization", "b9", "vector_d", context__.to_vec(n_x9));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b9(n_x9);
        size_t b9_j_1_max__ = n_x9;
        for (size_t j_1__ = 0; j_1__ < b9_j_1_max__; ++j_1__) {
            b9(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b9);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b9: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 141;
        if (!(context__.contains_r("b10")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b10 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b10");
        pos__ = 0U;
        validate_non_negative_index("b10", "n_x10", n_x10);
        context__.validate_dims("parameter initialization", "b10", "vector_d", context__.to_vec(n_x10));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b10(n_x10);
        size_t b10_j_1_max__ = n_x10;
        for (size_t j_1__ = 0; j_1__ < b10_j_1_max__; ++j_1__) {
            b10(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b10);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b10: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 142;
        if (!(context__.contains_r("b11")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b11 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b11");
        pos__ = 0U;
        validate_non_negative_index("b11", "n_x11", n_x11);
        context__.validate_dims("parameter initialization", "b11", "vector_d", context__.to_vec(n_x11));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b11(n_x11);
        size_t b11_j_1_max__ = n_x11;
        for (size_t j_1__ = 0; j_1__ < b11_j_1_max__; ++j_1__) {
            b11(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b11);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b11: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 143;
        if (!(context__.contains_r("b12")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b12 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b12");
        pos__ = 0U;
        validate_non_negative_index("b12", "n_x12", n_x12);
        context__.validate_dims("parameter initialization", "b12", "vector_d", context__.to_vec(n_x12));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b12(n_x12);
        size_t b12_j_1_max__ = n_x12;
        for (size_t j_1__ = 0; j_1__ < b12_j_1_max__; ++j_1__) {
            b12(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b12);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b12: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 144;
        if (!(context__.contains_r("b13")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b13 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b13");
        pos__ = 0U;
        validate_non_negative_index("b13", "n_x13", n_x13);
        context__.validate_dims("parameter initialization", "b13", "vector_d", context__.to_vec(n_x13));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b13(n_x13);
        size_t b13_j_1_max__ = n_x13;
        for (size_t j_1__ = 0; j_1__ < b13_j_1_max__; ++j_1__) {
            b13(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b13);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b13: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 145;
        if (!(context__.contains_r("b14")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b14 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b14");
        pos__ = 0U;
        validate_non_negative_index("b14", "n_x14", n_x14);
        context__.validate_dims("parameter initialization", "b14", "vector_d", context__.to_vec(n_x14));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b14(n_x14);
        size_t b14_j_1_max__ = n_x14;
        for (size_t j_1__ = 0; j_1__ < b14_j_1_max__; ++j_1__) {
            b14(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b14);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b14: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 146;
        if (!(context__.contains_r("b15")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b15 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b15");
        pos__ = 0U;
        validate_non_negative_index("b15", "n_x15", n_x15);
        context__.validate_dims("parameter initialization", "b15", "vector_d", context__.to_vec(n_x15));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b15(n_x15);
        size_t b15_j_1_max__ = n_x15;
        for (size_t j_1__ = 0; j_1__ < b15_j_1_max__; ++j_1__) {
            b15(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b15);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b15: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 147;
        if (!(context__.contains_r("b16")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b16 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b16");
        pos__ = 0U;
        validate_non_negative_index("b16", "n_x16", n_x16);
        context__.validate_dims("parameter initialization", "b16", "vector_d", context__.to_vec(n_x16));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b16(n_x16);
        size_t b16_j_1_max__ = n_x16;
        for (size_t j_1__ = 0; j_1__ < b16_j_1_max__; ++j_1__) {
            b16(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b16);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b16: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 148;
        if (!(context__.contains_r("b17")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b17 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b17");
        pos__ = 0U;
        validate_non_negative_index("b17", "n_x17", n_x17);
        context__.validate_dims("parameter initialization", "b17", "vector_d", context__.to_vec(n_x17));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b17(n_x17);
        size_t b17_j_1_max__ = n_x17;
        for (size_t j_1__ = 0; j_1__ < b17_j_1_max__; ++j_1__) {
            b17(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b17);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b17: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 149;
        if (!(context__.contains_r("b18")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b18 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b18");
        pos__ = 0U;
        validate_non_negative_index("b18", "n_x18", n_x18);
        context__.validate_dims("parameter initialization", "b18", "vector_d", context__.to_vec(n_x18));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b18(n_x18);
        size_t b18_j_1_max__ = n_x18;
        for (size_t j_1__ = 0; j_1__ < b18_j_1_max__; ++j_1__) {
            b18(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b18);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b18: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 77;
            local_scalar_t__ sigma_obs;
            (void) sigma_obs;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_obs = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_obs = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 78;
            local_scalar_t__ sd_h1;
            (void) sd_h1;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h1 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 79;
            local_scalar_t__ sd_h2;
            (void) sd_h2;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h2 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 80;
            local_scalar_t__ sd_h3;
            (void) sd_h3;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h3 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h3 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 81;
            local_scalar_t__ sd_h4;
            (void) sd_h4;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h4 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h4 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 82;
            local_scalar_t__ sd_h5;
            (void) sd_h5;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h5 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h5 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 83;
            local_scalar_t__ sd_h6;
            (void) sd_h6;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h6 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h6 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 84;
            local_scalar_t__ sd_h7;
            (void) sd_h7;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h7 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h7 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 85;
            local_scalar_t__ sd_h8;
            (void) sd_h8;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h8 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h8 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 86;
            local_scalar_t__ sd_h9;
            (void) sd_h9;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h9 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h9 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 87;
            local_scalar_t__ sd_h10;
            (void) sd_h10;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h10 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h10 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 88;
            local_scalar_t__ sd_h11;
            (void) sd_h11;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h11 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h11 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 89;
            local_scalar_t__ sd_h12;
            (void) sd_h12;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h12 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h12 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 90;
            local_scalar_t__ sd_h13;
            (void) sd_h13;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h13 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h13 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 91;
            local_scalar_t__ sd_h14;
            (void) sd_h14;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h14 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h14 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 92;
            local_scalar_t__ sd_h15;
            (void) sd_h15;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h15 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h15 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 93;
            local_scalar_t__ sd_h16;
            (void) sd_h16;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h16 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h16 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 94;
            local_scalar_t__ sd_h17;
            (void) sd_h17;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h17 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h17 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 95;
            local_scalar_t__ sd_h18;
            (void) sd_h18;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_h18 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_h18 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 96;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h1;
            (void) h1;  // dummy to suppress unused var warning
            if (jacobian__)
                h1 = in__.vector_constrain(n_block, lp__);
            else
                h1 = in__.vector_constrain(n_block);
            current_statement_begin__ = 97;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h2;
            (void) h2;  // dummy to suppress unused var warning
            if (jacobian__)
                h2 = in__.vector_constrain(n_block, lp__);
            else
                h2 = in__.vector_constrain(n_block);
            current_statement_begin__ = 98;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h3;
            (void) h3;  // dummy to suppress unused var warning
            if (jacobian__)
                h3 = in__.vector_constrain(n_block, lp__);
            else
                h3 = in__.vector_constrain(n_block);
            current_statement_begin__ = 99;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h4;
            (void) h4;  // dummy to suppress unused var warning
            if (jacobian__)
                h4 = in__.vector_constrain(n_block, lp__);
            else
                h4 = in__.vector_constrain(n_block);
            current_statement_begin__ = 100;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h5;
            (void) h5;  // dummy to suppress unused var warning
            if (jacobian__)
                h5 = in__.vector_constrain(n_block, lp__);
            else
                h5 = in__.vector_constrain(n_block);
            current_statement_begin__ = 101;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h6;
            (void) h6;  // dummy to suppress unused var warning
            if (jacobian__)
                h6 = in__.vector_constrain(n_block, lp__);
            else
                h6 = in__.vector_constrain(n_block);
            current_statement_begin__ = 102;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h7;
            (void) h7;  // dummy to suppress unused var warning
            if (jacobian__)
                h7 = in__.vector_constrain(n_block, lp__);
            else
                h7 = in__.vector_constrain(n_block);
            current_statement_begin__ = 103;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h8;
            (void) h8;  // dummy to suppress unused var warning
            if (jacobian__)
                h8 = in__.vector_constrain(n_block, lp__);
            else
                h8 = in__.vector_constrain(n_block);
            current_statement_begin__ = 104;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h9;
            (void) h9;  // dummy to suppress unused var warning
            if (jacobian__)
                h9 = in__.vector_constrain(n_block, lp__);
            else
                h9 = in__.vector_constrain(n_block);
            current_statement_begin__ = 105;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h10;
            (void) h10;  // dummy to suppress unused var warning
            if (jacobian__)
                h10 = in__.vector_constrain(n_block, lp__);
            else
                h10 = in__.vector_constrain(n_block);
            current_statement_begin__ = 106;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h11;
            (void) h11;  // dummy to suppress unused var warning
            if (jacobian__)
                h11 = in__.vector_constrain(n_block, lp__);
            else
                h11 = in__.vector_constrain(n_block);
            current_statement_begin__ = 107;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h12;
            (void) h12;  // dummy to suppress unused var warning
            if (jacobian__)
                h12 = in__.vector_constrain(n_block, lp__);
            else
                h12 = in__.vector_constrain(n_block);
            current_statement_begin__ = 108;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h13;
            (void) h13;  // dummy to suppress unused var warning
            if (jacobian__)
                h13 = in__.vector_constrain(n_block, lp__);
            else
                h13 = in__.vector_constrain(n_block);
            current_statement_begin__ = 109;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h14;
            (void) h14;  // dummy to suppress unused var warning
            if (jacobian__)
                h14 = in__.vector_constrain(n_block, lp__);
            else
                h14 = in__.vector_constrain(n_block);
            current_statement_begin__ = 110;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h15;
            (void) h15;  // dummy to suppress unused var warning
            if (jacobian__)
                h15 = in__.vector_constrain(n_block, lp__);
            else
                h15 = in__.vector_constrain(n_block);
            current_statement_begin__ = 111;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h16;
            (void) h16;  // dummy to suppress unused var warning
            if (jacobian__)
                h16 = in__.vector_constrain(n_block, lp__);
            else
                h16 = in__.vector_constrain(n_block);
            current_statement_begin__ = 112;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h17;
            (void) h17;  // dummy to suppress unused var warning
            if (jacobian__)
                h17 = in__.vector_constrain(n_block, lp__);
            else
                h17 = in__.vector_constrain(n_block);
            current_statement_begin__ = 113;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h18;
            (void) h18;  // dummy to suppress unused var warning
            if (jacobian__)
                h18 = in__.vector_constrain(n_block, lp__);
            else
                h18 = in__.vector_constrain(n_block);
            current_statement_begin__ = 114;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h1_holdout;
            (void) h1_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h1_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h1_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 115;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h2_holdout;
            (void) h2_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h2_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h2_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 116;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h3_holdout;
            (void) h3_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h3_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h3_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 117;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h4_holdout;
            (void) h4_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h4_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h4_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 118;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h5_holdout;
            (void) h5_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h5_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h5_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 119;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h6_holdout;
            (void) h6_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h6_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h6_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 120;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h7_holdout;
            (void) h7_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h7_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h7_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 121;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h8_holdout;
            (void) h8_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h8_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h8_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 122;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h9_holdout;
            (void) h9_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h9_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h9_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 123;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h10_holdout;
            (void) h10_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h10_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h10_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 124;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h11_holdout;
            (void) h11_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h11_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h11_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 125;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h12_holdout;
            (void) h12_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h12_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h12_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 126;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h13_holdout;
            (void) h13_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h13_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h13_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 127;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h14_holdout;
            (void) h14_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h14_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h14_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 128;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h15_holdout;
            (void) h15_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h15_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h15_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 129;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h16_holdout;
            (void) h16_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h16_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h16_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 130;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h17_holdout;
            (void) h17_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h17_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h17_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 131;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h18_holdout;
            (void) h18_holdout;  // dummy to suppress unused var warning
            if (jacobian__)
                h18_holdout = in__.vector_constrain(n_block_pred, lp__);
            else
                h18_holdout = in__.vector_constrain(n_block_pred);
            current_statement_begin__ = 132;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b1;
            (void) b1;  // dummy to suppress unused var warning
            if (jacobian__)
                b1 = in__.vector_constrain(n_x1, lp__);
            else
                b1 = in__.vector_constrain(n_x1);
            current_statement_begin__ = 133;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b2;
            (void) b2;  // dummy to suppress unused var warning
            if (jacobian__)
                b2 = in__.vector_constrain(n_x2, lp__);
            else
                b2 = in__.vector_constrain(n_x2);
            current_statement_begin__ = 134;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b3;
            (void) b3;  // dummy to suppress unused var warning
            if (jacobian__)
                b3 = in__.vector_constrain(n_x3, lp__);
            else
                b3 = in__.vector_constrain(n_x3);
            current_statement_begin__ = 135;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b4;
            (void) b4;  // dummy to suppress unused var warning
            if (jacobian__)
                b4 = in__.vector_constrain(n_x4, lp__);
            else
                b4 = in__.vector_constrain(n_x4);
            current_statement_begin__ = 136;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b5;
            (void) b5;  // dummy to suppress unused var warning
            if (jacobian__)
                b5 = in__.vector_constrain(n_x5, lp__);
            else
                b5 = in__.vector_constrain(n_x5);
            current_statement_begin__ = 137;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b6;
            (void) b6;  // dummy to suppress unused var warning
            if (jacobian__)
                b6 = in__.vector_constrain(n_x6, lp__);
            else
                b6 = in__.vector_constrain(n_x6);
            current_statement_begin__ = 138;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b7;
            (void) b7;  // dummy to suppress unused var warning
            if (jacobian__)
                b7 = in__.vector_constrain(n_x7, lp__);
            else
                b7 = in__.vector_constrain(n_x7);
            current_statement_begin__ = 139;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b8;
            (void) b8;  // dummy to suppress unused var warning
            if (jacobian__)
                b8 = in__.vector_constrain(n_x8, lp__);
            else
                b8 = in__.vector_constrain(n_x8);
            current_statement_begin__ = 140;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b9;
            (void) b9;  // dummy to suppress unused var warning
            if (jacobian__)
                b9 = in__.vector_constrain(n_x9, lp__);
            else
                b9 = in__.vector_constrain(n_x9);
            current_statement_begin__ = 141;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b10;
            (void) b10;  // dummy to suppress unused var warning
            if (jacobian__)
                b10 = in__.vector_constrain(n_x10, lp__);
            else
                b10 = in__.vector_constrain(n_x10);
            current_statement_begin__ = 142;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b11;
            (void) b11;  // dummy to suppress unused var warning
            if (jacobian__)
                b11 = in__.vector_constrain(n_x11, lp__);
            else
                b11 = in__.vector_constrain(n_x11);
            current_statement_begin__ = 143;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b12;
            (void) b12;  // dummy to suppress unused var warning
            if (jacobian__)
                b12 = in__.vector_constrain(n_x12, lp__);
            else
                b12 = in__.vector_constrain(n_x12);
            current_statement_begin__ = 144;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b13;
            (void) b13;  // dummy to suppress unused var warning
            if (jacobian__)
                b13 = in__.vector_constrain(n_x13, lp__);
            else
                b13 = in__.vector_constrain(n_x13);
            current_statement_begin__ = 145;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b14;
            (void) b14;  // dummy to suppress unused var warning
            if (jacobian__)
                b14 = in__.vector_constrain(n_x14, lp__);
            else
                b14 = in__.vector_constrain(n_x14);
            current_statement_begin__ = 146;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b15;
            (void) b15;  // dummy to suppress unused var warning
            if (jacobian__)
                b15 = in__.vector_constrain(n_x15, lp__);
            else
                b15 = in__.vector_constrain(n_x15);
            current_statement_begin__ = 147;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b16;
            (void) b16;  // dummy to suppress unused var warning
            if (jacobian__)
                b16 = in__.vector_constrain(n_x16, lp__);
            else
                b16 = in__.vector_constrain(n_x16);
            current_statement_begin__ = 148;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b17;
            (void) b17;  // dummy to suppress unused var warning
            if (jacobian__)
                b17 = in__.vector_constrain(n_x17, lp__);
            else
                b17 = in__.vector_constrain(n_x17);
            current_statement_begin__ = 149;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b18;
            (void) b18;  // dummy to suppress unused var warning
            if (jacobian__)
                b18 = in__.vector_constrain(n_x18, lp__);
            else
                b18 = in__.vector_constrain(n_x18);
            // transformed parameters
            current_statement_begin__ = 153;
            validate_non_negative_index("mu", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(n);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 154;
            validate_non_negative_index("psi1", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi1(n_block);
            stan::math::initialize(psi1, DUMMY_VAR__);
            stan::math::fill(psi1, DUMMY_VAR__);
            current_statement_begin__ = 155;
            validate_non_negative_index("psi2", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi2(n_block);
            stan::math::initialize(psi2, DUMMY_VAR__);
            stan::math::fill(psi2, DUMMY_VAR__);
            current_statement_begin__ = 156;
            validate_non_negative_index("psi3", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi3(n_block);
            stan::math::initialize(psi3, DUMMY_VAR__);
            stan::math::fill(psi3, DUMMY_VAR__);
            current_statement_begin__ = 157;
            validate_non_negative_index("psi4", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi4(n_block);
            stan::math::initialize(psi4, DUMMY_VAR__);
            stan::math::fill(psi4, DUMMY_VAR__);
            current_statement_begin__ = 158;
            validate_non_negative_index("psi5", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi5(n_block);
            stan::math::initialize(psi5, DUMMY_VAR__);
            stan::math::fill(psi5, DUMMY_VAR__);
            current_statement_begin__ = 159;
            validate_non_negative_index("psi6", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi6(n_block);
            stan::math::initialize(psi6, DUMMY_VAR__);
            stan::math::fill(psi6, DUMMY_VAR__);
            current_statement_begin__ = 160;
            validate_non_negative_index("psi7", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi7(n_block);
            stan::math::initialize(psi7, DUMMY_VAR__);
            stan::math::fill(psi7, DUMMY_VAR__);
            current_statement_begin__ = 161;
            validate_non_negative_index("psi8", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi8(n_block);
            stan::math::initialize(psi8, DUMMY_VAR__);
            stan::math::fill(psi8, DUMMY_VAR__);
            current_statement_begin__ = 162;
            validate_non_negative_index("psi9", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi9(n_block);
            stan::math::initialize(psi9, DUMMY_VAR__);
            stan::math::fill(psi9, DUMMY_VAR__);
            current_statement_begin__ = 163;
            validate_non_negative_index("psi10", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi10(n_block);
            stan::math::initialize(psi10, DUMMY_VAR__);
            stan::math::fill(psi10, DUMMY_VAR__);
            current_statement_begin__ = 164;
            validate_non_negative_index("psi11", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi11(n_block);
            stan::math::initialize(psi11, DUMMY_VAR__);
            stan::math::fill(psi11, DUMMY_VAR__);
            current_statement_begin__ = 165;
            validate_non_negative_index("psi12", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi12(n_block);
            stan::math::initialize(psi12, DUMMY_VAR__);
            stan::math::fill(psi12, DUMMY_VAR__);
            current_statement_begin__ = 166;
            validate_non_negative_index("psi13", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi13(n_block);
            stan::math::initialize(psi13, DUMMY_VAR__);
            stan::math::fill(psi13, DUMMY_VAR__);
            current_statement_begin__ = 167;
            validate_non_negative_index("psi14", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi14(n_block);
            stan::math::initialize(psi14, DUMMY_VAR__);
            stan::math::fill(psi14, DUMMY_VAR__);
            current_statement_begin__ = 168;
            validate_non_negative_index("psi15", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi15(n_block);
            stan::math::initialize(psi15, DUMMY_VAR__);
            stan::math::fill(psi15, DUMMY_VAR__);
            current_statement_begin__ = 169;
            validate_non_negative_index("psi16", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi16(n_block);
            stan::math::initialize(psi16, DUMMY_VAR__);
            stan::math::fill(psi16, DUMMY_VAR__);
            current_statement_begin__ = 170;
            validate_non_negative_index("psi17", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi17(n_block);
            stan::math::initialize(psi17, DUMMY_VAR__);
            stan::math::fill(psi17, DUMMY_VAR__);
            current_statement_begin__ = 171;
            validate_non_negative_index("psi18", "n_block", n_block);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi18(n_block);
            stan::math::initialize(psi18, DUMMY_VAR__);
            stan::math::fill(psi18, DUMMY_VAR__);
            current_statement_begin__ = 172;
            validate_non_negative_index("psi1_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi1_pred(n_block_pred);
            stan::math::initialize(psi1_pred, DUMMY_VAR__);
            stan::math::fill(psi1_pred, DUMMY_VAR__);
            current_statement_begin__ = 173;
            validate_non_negative_index("psi2_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi2_pred(n_block_pred);
            stan::math::initialize(psi2_pred, DUMMY_VAR__);
            stan::math::fill(psi2_pred, DUMMY_VAR__);
            current_statement_begin__ = 174;
            validate_non_negative_index("psi3_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi3_pred(n_block_pred);
            stan::math::initialize(psi3_pred, DUMMY_VAR__);
            stan::math::fill(psi3_pred, DUMMY_VAR__);
            current_statement_begin__ = 175;
            validate_non_negative_index("psi4_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi4_pred(n_block_pred);
            stan::math::initialize(psi4_pred, DUMMY_VAR__);
            stan::math::fill(psi4_pred, DUMMY_VAR__);
            current_statement_begin__ = 176;
            validate_non_negative_index("psi5_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi5_pred(n_block_pred);
            stan::math::initialize(psi5_pred, DUMMY_VAR__);
            stan::math::fill(psi5_pred, DUMMY_VAR__);
            current_statement_begin__ = 177;
            validate_non_negative_index("psi6_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi6_pred(n_block_pred);
            stan::math::initialize(psi6_pred, DUMMY_VAR__);
            stan::math::fill(psi6_pred, DUMMY_VAR__);
            current_statement_begin__ = 178;
            validate_non_negative_index("psi7_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi7_pred(n_block_pred);
            stan::math::initialize(psi7_pred, DUMMY_VAR__);
            stan::math::fill(psi7_pred, DUMMY_VAR__);
            current_statement_begin__ = 179;
            validate_non_negative_index("psi8_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi8_pred(n_block_pred);
            stan::math::initialize(psi8_pred, DUMMY_VAR__);
            stan::math::fill(psi8_pred, DUMMY_VAR__);
            current_statement_begin__ = 180;
            validate_non_negative_index("psi9_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi9_pred(n_block_pred);
            stan::math::initialize(psi9_pred, DUMMY_VAR__);
            stan::math::fill(psi9_pred, DUMMY_VAR__);
            current_statement_begin__ = 181;
            validate_non_negative_index("psi10_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi10_pred(n_block_pred);
            stan::math::initialize(psi10_pred, DUMMY_VAR__);
            stan::math::fill(psi10_pred, DUMMY_VAR__);
            current_statement_begin__ = 182;
            validate_non_negative_index("psi11_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi11_pred(n_block_pred);
            stan::math::initialize(psi11_pred, DUMMY_VAR__);
            stan::math::fill(psi11_pred, DUMMY_VAR__);
            current_statement_begin__ = 183;
            validate_non_negative_index("psi12_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi12_pred(n_block_pred);
            stan::math::initialize(psi12_pred, DUMMY_VAR__);
            stan::math::fill(psi12_pred, DUMMY_VAR__);
            current_statement_begin__ = 184;
            validate_non_negative_index("psi13_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi13_pred(n_block_pred);
            stan::math::initialize(psi13_pred, DUMMY_VAR__);
            stan::math::fill(psi13_pred, DUMMY_VAR__);
            current_statement_begin__ = 185;
            validate_non_negative_index("psi14_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi14_pred(n_block_pred);
            stan::math::initialize(psi14_pred, DUMMY_VAR__);
            stan::math::fill(psi14_pred, DUMMY_VAR__);
            current_statement_begin__ = 186;
            validate_non_negative_index("psi15_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi15_pred(n_block_pred);
            stan::math::initialize(psi15_pred, DUMMY_VAR__);
            stan::math::fill(psi15_pred, DUMMY_VAR__);
            current_statement_begin__ = 187;
            validate_non_negative_index("psi16_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi16_pred(n_block_pred);
            stan::math::initialize(psi16_pred, DUMMY_VAR__);
            stan::math::fill(psi16_pred, DUMMY_VAR__);
            current_statement_begin__ = 188;
            validate_non_negative_index("psi17_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi17_pred(n_block_pred);
            stan::math::initialize(psi17_pred, DUMMY_VAR__);
            stan::math::fill(psi17_pred, DUMMY_VAR__);
            current_statement_begin__ = 189;
            validate_non_negative_index("psi18_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi18_pred(n_block_pred);
            stan::math::initialize(psi18_pred, DUMMY_VAR__);
            stan::math::fill(psi18_pred, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 190;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 191;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((((((((((((((((((get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 1, "b_spline", 2) * get_base1(h1, get_base1(block_data, i, "block_data", 1), "h1", 1)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 2, "b_spline", 2) * get_base1(h2, get_base1(block_data, i, "block_data", 1), "h2", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 3, "b_spline", 2) * get_base1(h3, get_base1(block_data, i, "block_data", 1), "h3", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 4, "b_spline", 2) * get_base1(h4, get_base1(block_data, i, "block_data", 1), "h4", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 5, "b_spline", 2) * get_base1(h5, get_base1(block_data, i, "block_data", 1), "h5", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 6, "b_spline", 2) * get_base1(h6, get_base1(block_data, i, "block_data", 1), "h6", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 7, "b_spline", 2) * get_base1(h7, get_base1(block_data, i, "block_data", 1), "h7", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 8, "b_spline", 2) * get_base1(h8, get_base1(block_data, i, "block_data", 1), "h8", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 9, "b_spline", 2) * get_base1(h9, get_base1(block_data, i, "block_data", 1), "h9", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 10, "b_spline", 2) * get_base1(h10, get_base1(block_data, i, "block_data", 1), "h10", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 11, "b_spline", 2) * get_base1(h11, get_base1(block_data, i, "block_data", 1), "h11", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 12, "b_spline", 2) * get_base1(h12, get_base1(block_data, i, "block_data", 1), "h12", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 13, "b_spline", 2) * get_base1(h13, get_base1(block_data, i, "block_data", 1), "h13", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 14, "b_spline", 2) * get_base1(h14, get_base1(block_data, i, "block_data", 1), "h14", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 15, "b_spline", 2) * get_base1(h15, get_base1(block_data, i, "block_data", 1), "h15", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 16, "b_spline", 2) * get_base1(h16, get_base1(block_data, i, "block_data", 1), "h16", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 17, "b_spline", 2) * get_base1(h17, get_base1(block_data, i, "block_data", 1), "h17", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 18, "b_spline", 2) * get_base1(h18, get_base1(block_data, i, "block_data", 1), "h18", 1))), 
                            "assigning variable mu");
            }
            current_statement_begin__ = 192;
            stan::math::assign(psi1, multiply(x1, b1));
            current_statement_begin__ = 193;
            stan::math::assign(psi2, multiply(x2, b2));
            current_statement_begin__ = 194;
            stan::math::assign(psi3, multiply(x3, b3));
            current_statement_begin__ = 195;
            stan::math::assign(psi4, multiply(x4, b4));
            current_statement_begin__ = 196;
            stan::math::assign(psi5, multiply(x5, b5));
            current_statement_begin__ = 197;
            stan::math::assign(psi6, multiply(x6, b6));
            current_statement_begin__ = 198;
            stan::math::assign(psi7, multiply(x7, b7));
            current_statement_begin__ = 199;
            stan::math::assign(psi8, multiply(x8, b8));
            current_statement_begin__ = 200;
            stan::math::assign(psi9, multiply(x9, b9));
            current_statement_begin__ = 201;
            stan::math::assign(psi10, multiply(x10, b10));
            current_statement_begin__ = 202;
            stan::math::assign(psi11, multiply(x11, b11));
            current_statement_begin__ = 203;
            stan::math::assign(psi12, multiply(x12, b12));
            current_statement_begin__ = 204;
            stan::math::assign(psi13, multiply(x13, b13));
            current_statement_begin__ = 205;
            stan::math::assign(psi14, multiply(x14, b14));
            current_statement_begin__ = 206;
            stan::math::assign(psi15, multiply(x15, b15));
            current_statement_begin__ = 207;
            stan::math::assign(psi16, multiply(x16, b16));
            current_statement_begin__ = 208;
            stan::math::assign(psi17, multiply(x17, b17));
            current_statement_begin__ = 209;
            stan::math::assign(psi18, multiply(x18, b18));
            current_statement_begin__ = 210;
            stan::math::assign(psi1_pred, multiply(x1_pred, b1));
            current_statement_begin__ = 211;
            stan::math::assign(psi2_pred, multiply(x2_pred, b2));
            current_statement_begin__ = 212;
            stan::math::assign(psi3_pred, multiply(x3_pred, b3));
            current_statement_begin__ = 213;
            stan::math::assign(psi4_pred, multiply(x4_pred, b4));
            current_statement_begin__ = 214;
            stan::math::assign(psi5_pred, multiply(x5_pred, b5));
            current_statement_begin__ = 215;
            stan::math::assign(psi6_pred, multiply(x6_pred, b6));
            current_statement_begin__ = 216;
            stan::math::assign(psi7_pred, multiply(x7_pred, b7));
            current_statement_begin__ = 217;
            stan::math::assign(psi8_pred, multiply(x8_pred, b8));
            current_statement_begin__ = 218;
            stan::math::assign(psi9_pred, multiply(x9_pred, b9));
            current_statement_begin__ = 219;
            stan::math::assign(psi10_pred, multiply(x10_pred, b10));
            current_statement_begin__ = 220;
            stan::math::assign(psi11_pred, multiply(x11_pred, b11));
            current_statement_begin__ = 221;
            stan::math::assign(psi12_pred, multiply(x12_pred, b12));
            current_statement_begin__ = 222;
            stan::math::assign(psi13_pred, multiply(x13_pred, b13));
            current_statement_begin__ = 223;
            stan::math::assign(psi14_pred, multiply(x14_pred, b14));
            current_statement_begin__ = 224;
            stan::math::assign(psi15_pred, multiply(x15_pred, b15));
            current_statement_begin__ = 225;
            stan::math::assign(psi16_pred, multiply(x16_pred, b16));
            current_statement_begin__ = 226;
            stan::math::assign(psi17_pred, multiply(x17_pred, b17));
            current_statement_begin__ = 227;
            stan::math::assign(psi18_pred, multiply(x18_pred, b18));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 153;
            size_t mu_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 154;
            size_t psi1_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi1_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi1(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi1" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi1: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 155;
            size_t psi2_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi2_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi2(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi2" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi2: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 156;
            size_t psi3_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi3_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi3(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi3" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi3: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 157;
            size_t psi4_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi4_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi4(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi4" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi4: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 158;
            size_t psi5_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi5_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi5(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi5" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi5: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 159;
            size_t psi6_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi6_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi6(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi6" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi6: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 160;
            size_t psi7_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi7_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi7(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi7" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi7: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 161;
            size_t psi8_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi8_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi8(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi8" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi8: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 162;
            size_t psi9_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi9_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi9(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi9" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi9: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 163;
            size_t psi10_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi10_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi10(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi10" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi10: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 164;
            size_t psi11_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi11_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi11(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi11" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi11: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 165;
            size_t psi12_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi12_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi12(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi12" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi12: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 166;
            size_t psi13_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi13_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi13(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi13" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi13: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 167;
            size_t psi14_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi14_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi14(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi14" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi14: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 168;
            size_t psi15_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi15_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi15(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi15" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi15: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 169;
            size_t psi16_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi16_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi16(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi16" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi16: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 170;
            size_t psi17_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi17_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi17(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi17" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi17: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 171;
            size_t psi18_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi18_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi18(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi18" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi18: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 172;
            size_t psi1_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi1_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi1_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi1_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi1_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 173;
            size_t psi2_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi2_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi2_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi2_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi2_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 174;
            size_t psi3_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi3_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi3_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi3_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi3_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 175;
            size_t psi4_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi4_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi4_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi4_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi4_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 176;
            size_t psi5_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi5_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi5_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi5_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi5_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 177;
            size_t psi6_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi6_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi6_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi6_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi6_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 178;
            size_t psi7_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi7_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi7_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi7_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi7_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 179;
            size_t psi8_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi8_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi8_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi8_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi8_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 180;
            size_t psi9_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi9_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi9_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi9_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi9_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 181;
            size_t psi10_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi10_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi10_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi10_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi10_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 182;
            size_t psi11_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi11_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi11_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi11_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi11_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 183;
            size_t psi12_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi12_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi12_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi12_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi12_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 184;
            size_t psi13_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi13_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi13_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi13_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi13_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 185;
            size_t psi14_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi14_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi14_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi14_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi14_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 186;
            size_t psi15_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi15_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi15_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi15_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi15_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 187;
            size_t psi16_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi16_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi16_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi16_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi16_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 188;
            size_t psi17_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi17_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi17_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi17_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi17_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 189;
            size_t psi18_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi18_pred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi18_pred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi18_pred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi18_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 231;
            lp_accum__.add(normal_log<propto__>(stan::math::log(size_data), mu, sigma_obs));
            current_statement_begin__ = 232;
            lp_accum__.add(normal_log<propto__>(sigma_obs, 0, 2));
            current_statement_begin__ = 233;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 234;
                lp_accum__.add(normal_log<propto__>(get_base1(h1, j, "h1", 1), get_base1(psi1, j, "psi1", 1), sd_h1));
            }
            current_statement_begin__ = 235;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 236;
                lp_accum__.add(normal_log<propto__>(get_base1(h2, j, "h2", 1), get_base1(psi2, j, "psi2", 1), sd_h2));
            }
            current_statement_begin__ = 237;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 238;
                lp_accum__.add(normal_log<propto__>(get_base1(h3, j, "h3", 1), get_base1(psi3, j, "psi3", 1), sd_h3));
            }
            current_statement_begin__ = 239;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 240;
                lp_accum__.add(normal_log<propto__>(get_base1(h4, j, "h4", 1), get_base1(psi4, j, "psi4", 1), sd_h4));
            }
            current_statement_begin__ = 241;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 242;
                lp_accum__.add(normal_log<propto__>(get_base1(h5, j, "h5", 1), get_base1(psi5, j, "psi5", 1), sd_h5));
            }
            current_statement_begin__ = 243;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 244;
                lp_accum__.add(normal_log<propto__>(get_base1(h6, j, "h6", 1), get_base1(psi6, j, "psi6", 1), sd_h6));
            }
            current_statement_begin__ = 245;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 246;
                lp_accum__.add(normal_log<propto__>(get_base1(h7, j, "h7", 1), get_base1(psi7, j, "psi7", 1), sd_h7));
            }
            current_statement_begin__ = 247;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 248;
                lp_accum__.add(normal_log<propto__>(get_base1(h8, j, "h8", 1), get_base1(psi8, j, "psi8", 1), sd_h8));
            }
            current_statement_begin__ = 249;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 250;
                lp_accum__.add(normal_log<propto__>(get_base1(h9, j, "h9", 1), get_base1(psi9, j, "psi9", 1), sd_h9));
            }
            current_statement_begin__ = 251;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 252;
                lp_accum__.add(normal_log<propto__>(get_base1(h10, j, "h10", 1), get_base1(psi10, j, "psi10", 1), sd_h10));
            }
            current_statement_begin__ = 253;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 254;
                lp_accum__.add(normal_log<propto__>(get_base1(h11, j, "h11", 1), get_base1(psi11, j, "psi11", 1), sd_h11));
            }
            current_statement_begin__ = 255;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 256;
                lp_accum__.add(normal_log<propto__>(get_base1(h12, j, "h12", 1), get_base1(psi12, j, "psi12", 1), sd_h12));
            }
            current_statement_begin__ = 257;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 258;
                lp_accum__.add(normal_log<propto__>(get_base1(h13, j, "h13", 1), get_base1(psi13, j, "psi13", 1), sd_h13));
            }
            current_statement_begin__ = 259;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 260;
                lp_accum__.add(normal_log<propto__>(get_base1(h14, j, "h14", 1), get_base1(psi14, j, "psi14", 1), sd_h14));
            }
            current_statement_begin__ = 261;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 262;
                lp_accum__.add(normal_log<propto__>(get_base1(h15, j, "h15", 1), get_base1(psi15, j, "psi15", 1), sd_h15));
            }
            current_statement_begin__ = 263;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 264;
                lp_accum__.add(normal_log<propto__>(get_base1(h16, j, "h16", 1), get_base1(psi16, j, "psi16", 1), sd_h16));
            }
            current_statement_begin__ = 265;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 266;
                lp_accum__.add(normal_log<propto__>(get_base1(h17, j, "h17", 1), get_base1(psi17, j, "psi17", 1), sd_h17));
            }
            current_statement_begin__ = 267;
            for (int j = 1; j <= n_block; ++j) {
                current_statement_begin__ = 268;
                lp_accum__.add(normal_log<propto__>(get_base1(h18, j, "h18", 1), get_base1(psi18, j, "psi18", 1), sd_h18));
            }
            current_statement_begin__ = 269;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 270;
                lp_accum__.add(normal_log<propto__>(get_base1(h1_holdout, j, "h1_holdout", 1), get_base1(psi1_pred, j, "psi1_pred", 1), sd_h1));
            }
            current_statement_begin__ = 271;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 272;
                lp_accum__.add(normal_log<propto__>(get_base1(h2_holdout, j, "h2_holdout", 1), get_base1(psi2_pred, j, "psi2_pred", 1), sd_h2));
            }
            current_statement_begin__ = 273;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 274;
                lp_accum__.add(normal_log<propto__>(get_base1(h3_holdout, j, "h3_holdout", 1), get_base1(psi3_pred, j, "psi3_pred", 1), sd_h3));
            }
            current_statement_begin__ = 275;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 276;
                lp_accum__.add(normal_log<propto__>(get_base1(h4_holdout, j, "h4_holdout", 1), get_base1(psi4_pred, j, "psi4_pred", 1), sd_h4));
            }
            current_statement_begin__ = 277;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 278;
                lp_accum__.add(normal_log<propto__>(get_base1(h5_holdout, j, "h5_holdout", 1), get_base1(psi5_pred, j, "psi5_pred", 1), sd_h5));
            }
            current_statement_begin__ = 279;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 280;
                lp_accum__.add(normal_log<propto__>(get_base1(h6_holdout, j, "h6_holdout", 1), get_base1(psi6_pred, j, "psi6_pred", 1), sd_h6));
            }
            current_statement_begin__ = 281;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 282;
                lp_accum__.add(normal_log<propto__>(get_base1(h7_holdout, j, "h7_holdout", 1), get_base1(psi7_pred, j, "psi7_pred", 1), sd_h7));
            }
            current_statement_begin__ = 283;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 284;
                lp_accum__.add(normal_log<propto__>(get_base1(h8_holdout, j, "h8_holdout", 1), get_base1(psi8_pred, j, "psi8_pred", 1), sd_h8));
            }
            current_statement_begin__ = 285;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 286;
                lp_accum__.add(normal_log<propto__>(get_base1(h9_holdout, j, "h9_holdout", 1), get_base1(psi9_pred, j, "psi9_pred", 1), sd_h9));
            }
            current_statement_begin__ = 287;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 288;
                lp_accum__.add(normal_log<propto__>(get_base1(h10_holdout, j, "h10_holdout", 1), get_base1(psi10_pred, j, "psi10_pred", 1), sd_h10));
            }
            current_statement_begin__ = 289;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 290;
                lp_accum__.add(normal_log<propto__>(get_base1(h11_holdout, j, "h11_holdout", 1), get_base1(psi11_pred, j, "psi11_pred", 1), sd_h11));
            }
            current_statement_begin__ = 291;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 292;
                lp_accum__.add(normal_log<propto__>(get_base1(h12_holdout, j, "h12_holdout", 1), get_base1(psi12_pred, j, "psi12_pred", 1), sd_h12));
            }
            current_statement_begin__ = 293;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 294;
                lp_accum__.add(normal_log<propto__>(get_base1(h13_holdout, j, "h13_holdout", 1), get_base1(psi13_pred, j, "psi13_pred", 1), sd_h13));
            }
            current_statement_begin__ = 295;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 296;
                lp_accum__.add(normal_log<propto__>(get_base1(h14_holdout, j, "h14_holdout", 1), get_base1(psi14_pred, j, "psi14_pred", 1), sd_h14));
            }
            current_statement_begin__ = 297;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 298;
                lp_accum__.add(normal_log<propto__>(get_base1(h15_holdout, j, "h15_holdout", 1), get_base1(psi15_pred, j, "psi15_pred", 1), sd_h15));
            }
            current_statement_begin__ = 299;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 300;
                lp_accum__.add(normal_log<propto__>(get_base1(h16_holdout, j, "h16_holdout", 1), get_base1(psi16_pred, j, "psi16_pred", 1), sd_h16));
            }
            current_statement_begin__ = 301;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 302;
                lp_accum__.add(normal_log<propto__>(get_base1(h17_holdout, j, "h17_holdout", 1), get_base1(psi17_pred, j, "psi17_pred", 1), sd_h17));
            }
            current_statement_begin__ = 303;
            for (int j = 1; j <= n_block_pred; ++j) {
                current_statement_begin__ = 304;
                lp_accum__.add(normal_log<propto__>(get_base1(h18_holdout, j, "h18_holdout", 1), get_base1(psi18_pred, j, "psi18_pred", 1), sd_h18));
            }
            current_statement_begin__ = 305;
            for (int j = 1; j <= n_x1; ++j) {
                current_statement_begin__ = 306;
                lp_accum__.add(normal_log<propto__>(get_base1(b1, j, "b1", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 307;
            for (int j = 1; j <= n_x2; ++j) {
                current_statement_begin__ = 308;
                lp_accum__.add(normal_log<propto__>(get_base1(b2, j, "b2", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 309;
            for (int j = 1; j <= n_x3; ++j) {
                current_statement_begin__ = 310;
                lp_accum__.add(normal_log<propto__>(get_base1(b3, j, "b3", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 311;
            for (int j = 1; j <= n_x4; ++j) {
                current_statement_begin__ = 312;
                lp_accum__.add(normal_log<propto__>(get_base1(b4, j, "b4", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 313;
            for (int j = 1; j <= n_x5; ++j) {
                current_statement_begin__ = 314;
                lp_accum__.add(normal_log<propto__>(get_base1(b5, j, "b5", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 315;
            for (int j = 1; j <= n_x6; ++j) {
                current_statement_begin__ = 316;
                lp_accum__.add(normal_log<propto__>(get_base1(b6, j, "b6", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 317;
            for (int j = 1; j <= n_x7; ++j) {
                current_statement_begin__ = 318;
                lp_accum__.add(normal_log<propto__>(get_base1(b7, j, "b7", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 319;
            for (int j = 1; j <= n_x8; ++j) {
                current_statement_begin__ = 320;
                lp_accum__.add(normal_log<propto__>(get_base1(b8, j, "b8", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 321;
            for (int j = 1; j <= n_x9; ++j) {
                current_statement_begin__ = 322;
                lp_accum__.add(normal_log<propto__>(get_base1(b9, j, "b9", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 323;
            for (int j = 1; j <= n_x10; ++j) {
                current_statement_begin__ = 324;
                lp_accum__.add(normal_log<propto__>(get_base1(b10, j, "b10", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 325;
            for (int j = 1; j <= n_x11; ++j) {
                current_statement_begin__ = 326;
                lp_accum__.add(normal_log<propto__>(get_base1(b11, j, "b11", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 327;
            for (int j = 1; j <= n_x12; ++j) {
                current_statement_begin__ = 328;
                lp_accum__.add(normal_log<propto__>(get_base1(b12, j, "b12", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 329;
            for (int j = 1; j <= n_x13; ++j) {
                current_statement_begin__ = 330;
                lp_accum__.add(normal_log<propto__>(get_base1(b13, j, "b13", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 331;
            for (int j = 1; j <= n_x14; ++j) {
                current_statement_begin__ = 332;
                lp_accum__.add(normal_log<propto__>(get_base1(b14, j, "b14", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 333;
            for (int j = 1; j <= n_x15; ++j) {
                current_statement_begin__ = 334;
                lp_accum__.add(normal_log<propto__>(get_base1(b15, j, "b15", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 335;
            for (int j = 1; j <= n_x16; ++j) {
                current_statement_begin__ = 336;
                lp_accum__.add(normal_log<propto__>(get_base1(b16, j, "b16", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 337;
            for (int j = 1; j <= n_x17; ++j) {
                current_statement_begin__ = 338;
                lp_accum__.add(normal_log<propto__>(get_base1(b17, j, "b17", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 339;
            for (int j = 1; j <= n_x18; ++j) {
                current_statement_begin__ = 340;
                lp_accum__.add(normal_log<propto__>(get_base1(b18, j, "b18", 1), 0.0, 1.0));
            }
            current_statement_begin__ = 341;
            lp_accum__.add(normal_log<propto__>(sd_h1, 0.0, 2.0));
            current_statement_begin__ = 342;
            lp_accum__.add(normal_log<propto__>(sd_h2, 0.0, 2.0));
            current_statement_begin__ = 343;
            lp_accum__.add(normal_log<propto__>(sd_h3, 0.0, 2.0));
            current_statement_begin__ = 344;
            lp_accum__.add(normal_log<propto__>(sd_h4, 0.0, 2.0));
            current_statement_begin__ = 345;
            lp_accum__.add(normal_log<propto__>(sd_h5, 0.0, 2.0));
            current_statement_begin__ = 346;
            lp_accum__.add(normal_log<propto__>(sd_h6, 0.0, 2.0));
            current_statement_begin__ = 347;
            lp_accum__.add(normal_log<propto__>(sd_h7, 0.0, 2.0));
            current_statement_begin__ = 348;
            lp_accum__.add(normal_log<propto__>(sd_h8, 0.0, 2.0));
            current_statement_begin__ = 349;
            lp_accum__.add(normal_log<propto__>(sd_h9, 0.0, 2.0));
            current_statement_begin__ = 350;
            lp_accum__.add(normal_log<propto__>(sd_h10, 0.0, 2.0));
            current_statement_begin__ = 351;
            lp_accum__.add(normal_log<propto__>(sd_h11, 0.0, 2.0));
            current_statement_begin__ = 352;
            lp_accum__.add(normal_log<propto__>(sd_h12, 0.0, 2.0));
            current_statement_begin__ = 353;
            lp_accum__.add(normal_log<propto__>(sd_h13, 0.0, 2.0));
            current_statement_begin__ = 354;
            lp_accum__.add(normal_log<propto__>(sd_h14, 0.0, 2.0));
            current_statement_begin__ = 355;
            lp_accum__.add(normal_log<propto__>(sd_h15, 0.0, 2.0));
            current_statement_begin__ = 356;
            lp_accum__.add(normal_log<propto__>(sd_h16, 0.0, 2.0));
            current_statement_begin__ = 357;
            lp_accum__.add(normal_log<propto__>(sd_h17, 0.0, 2.0));
            current_statement_begin__ = 358;
            lp_accum__.add(normal_log<propto__>(sd_h18, 0.0, 2.0));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma_obs");
        names__.push_back("sd_h1");
        names__.push_back("sd_h2");
        names__.push_back("sd_h3");
        names__.push_back("sd_h4");
        names__.push_back("sd_h5");
        names__.push_back("sd_h6");
        names__.push_back("sd_h7");
        names__.push_back("sd_h8");
        names__.push_back("sd_h9");
        names__.push_back("sd_h10");
        names__.push_back("sd_h11");
        names__.push_back("sd_h12");
        names__.push_back("sd_h13");
        names__.push_back("sd_h14");
        names__.push_back("sd_h15");
        names__.push_back("sd_h16");
        names__.push_back("sd_h17");
        names__.push_back("sd_h18");
        names__.push_back("h1");
        names__.push_back("h2");
        names__.push_back("h3");
        names__.push_back("h4");
        names__.push_back("h5");
        names__.push_back("h6");
        names__.push_back("h7");
        names__.push_back("h8");
        names__.push_back("h9");
        names__.push_back("h10");
        names__.push_back("h11");
        names__.push_back("h12");
        names__.push_back("h13");
        names__.push_back("h14");
        names__.push_back("h15");
        names__.push_back("h16");
        names__.push_back("h17");
        names__.push_back("h18");
        names__.push_back("h1_holdout");
        names__.push_back("h2_holdout");
        names__.push_back("h3_holdout");
        names__.push_back("h4_holdout");
        names__.push_back("h5_holdout");
        names__.push_back("h6_holdout");
        names__.push_back("h7_holdout");
        names__.push_back("h8_holdout");
        names__.push_back("h9_holdout");
        names__.push_back("h10_holdout");
        names__.push_back("h11_holdout");
        names__.push_back("h12_holdout");
        names__.push_back("h13_holdout");
        names__.push_back("h14_holdout");
        names__.push_back("h15_holdout");
        names__.push_back("h16_holdout");
        names__.push_back("h17_holdout");
        names__.push_back("h18_holdout");
        names__.push_back("b1");
        names__.push_back("b2");
        names__.push_back("b3");
        names__.push_back("b4");
        names__.push_back("b5");
        names__.push_back("b6");
        names__.push_back("b7");
        names__.push_back("b8");
        names__.push_back("b9");
        names__.push_back("b10");
        names__.push_back("b11");
        names__.push_back("b12");
        names__.push_back("b13");
        names__.push_back("b14");
        names__.push_back("b15");
        names__.push_back("b16");
        names__.push_back("b17");
        names__.push_back("b18");
        names__.push_back("mu");
        names__.push_back("psi1");
        names__.push_back("psi2");
        names__.push_back("psi3");
        names__.push_back("psi4");
        names__.push_back("psi5");
        names__.push_back("psi6");
        names__.push_back("psi7");
        names__.push_back("psi8");
        names__.push_back("psi9");
        names__.push_back("psi10");
        names__.push_back("psi11");
        names__.push_back("psi12");
        names__.push_back("psi13");
        names__.push_back("psi14");
        names__.push_back("psi15");
        names__.push_back("psi16");
        names__.push_back("psi17");
        names__.push_back("psi18");
        names__.push_back("psi1_pred");
        names__.push_back("psi2_pred");
        names__.push_back("psi3_pred");
        names__.push_back("psi4_pred");
        names__.push_back("psi5_pred");
        names__.push_back("psi6_pred");
        names__.push_back("psi7_pred");
        names__.push_back("psi8_pred");
        names__.push_back("psi9_pred");
        names__.push_back("psi10_pred");
        names__.push_back("psi11_pred");
        names__.push_back("psi12_pred");
        names__.push_back("psi13_pred");
        names__.push_back("psi14_pred");
        names__.push_back("psi15_pred");
        names__.push_back("psi16_pred");
        names__.push_back("psi17_pred");
        names__.push_back("psi18_pred");
        names__.push_back("mu_plot_growth");
        names__.push_back("mu_plot_agr");
        names__.push_back("mu_pred");
        names__.push_back("size_plot");
        names__.push_back("size_plot_agr");
        names__.push_back("size_pred");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x4);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x5);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x6);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x7);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x8);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x9);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x10);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x11);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x12);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x13);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x14);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x15);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x16);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x17);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x18);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_spline_pred_blockmod_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigma_obs = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_obs);
        double sd_h1 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h1);
        double sd_h2 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h2);
        double sd_h3 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h3);
        double sd_h4 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h4);
        double sd_h5 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h5);
        double sd_h6 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h6);
        double sd_h7 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h7);
        double sd_h8 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h8);
        double sd_h9 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h9);
        double sd_h10 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h10);
        double sd_h11 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h11);
        double sd_h12 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h12);
        double sd_h13 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h13);
        double sd_h14 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h14);
        double sd_h15 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h15);
        double sd_h16 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h16);
        double sd_h17 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h17);
        double sd_h18 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_h18);
        Eigen::Matrix<double, Eigen::Dynamic, 1> h1 = in__.vector_constrain(n_block);
        size_t h1_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h1_j_1_max__; ++j_1__) {
            vars__.push_back(h1(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h2 = in__.vector_constrain(n_block);
        size_t h2_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h2_j_1_max__; ++j_1__) {
            vars__.push_back(h2(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h3 = in__.vector_constrain(n_block);
        size_t h3_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h3_j_1_max__; ++j_1__) {
            vars__.push_back(h3(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h4 = in__.vector_constrain(n_block);
        size_t h4_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h4_j_1_max__; ++j_1__) {
            vars__.push_back(h4(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h5 = in__.vector_constrain(n_block);
        size_t h5_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h5_j_1_max__; ++j_1__) {
            vars__.push_back(h5(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h6 = in__.vector_constrain(n_block);
        size_t h6_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h6_j_1_max__; ++j_1__) {
            vars__.push_back(h6(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h7 = in__.vector_constrain(n_block);
        size_t h7_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h7_j_1_max__; ++j_1__) {
            vars__.push_back(h7(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h8 = in__.vector_constrain(n_block);
        size_t h8_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h8_j_1_max__; ++j_1__) {
            vars__.push_back(h8(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h9 = in__.vector_constrain(n_block);
        size_t h9_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h9_j_1_max__; ++j_1__) {
            vars__.push_back(h9(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h10 = in__.vector_constrain(n_block);
        size_t h10_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h10_j_1_max__; ++j_1__) {
            vars__.push_back(h10(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h11 = in__.vector_constrain(n_block);
        size_t h11_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h11_j_1_max__; ++j_1__) {
            vars__.push_back(h11(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h12 = in__.vector_constrain(n_block);
        size_t h12_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h12_j_1_max__; ++j_1__) {
            vars__.push_back(h12(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h13 = in__.vector_constrain(n_block);
        size_t h13_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h13_j_1_max__; ++j_1__) {
            vars__.push_back(h13(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h14 = in__.vector_constrain(n_block);
        size_t h14_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h14_j_1_max__; ++j_1__) {
            vars__.push_back(h14(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h15 = in__.vector_constrain(n_block);
        size_t h15_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h15_j_1_max__; ++j_1__) {
            vars__.push_back(h15(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h16 = in__.vector_constrain(n_block);
        size_t h16_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h16_j_1_max__; ++j_1__) {
            vars__.push_back(h16(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h17 = in__.vector_constrain(n_block);
        size_t h17_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h17_j_1_max__; ++j_1__) {
            vars__.push_back(h17(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h18 = in__.vector_constrain(n_block);
        size_t h18_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h18_j_1_max__; ++j_1__) {
            vars__.push_back(h18(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h1_holdout = in__.vector_constrain(n_block_pred);
        size_t h1_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h1_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h1_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h2_holdout = in__.vector_constrain(n_block_pred);
        size_t h2_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h2_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h2_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h3_holdout = in__.vector_constrain(n_block_pred);
        size_t h3_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h3_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h3_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h4_holdout = in__.vector_constrain(n_block_pred);
        size_t h4_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h4_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h4_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h5_holdout = in__.vector_constrain(n_block_pred);
        size_t h5_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h5_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h5_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h6_holdout = in__.vector_constrain(n_block_pred);
        size_t h6_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h6_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h6_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h7_holdout = in__.vector_constrain(n_block_pred);
        size_t h7_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h7_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h7_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h8_holdout = in__.vector_constrain(n_block_pred);
        size_t h8_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h8_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h8_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h9_holdout = in__.vector_constrain(n_block_pred);
        size_t h9_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h9_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h9_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h10_holdout = in__.vector_constrain(n_block_pred);
        size_t h10_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h10_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h10_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h11_holdout = in__.vector_constrain(n_block_pred);
        size_t h11_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h11_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h11_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h12_holdout = in__.vector_constrain(n_block_pred);
        size_t h12_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h12_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h12_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h13_holdout = in__.vector_constrain(n_block_pred);
        size_t h13_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h13_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h13_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h14_holdout = in__.vector_constrain(n_block_pred);
        size_t h14_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h14_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h14_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h15_holdout = in__.vector_constrain(n_block_pred);
        size_t h15_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h15_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h15_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h16_holdout = in__.vector_constrain(n_block_pred);
        size_t h16_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h16_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h16_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h17_holdout = in__.vector_constrain(n_block_pred);
        size_t h17_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h17_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h17_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> h18_holdout = in__.vector_constrain(n_block_pred);
        size_t h18_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h18_holdout_j_1_max__; ++j_1__) {
            vars__.push_back(h18_holdout(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b1 = in__.vector_constrain(n_x1);
        size_t b1_j_1_max__ = n_x1;
        for (size_t j_1__ = 0; j_1__ < b1_j_1_max__; ++j_1__) {
            vars__.push_back(b1(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b2 = in__.vector_constrain(n_x2);
        size_t b2_j_1_max__ = n_x2;
        for (size_t j_1__ = 0; j_1__ < b2_j_1_max__; ++j_1__) {
            vars__.push_back(b2(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b3 = in__.vector_constrain(n_x3);
        size_t b3_j_1_max__ = n_x3;
        for (size_t j_1__ = 0; j_1__ < b3_j_1_max__; ++j_1__) {
            vars__.push_back(b3(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b4 = in__.vector_constrain(n_x4);
        size_t b4_j_1_max__ = n_x4;
        for (size_t j_1__ = 0; j_1__ < b4_j_1_max__; ++j_1__) {
            vars__.push_back(b4(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b5 = in__.vector_constrain(n_x5);
        size_t b5_j_1_max__ = n_x5;
        for (size_t j_1__ = 0; j_1__ < b5_j_1_max__; ++j_1__) {
            vars__.push_back(b5(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b6 = in__.vector_constrain(n_x6);
        size_t b6_j_1_max__ = n_x6;
        for (size_t j_1__ = 0; j_1__ < b6_j_1_max__; ++j_1__) {
            vars__.push_back(b6(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b7 = in__.vector_constrain(n_x7);
        size_t b7_j_1_max__ = n_x7;
        for (size_t j_1__ = 0; j_1__ < b7_j_1_max__; ++j_1__) {
            vars__.push_back(b7(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b8 = in__.vector_constrain(n_x8);
        size_t b8_j_1_max__ = n_x8;
        for (size_t j_1__ = 0; j_1__ < b8_j_1_max__; ++j_1__) {
            vars__.push_back(b8(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b9 = in__.vector_constrain(n_x9);
        size_t b9_j_1_max__ = n_x9;
        for (size_t j_1__ = 0; j_1__ < b9_j_1_max__; ++j_1__) {
            vars__.push_back(b9(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b10 = in__.vector_constrain(n_x10);
        size_t b10_j_1_max__ = n_x10;
        for (size_t j_1__ = 0; j_1__ < b10_j_1_max__; ++j_1__) {
            vars__.push_back(b10(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b11 = in__.vector_constrain(n_x11);
        size_t b11_j_1_max__ = n_x11;
        for (size_t j_1__ = 0; j_1__ < b11_j_1_max__; ++j_1__) {
            vars__.push_back(b11(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b12 = in__.vector_constrain(n_x12);
        size_t b12_j_1_max__ = n_x12;
        for (size_t j_1__ = 0; j_1__ < b12_j_1_max__; ++j_1__) {
            vars__.push_back(b12(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b13 = in__.vector_constrain(n_x13);
        size_t b13_j_1_max__ = n_x13;
        for (size_t j_1__ = 0; j_1__ < b13_j_1_max__; ++j_1__) {
            vars__.push_back(b13(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b14 = in__.vector_constrain(n_x14);
        size_t b14_j_1_max__ = n_x14;
        for (size_t j_1__ = 0; j_1__ < b14_j_1_max__; ++j_1__) {
            vars__.push_back(b14(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b15 = in__.vector_constrain(n_x15);
        size_t b15_j_1_max__ = n_x15;
        for (size_t j_1__ = 0; j_1__ < b15_j_1_max__; ++j_1__) {
            vars__.push_back(b15(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b16 = in__.vector_constrain(n_x16);
        size_t b16_j_1_max__ = n_x16;
        for (size_t j_1__ = 0; j_1__ < b16_j_1_max__; ++j_1__) {
            vars__.push_back(b16(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b17 = in__.vector_constrain(n_x17);
        size_t b17_j_1_max__ = n_x17;
        for (size_t j_1__ = 0; j_1__ < b17_j_1_max__; ++j_1__) {
            vars__.push_back(b17(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b18 = in__.vector_constrain(n_x18);
        size_t b18_j_1_max__ = n_x18;
        for (size_t j_1__ = 0; j_1__ < b18_j_1_max__; ++j_1__) {
            vars__.push_back(b18(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 153;
            validate_non_negative_index("mu", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu(n);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 154;
            validate_non_negative_index("psi1", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi1(n_block);
            stan::math::initialize(psi1, DUMMY_VAR__);
            stan::math::fill(psi1, DUMMY_VAR__);
            current_statement_begin__ = 155;
            validate_non_negative_index("psi2", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi2(n_block);
            stan::math::initialize(psi2, DUMMY_VAR__);
            stan::math::fill(psi2, DUMMY_VAR__);
            current_statement_begin__ = 156;
            validate_non_negative_index("psi3", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi3(n_block);
            stan::math::initialize(psi3, DUMMY_VAR__);
            stan::math::fill(psi3, DUMMY_VAR__);
            current_statement_begin__ = 157;
            validate_non_negative_index("psi4", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi4(n_block);
            stan::math::initialize(psi4, DUMMY_VAR__);
            stan::math::fill(psi4, DUMMY_VAR__);
            current_statement_begin__ = 158;
            validate_non_negative_index("psi5", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi5(n_block);
            stan::math::initialize(psi5, DUMMY_VAR__);
            stan::math::fill(psi5, DUMMY_VAR__);
            current_statement_begin__ = 159;
            validate_non_negative_index("psi6", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi6(n_block);
            stan::math::initialize(psi6, DUMMY_VAR__);
            stan::math::fill(psi6, DUMMY_VAR__);
            current_statement_begin__ = 160;
            validate_non_negative_index("psi7", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi7(n_block);
            stan::math::initialize(psi7, DUMMY_VAR__);
            stan::math::fill(psi7, DUMMY_VAR__);
            current_statement_begin__ = 161;
            validate_non_negative_index("psi8", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi8(n_block);
            stan::math::initialize(psi8, DUMMY_VAR__);
            stan::math::fill(psi8, DUMMY_VAR__);
            current_statement_begin__ = 162;
            validate_non_negative_index("psi9", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi9(n_block);
            stan::math::initialize(psi9, DUMMY_VAR__);
            stan::math::fill(psi9, DUMMY_VAR__);
            current_statement_begin__ = 163;
            validate_non_negative_index("psi10", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi10(n_block);
            stan::math::initialize(psi10, DUMMY_VAR__);
            stan::math::fill(psi10, DUMMY_VAR__);
            current_statement_begin__ = 164;
            validate_non_negative_index("psi11", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi11(n_block);
            stan::math::initialize(psi11, DUMMY_VAR__);
            stan::math::fill(psi11, DUMMY_VAR__);
            current_statement_begin__ = 165;
            validate_non_negative_index("psi12", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi12(n_block);
            stan::math::initialize(psi12, DUMMY_VAR__);
            stan::math::fill(psi12, DUMMY_VAR__);
            current_statement_begin__ = 166;
            validate_non_negative_index("psi13", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi13(n_block);
            stan::math::initialize(psi13, DUMMY_VAR__);
            stan::math::fill(psi13, DUMMY_VAR__);
            current_statement_begin__ = 167;
            validate_non_negative_index("psi14", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi14(n_block);
            stan::math::initialize(psi14, DUMMY_VAR__);
            stan::math::fill(psi14, DUMMY_VAR__);
            current_statement_begin__ = 168;
            validate_non_negative_index("psi15", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi15(n_block);
            stan::math::initialize(psi15, DUMMY_VAR__);
            stan::math::fill(psi15, DUMMY_VAR__);
            current_statement_begin__ = 169;
            validate_non_negative_index("psi16", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi16(n_block);
            stan::math::initialize(psi16, DUMMY_VAR__);
            stan::math::fill(psi16, DUMMY_VAR__);
            current_statement_begin__ = 170;
            validate_non_negative_index("psi17", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi17(n_block);
            stan::math::initialize(psi17, DUMMY_VAR__);
            stan::math::fill(psi17, DUMMY_VAR__);
            current_statement_begin__ = 171;
            validate_non_negative_index("psi18", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi18(n_block);
            stan::math::initialize(psi18, DUMMY_VAR__);
            stan::math::fill(psi18, DUMMY_VAR__);
            current_statement_begin__ = 172;
            validate_non_negative_index("psi1_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi1_pred(n_block_pred);
            stan::math::initialize(psi1_pred, DUMMY_VAR__);
            stan::math::fill(psi1_pred, DUMMY_VAR__);
            current_statement_begin__ = 173;
            validate_non_negative_index("psi2_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi2_pred(n_block_pred);
            stan::math::initialize(psi2_pred, DUMMY_VAR__);
            stan::math::fill(psi2_pred, DUMMY_VAR__);
            current_statement_begin__ = 174;
            validate_non_negative_index("psi3_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi3_pred(n_block_pred);
            stan::math::initialize(psi3_pred, DUMMY_VAR__);
            stan::math::fill(psi3_pred, DUMMY_VAR__);
            current_statement_begin__ = 175;
            validate_non_negative_index("psi4_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi4_pred(n_block_pred);
            stan::math::initialize(psi4_pred, DUMMY_VAR__);
            stan::math::fill(psi4_pred, DUMMY_VAR__);
            current_statement_begin__ = 176;
            validate_non_negative_index("psi5_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi5_pred(n_block_pred);
            stan::math::initialize(psi5_pred, DUMMY_VAR__);
            stan::math::fill(psi5_pred, DUMMY_VAR__);
            current_statement_begin__ = 177;
            validate_non_negative_index("psi6_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi6_pred(n_block_pred);
            stan::math::initialize(psi6_pred, DUMMY_VAR__);
            stan::math::fill(psi6_pred, DUMMY_VAR__);
            current_statement_begin__ = 178;
            validate_non_negative_index("psi7_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi7_pred(n_block_pred);
            stan::math::initialize(psi7_pred, DUMMY_VAR__);
            stan::math::fill(psi7_pred, DUMMY_VAR__);
            current_statement_begin__ = 179;
            validate_non_negative_index("psi8_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi8_pred(n_block_pred);
            stan::math::initialize(psi8_pred, DUMMY_VAR__);
            stan::math::fill(psi8_pred, DUMMY_VAR__);
            current_statement_begin__ = 180;
            validate_non_negative_index("psi9_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi9_pred(n_block_pred);
            stan::math::initialize(psi9_pred, DUMMY_VAR__);
            stan::math::fill(psi9_pred, DUMMY_VAR__);
            current_statement_begin__ = 181;
            validate_non_negative_index("psi10_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi10_pred(n_block_pred);
            stan::math::initialize(psi10_pred, DUMMY_VAR__);
            stan::math::fill(psi10_pred, DUMMY_VAR__);
            current_statement_begin__ = 182;
            validate_non_negative_index("psi11_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi11_pred(n_block_pred);
            stan::math::initialize(psi11_pred, DUMMY_VAR__);
            stan::math::fill(psi11_pred, DUMMY_VAR__);
            current_statement_begin__ = 183;
            validate_non_negative_index("psi12_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi12_pred(n_block_pred);
            stan::math::initialize(psi12_pred, DUMMY_VAR__);
            stan::math::fill(psi12_pred, DUMMY_VAR__);
            current_statement_begin__ = 184;
            validate_non_negative_index("psi13_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi13_pred(n_block_pred);
            stan::math::initialize(psi13_pred, DUMMY_VAR__);
            stan::math::fill(psi13_pred, DUMMY_VAR__);
            current_statement_begin__ = 185;
            validate_non_negative_index("psi14_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi14_pred(n_block_pred);
            stan::math::initialize(psi14_pred, DUMMY_VAR__);
            stan::math::fill(psi14_pred, DUMMY_VAR__);
            current_statement_begin__ = 186;
            validate_non_negative_index("psi15_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi15_pred(n_block_pred);
            stan::math::initialize(psi15_pred, DUMMY_VAR__);
            stan::math::fill(psi15_pred, DUMMY_VAR__);
            current_statement_begin__ = 187;
            validate_non_negative_index("psi16_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi16_pred(n_block_pred);
            stan::math::initialize(psi16_pred, DUMMY_VAR__);
            stan::math::fill(psi16_pred, DUMMY_VAR__);
            current_statement_begin__ = 188;
            validate_non_negative_index("psi17_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi17_pred(n_block_pred);
            stan::math::initialize(psi17_pred, DUMMY_VAR__);
            stan::math::fill(psi17_pred, DUMMY_VAR__);
            current_statement_begin__ = 189;
            validate_non_negative_index("psi18_pred", "n_block_pred", n_block_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi18_pred(n_block_pred);
            stan::math::initialize(psi18_pred, DUMMY_VAR__);
            stan::math::fill(psi18_pred, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 190;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 191;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((((((((((((((((((get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 1, "b_spline", 2) * get_base1(h1, get_base1(block_data, i, "block_data", 1), "h1", 1)) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 2, "b_spline", 2) * get_base1(h2, get_base1(block_data, i, "block_data", 1), "h2", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 3, "b_spline", 2) * get_base1(h3, get_base1(block_data, i, "block_data", 1), "h3", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 4, "b_spline", 2) * get_base1(h4, get_base1(block_data, i, "block_data", 1), "h4", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 5, "b_spline", 2) * get_base1(h5, get_base1(block_data, i, "block_data", 1), "h5", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 6, "b_spline", 2) * get_base1(h6, get_base1(block_data, i, "block_data", 1), "h6", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 7, "b_spline", 2) * get_base1(h7, get_base1(block_data, i, "block_data", 1), "h7", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 8, "b_spline", 2) * get_base1(h8, get_base1(block_data, i, "block_data", 1), "h8", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 9, "b_spline", 2) * get_base1(h9, get_base1(block_data, i, "block_data", 1), "h9", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 10, "b_spline", 2) * get_base1(h10, get_base1(block_data, i, "block_data", 1), "h10", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 11, "b_spline", 2) * get_base1(h11, get_base1(block_data, i, "block_data", 1), "h11", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 12, "b_spline", 2) * get_base1(h12, get_base1(block_data, i, "block_data", 1), "h12", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 13, "b_spline", 2) * get_base1(h13, get_base1(block_data, i, "block_data", 1), "h13", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 14, "b_spline", 2) * get_base1(h14, get_base1(block_data, i, "block_data", 1), "h14", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 15, "b_spline", 2) * get_base1(h15, get_base1(block_data, i, "block_data", 1), "h15", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 16, "b_spline", 2) * get_base1(h16, get_base1(block_data, i, "block_data", 1), "h16", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 17, "b_spline", 2) * get_base1(h17, get_base1(block_data, i, "block_data", 1), "h17", 1))) + (get_base1(get_base1(b_spline, get_base1(age_index, i, "age_index", 1), "b_spline", 1), 18, "b_spline", 2) * get_base1(h18, get_base1(block_data, i, "block_data", 1), "h18", 1))), 
                            "assigning variable mu");
            }
            current_statement_begin__ = 192;
            stan::math::assign(psi1, multiply(x1, b1));
            current_statement_begin__ = 193;
            stan::math::assign(psi2, multiply(x2, b2));
            current_statement_begin__ = 194;
            stan::math::assign(psi3, multiply(x3, b3));
            current_statement_begin__ = 195;
            stan::math::assign(psi4, multiply(x4, b4));
            current_statement_begin__ = 196;
            stan::math::assign(psi5, multiply(x5, b5));
            current_statement_begin__ = 197;
            stan::math::assign(psi6, multiply(x6, b6));
            current_statement_begin__ = 198;
            stan::math::assign(psi7, multiply(x7, b7));
            current_statement_begin__ = 199;
            stan::math::assign(psi8, multiply(x8, b8));
            current_statement_begin__ = 200;
            stan::math::assign(psi9, multiply(x9, b9));
            current_statement_begin__ = 201;
            stan::math::assign(psi10, multiply(x10, b10));
            current_statement_begin__ = 202;
            stan::math::assign(psi11, multiply(x11, b11));
            current_statement_begin__ = 203;
            stan::math::assign(psi12, multiply(x12, b12));
            current_statement_begin__ = 204;
            stan::math::assign(psi13, multiply(x13, b13));
            current_statement_begin__ = 205;
            stan::math::assign(psi14, multiply(x14, b14));
            current_statement_begin__ = 206;
            stan::math::assign(psi15, multiply(x15, b15));
            current_statement_begin__ = 207;
            stan::math::assign(psi16, multiply(x16, b16));
            current_statement_begin__ = 208;
            stan::math::assign(psi17, multiply(x17, b17));
            current_statement_begin__ = 209;
            stan::math::assign(psi18, multiply(x18, b18));
            current_statement_begin__ = 210;
            stan::math::assign(psi1_pred, multiply(x1_pred, b1));
            current_statement_begin__ = 211;
            stan::math::assign(psi2_pred, multiply(x2_pred, b2));
            current_statement_begin__ = 212;
            stan::math::assign(psi3_pred, multiply(x3_pred, b3));
            current_statement_begin__ = 213;
            stan::math::assign(psi4_pred, multiply(x4_pred, b4));
            current_statement_begin__ = 214;
            stan::math::assign(psi5_pred, multiply(x5_pred, b5));
            current_statement_begin__ = 215;
            stan::math::assign(psi6_pred, multiply(x6_pred, b6));
            current_statement_begin__ = 216;
            stan::math::assign(psi7_pred, multiply(x7_pred, b7));
            current_statement_begin__ = 217;
            stan::math::assign(psi8_pred, multiply(x8_pred, b8));
            current_statement_begin__ = 218;
            stan::math::assign(psi9_pred, multiply(x9_pred, b9));
            current_statement_begin__ = 219;
            stan::math::assign(psi10_pred, multiply(x10_pred, b10));
            current_statement_begin__ = 220;
            stan::math::assign(psi11_pred, multiply(x11_pred, b11));
            current_statement_begin__ = 221;
            stan::math::assign(psi12_pred, multiply(x12_pred, b12));
            current_statement_begin__ = 222;
            stan::math::assign(psi13_pred, multiply(x13_pred, b13));
            current_statement_begin__ = 223;
            stan::math::assign(psi14_pred, multiply(x14_pred, b14));
            current_statement_begin__ = 224;
            stan::math::assign(psi15_pred, multiply(x15_pred, b15));
            current_statement_begin__ = 225;
            stan::math::assign(psi16_pred, multiply(x16_pred, b16));
            current_statement_begin__ = 226;
            stan::math::assign(psi17_pred, multiply(x17_pred, b17));
            current_statement_begin__ = 227;
            stan::math::assign(psi18_pred, multiply(x18_pred, b18));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t mu_j_1_max__ = n;
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    vars__.push_back(mu(j_1__));
                }
                size_t psi1_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi1_j_1_max__; ++j_1__) {
                    vars__.push_back(psi1(j_1__));
                }
                size_t psi2_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi2_j_1_max__; ++j_1__) {
                    vars__.push_back(psi2(j_1__));
                }
                size_t psi3_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi3_j_1_max__; ++j_1__) {
                    vars__.push_back(psi3(j_1__));
                }
                size_t psi4_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi4_j_1_max__; ++j_1__) {
                    vars__.push_back(psi4(j_1__));
                }
                size_t psi5_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi5_j_1_max__; ++j_1__) {
                    vars__.push_back(psi5(j_1__));
                }
                size_t psi6_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi6_j_1_max__; ++j_1__) {
                    vars__.push_back(psi6(j_1__));
                }
                size_t psi7_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi7_j_1_max__; ++j_1__) {
                    vars__.push_back(psi7(j_1__));
                }
                size_t psi8_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi8_j_1_max__; ++j_1__) {
                    vars__.push_back(psi8(j_1__));
                }
                size_t psi9_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi9_j_1_max__; ++j_1__) {
                    vars__.push_back(psi9(j_1__));
                }
                size_t psi10_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi10_j_1_max__; ++j_1__) {
                    vars__.push_back(psi10(j_1__));
                }
                size_t psi11_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi11_j_1_max__; ++j_1__) {
                    vars__.push_back(psi11(j_1__));
                }
                size_t psi12_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi12_j_1_max__; ++j_1__) {
                    vars__.push_back(psi12(j_1__));
                }
                size_t psi13_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi13_j_1_max__; ++j_1__) {
                    vars__.push_back(psi13(j_1__));
                }
                size_t psi14_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi14_j_1_max__; ++j_1__) {
                    vars__.push_back(psi14(j_1__));
                }
                size_t psi15_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi15_j_1_max__; ++j_1__) {
                    vars__.push_back(psi15(j_1__));
                }
                size_t psi16_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi16_j_1_max__; ++j_1__) {
                    vars__.push_back(psi16(j_1__));
                }
                size_t psi17_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi17_j_1_max__; ++j_1__) {
                    vars__.push_back(psi17(j_1__));
                }
                size_t psi18_j_1_max__ = n_block;
                for (size_t j_1__ = 0; j_1__ < psi18_j_1_max__; ++j_1__) {
                    vars__.push_back(psi18(j_1__));
                }
                size_t psi1_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi1_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi1_pred(j_1__));
                }
                size_t psi2_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi2_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi2_pred(j_1__));
                }
                size_t psi3_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi3_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi3_pred(j_1__));
                }
                size_t psi4_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi4_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi4_pred(j_1__));
                }
                size_t psi5_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi5_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi5_pred(j_1__));
                }
                size_t psi6_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi6_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi6_pred(j_1__));
                }
                size_t psi7_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi7_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi7_pred(j_1__));
                }
                size_t psi8_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi8_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi8_pred(j_1__));
                }
                size_t psi9_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi9_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi9_pred(j_1__));
                }
                size_t psi10_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi10_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi10_pred(j_1__));
                }
                size_t psi11_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi11_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi11_pred(j_1__));
                }
                size_t psi12_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi12_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi12_pred(j_1__));
                }
                size_t psi13_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi13_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi13_pred(j_1__));
                }
                size_t psi14_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi14_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi14_pred(j_1__));
                }
                size_t psi15_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi15_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi15_pred(j_1__));
                }
                size_t psi16_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi16_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi16_pred(j_1__));
                }
                size_t psi17_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi17_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi17_pred(j_1__));
                }
                size_t psi18_pred_j_1_max__ = n_block_pred;
                for (size_t j_1__ = 0; j_1__ < psi18_pred_j_1_max__; ++j_1__) {
                    vars__.push_back(psi18_pred(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 362;
            validate_non_negative_index("mu_plot_growth", "n_plot", n_plot);
            validate_non_negative_index("mu_plot_growth", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mu_plot_growth(n_plot, n_block);
            stan::math::initialize(mu_plot_growth, DUMMY_VAR__);
            stan::math::fill(mu_plot_growth, DUMMY_VAR__);
            current_statement_begin__ = 363;
            validate_non_negative_index("mu_plot_agr", "n_plot", n_plot);
            validate_non_negative_index("mu_plot_agr", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mu_plot_agr(n_plot, n_block);
            stan::math::initialize(mu_plot_agr, DUMMY_VAR__);
            stan::math::fill(mu_plot_agr, DUMMY_VAR__);
            current_statement_begin__ = 364;
            validate_non_negative_index("mu_pred", "n_pred", n_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_pred(n_pred);
            stan::math::initialize(mu_pred, DUMMY_VAR__);
            stan::math::fill(mu_pred, DUMMY_VAR__);
            current_statement_begin__ = 365;
            validate_non_negative_index("size_plot", "n_plot", n_plot);
            validate_non_negative_index("size_plot", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> size_plot(n_plot, n_block);
            stan::math::initialize(size_plot, DUMMY_VAR__);
            stan::math::fill(size_plot, DUMMY_VAR__);
            current_statement_begin__ = 366;
            validate_non_negative_index("size_plot_agr", "n_plot", n_plot);
            validate_non_negative_index("size_plot_agr", "n_block", n_block);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> size_plot_agr(n_plot, n_block);
            stan::math::initialize(size_plot_agr, DUMMY_VAR__);
            stan::math::fill(size_plot_agr, DUMMY_VAR__);
            current_statement_begin__ = 367;
            validate_non_negative_index("size_pred", "n_pred", n_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> size_pred(n_pred);
            stan::math::initialize(size_pred, DUMMY_VAR__);
            stan::math::fill(size_pred, DUMMY_VAR__);
            current_statement_begin__ = 368;
            validate_non_negative_index("log_lik", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(n);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 370;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 371;
                for (int j = 1; j <= n_block; ++j) {
                    current_statement_begin__ = 372;
                    stan::model::assign(mu_plot_growth, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                ((((((((((((((((((get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 1, "b_spline_plot", 3) * get_base1(h1, j, "h1", 1)) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 2, "b_spline_plot", 3) * get_base1(h2, j, "h2", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 3, "b_spline_plot", 3) * get_base1(h3, j, "h3", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 4, "b_spline_plot", 3) * get_base1(h4, j, "h4", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 5, "b_spline_plot", 3) * get_base1(h5, j, "h5", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 6, "b_spline_plot", 3) * get_base1(h6, j, "h6", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 7, "b_spline_plot", 3) * get_base1(h7, j, "h7", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 8, "b_spline_plot", 3) * get_base1(h8, j, "h8", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 9, "b_spline_plot", 3) * get_base1(h9, j, "h9", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 10, "b_spline_plot", 3) * get_base1(h10, j, "h10", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 11, "b_spline_plot", 3) * get_base1(h11, j, "h11", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 12, "b_spline_plot", 3) * get_base1(h12, j, "h12", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 13, "b_spline_plot", 3) * get_base1(h13, j, "h13", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 14, "b_spline_plot", 3) * get_base1(h14, j, "h14", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 15, "b_spline_plot", 3) * get_base1(h15, j, "h15", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 16, "b_spline_plot", 3) * get_base1(h16, j, "h16", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 17, "b_spline_plot", 3) * get_base1(h17, j, "h17", 1))) + (get_base1(get_base1(get_base1(b_spline_plot, i, "b_spline_plot", 1), j, "b_spline_plot", 2), 18, "b_spline_plot", 3) * get_base1(h18, j, "h18", 1))), 
                                "assigning variable mu_plot_growth");
                }
            }
            current_statement_begin__ = 373;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 374;
                for (int j = 1; j <= n_block; ++j) {
                    current_statement_begin__ = 375;
                    stan::model::assign(size_plot, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                stan::math::exp(get_base1(mu_plot_growth, i, j, "mu_plot_growth", 1)), 
                                "assigning variable size_plot");
                }
            }
            current_statement_begin__ = 376;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 377;
                for (int j = 1; j <= n_block; ++j) {
                    current_statement_begin__ = 378;
                    stan::model::assign(mu_plot_agr, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                ((((((((((((((((((get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 1, "b_spline_deriv", 3) * get_base1(h1, j, "h1", 1)) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 2, "b_spline_deriv", 3) * get_base1(h2, j, "h2", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 3, "b_spline_deriv", 3) * get_base1(h3, j, "h3", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 4, "b_spline_deriv", 3) * get_base1(h4, j, "h4", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 5, "b_spline_deriv", 3) * get_base1(h5, j, "h5", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 6, "b_spline_deriv", 3) * get_base1(h6, j, "h6", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 7, "b_spline_deriv", 3) * get_base1(h7, j, "h7", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 8, "b_spline_deriv", 3) * get_base1(h8, j, "h8", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 9, "b_spline_deriv", 3) * get_base1(h9, j, "h9", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 10, "b_spline_deriv", 3) * get_base1(h10, j, "h10", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 11, "b_spline_deriv", 3) * get_base1(h11, j, "h11", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 12, "b_spline_deriv", 3) * get_base1(h12, j, "h12", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 13, "b_spline_deriv", 3) * get_base1(h13, j, "h13", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 14, "b_spline_deriv", 3) * get_base1(h14, j, "h14", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 15, "b_spline_deriv", 3) * get_base1(h15, j, "h15", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 16, "b_spline_deriv", 3) * get_base1(h16, j, "h16", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 17, "b_spline_deriv", 3) * get_base1(h17, j, "h17", 1))) + (get_base1(get_base1(get_base1(b_spline_deriv, i, "b_spline_deriv", 1), j, "b_spline_deriv", 2), 18, "b_spline_deriv", 3) * get_base1(h18, j, "h18", 1))), 
                                "assigning variable mu_plot_agr");
                }
            }
            current_statement_begin__ = 379;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 380;
                for (int j = 1; j <= n_block; ++j) {
                    current_statement_begin__ = 381;
                    stan::model::assign(size_plot_agr, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                stan::math::exp(get_base1(mu_plot_agr, i, j, "mu_plot_agr", 1)), 
                                "assigning variable size_plot_agr");
                }
            }
            current_statement_begin__ = 382;
            for (int i = 1; i <= n_pred; ++i) {
                current_statement_begin__ = 383;
                stan::model::assign(mu_pred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((((((((((((((((((get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 1, "b_spline_pred", 2) * get_base1(h1_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h1_holdout", 1)) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 2, "b_spline_pred", 2) * get_base1(h2_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h2_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 3, "b_spline_pred", 2) * get_base1(h3_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h3_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 4, "b_spline_pred", 2) * get_base1(h4_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h4_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 5, "b_spline_pred", 2) * get_base1(h5_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h5_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 6, "b_spline_pred", 2) * get_base1(h6_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h6_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 7, "b_spline_pred", 2) * get_base1(h7_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h7_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 8, "b_spline_pred", 2) * get_base1(h8_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h8_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 9, "b_spline_pred", 2) * get_base1(h9_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h9_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 10, "b_spline_pred", 2) * get_base1(h10_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h10_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 11, "b_spline_pred", 2) * get_base1(h11_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h11_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 12, "b_spline_pred", 2) * get_base1(h12_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h12_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 13, "b_spline_pred", 2) * get_base1(h13_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h13_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 14, "b_spline_pred", 2) * get_base1(h14_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h14_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 15, "b_spline_pred", 2) * get_base1(h15_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h15_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 16, "b_spline_pred", 2) * get_base1(h16_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h16_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 17, "b_spline_pred", 2) * get_base1(h17_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h17_holdout", 1))) + (get_base1(get_base1(b_spline_pred, get_base1(age_index_pred, i, "age_index_pred", 1), "b_spline_pred", 1), 18, "b_spline_pred", 2) * get_base1(h18_holdout, get_base1(block_holdout, i, "block_holdout", 1), "h18_holdout", 1))), 
                            "assigning variable mu_pred");
            }
            current_statement_begin__ = 384;
            for (int i = 1; i <= n_pred; ++i) {
                current_statement_begin__ = 385;
                stan::model::assign(size_pred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(mu_pred, i, "mu_pred", 1)), 
                            "assigning variable size_pred");
            }
            current_statement_begin__ = 386;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 387;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_log(stan::math::log(get_base1(size_data, i, "size_data", 1)), get_base1(mu, i, "mu", 1), sigma_obs), 
                            "assigning variable log_lik");
            }
            // validate, write generated quantities
            current_statement_begin__ = 362;
            size_t mu_plot_growth_j_2_max__ = n_block;
            size_t mu_plot_growth_j_1_max__ = n_plot;
            for (size_t j_2__ = 0; j_2__ < mu_plot_growth_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_plot_growth_j_1_max__; ++j_1__) {
                    vars__.push_back(mu_plot_growth(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 363;
            size_t mu_plot_agr_j_2_max__ = n_block;
            size_t mu_plot_agr_j_1_max__ = n_plot;
            for (size_t j_2__ = 0; j_2__ < mu_plot_agr_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_plot_agr_j_1_max__; ++j_1__) {
                    vars__.push_back(mu_plot_agr(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 364;
            size_t mu_pred_j_1_max__ = n_pred;
            for (size_t j_1__ = 0; j_1__ < mu_pred_j_1_max__; ++j_1__) {
                vars__.push_back(mu_pred(j_1__));
            }
            current_statement_begin__ = 365;
            check_greater_or_equal(function__, "size_plot", size_plot, 0);
            size_t size_plot_j_2_max__ = n_block;
            size_t size_plot_j_1_max__ = n_plot;
            for (size_t j_2__ = 0; j_2__ < size_plot_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < size_plot_j_1_max__; ++j_1__) {
                    vars__.push_back(size_plot(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 366;
            check_greater_or_equal(function__, "size_plot_agr", size_plot_agr, 0);
            size_t size_plot_agr_j_2_max__ = n_block;
            size_t size_plot_agr_j_1_max__ = n_plot;
            for (size_t j_2__ = 0; j_2__ < size_plot_agr_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < size_plot_agr_j_1_max__; ++j_1__) {
                    vars__.push_back(size_plot_agr(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 367;
            check_greater_or_equal(function__, "size_pred", size_pred, 0);
            size_t size_pred_j_1_max__ = n_pred;
            for (size_t j_1__ = 0; j_1__ < size_pred_j_1_max__; ++j_1__) {
                vars__.push_back(size_pred(j_1__));
            }
            current_statement_begin__ = 368;
            size_t log_lik_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_spline_pred_blockmod";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h18";
        param_names__.push_back(param_name_stream__.str());
        size_t h1_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h2_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h3_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h3_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h4_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h4_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h5_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h5_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h6_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h6_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h7_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h7_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h8_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h8_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h9_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h9_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h10_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h10_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h11_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h11_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h12_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h12_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h13_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h13_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h14_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h14_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h15_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h15_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h16_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h16_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h17_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h17_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h18_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h18_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h1_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h1_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h2_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h2_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h3_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h3_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h4_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h4_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h5_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h5_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h6_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h6_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h7_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h7_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h8_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h8_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h9_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h9_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h10_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h10_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h11_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h11_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h12_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h12_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h13_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h13_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h14_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h14_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h15_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h15_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h16_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h16_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h17_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h17_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h18_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h18_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b1_j_1_max__ = n_x1;
        for (size_t j_1__ = 0; j_1__ < b1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b2_j_1_max__ = n_x2;
        for (size_t j_1__ = 0; j_1__ < b2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b3_j_1_max__ = n_x3;
        for (size_t j_1__ = 0; j_1__ < b3_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b3" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b4_j_1_max__ = n_x4;
        for (size_t j_1__ = 0; j_1__ < b4_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b4" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b5_j_1_max__ = n_x5;
        for (size_t j_1__ = 0; j_1__ < b5_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b5" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b6_j_1_max__ = n_x6;
        for (size_t j_1__ = 0; j_1__ < b6_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b6" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b7_j_1_max__ = n_x7;
        for (size_t j_1__ = 0; j_1__ < b7_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b7" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b8_j_1_max__ = n_x8;
        for (size_t j_1__ = 0; j_1__ < b8_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b8" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b9_j_1_max__ = n_x9;
        for (size_t j_1__ = 0; j_1__ < b9_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b9" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b10_j_1_max__ = n_x10;
        for (size_t j_1__ = 0; j_1__ < b10_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b10" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b11_j_1_max__ = n_x11;
        for (size_t j_1__ = 0; j_1__ < b11_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b11" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b12_j_1_max__ = n_x12;
        for (size_t j_1__ = 0; j_1__ < b12_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b12" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b13_j_1_max__ = n_x13;
        for (size_t j_1__ = 0; j_1__ < b13_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b13" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b14_j_1_max__ = n_x14;
        for (size_t j_1__ = 0; j_1__ < b14_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b14" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b15_j_1_max__ = n_x15;
        for (size_t j_1__ = 0; j_1__ < b15_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b15" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b16_j_1_max__ = n_x16;
        for (size_t j_1__ = 0; j_1__ < b16_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b16" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b17_j_1_max__ = n_x17;
        for (size_t j_1__ = 0; j_1__ < b17_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b17" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b18_j_1_max__ = n_x18;
        for (size_t j_1__ = 0; j_1__ < b18_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b18" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi1_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi2_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi2" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi3_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi3_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi3" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi4_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi4_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi4" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi5_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi5_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi5" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi6_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi6_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi6" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi7_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi7_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi7" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi8_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi8_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi8" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi9_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi9_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi9" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi10_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi10_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi10" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi11_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi11_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi11" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi12_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi12_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi12" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi13_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi13_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi13" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi14_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi14_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi14" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi15_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi15_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi15" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi16_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi16_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi16" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi17_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi17_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi17" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi18_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi18_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi18" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi1_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi1_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi1_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi2_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi2_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi2_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi3_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi3_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi3_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi4_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi4_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi4_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi5_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi5_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi5_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi6_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi6_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi6_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi7_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi7_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi7_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi8_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi8_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi8_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi9_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi9_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi9_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi10_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi10_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi10_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi11_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi11_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi11_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi12_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi12_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi12_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi13_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi13_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi13_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi14_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi14_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi14_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi15_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi15_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi15_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi16_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi16_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi16_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi17_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi17_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi17_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi18_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi18_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi18_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t mu_plot_growth_j_2_max__ = n_block;
        size_t mu_plot_growth_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < mu_plot_growth_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < mu_plot_growth_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_growth" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_plot_agr_j_2_max__ = n_block;
        size_t mu_plot_agr_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < mu_plot_agr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < mu_plot_agr_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_agr" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < mu_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_plot_j_2_max__ = n_block;
        size_t size_plot_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < size_plot_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < size_plot_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t size_plot_agr_j_2_max__ = n_block;
        size_t size_plot_agr_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < size_plot_agr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < size_plot_agr_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot_agr" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t size_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < size_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h18";
        param_names__.push_back(param_name_stream__.str());
        size_t h1_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h2_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h3_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h3_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h4_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h4_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h5_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h5_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h6_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h6_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h7_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h7_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h8_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h8_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h9_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h9_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h10_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h10_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h11_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h11_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h12_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h12_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h13_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h13_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h14_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h14_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h15_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h15_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h16_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h16_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h17_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h17_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h18_j_1_max__ = n_block;
        for (size_t j_1__ = 0; j_1__ < h18_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h1_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h1_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h2_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h2_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h3_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h3_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h4_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h4_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h5_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h5_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h6_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h6_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h7_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h7_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h8_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h8_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h9_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h9_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h10_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h10_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h11_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h11_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h12_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h12_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h13_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h13_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h14_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h14_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h15_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h15_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h16_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h16_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h17_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h17_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t h18_holdout_j_1_max__ = n_block_pred;
        for (size_t j_1__ = 0; j_1__ < h18_holdout_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18_holdout" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b1_j_1_max__ = n_x1;
        for (size_t j_1__ = 0; j_1__ < b1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b2_j_1_max__ = n_x2;
        for (size_t j_1__ = 0; j_1__ < b2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b3_j_1_max__ = n_x3;
        for (size_t j_1__ = 0; j_1__ < b3_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b3" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b4_j_1_max__ = n_x4;
        for (size_t j_1__ = 0; j_1__ < b4_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b4" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b5_j_1_max__ = n_x5;
        for (size_t j_1__ = 0; j_1__ < b5_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b5" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b6_j_1_max__ = n_x6;
        for (size_t j_1__ = 0; j_1__ < b6_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b6" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b7_j_1_max__ = n_x7;
        for (size_t j_1__ = 0; j_1__ < b7_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b7" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b8_j_1_max__ = n_x8;
        for (size_t j_1__ = 0; j_1__ < b8_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b8" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b9_j_1_max__ = n_x9;
        for (size_t j_1__ = 0; j_1__ < b9_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b9" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b10_j_1_max__ = n_x10;
        for (size_t j_1__ = 0; j_1__ < b10_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b10" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b11_j_1_max__ = n_x11;
        for (size_t j_1__ = 0; j_1__ < b11_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b11" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b12_j_1_max__ = n_x12;
        for (size_t j_1__ = 0; j_1__ < b12_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b12" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b13_j_1_max__ = n_x13;
        for (size_t j_1__ = 0; j_1__ < b13_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b13" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b14_j_1_max__ = n_x14;
        for (size_t j_1__ = 0; j_1__ < b14_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b14" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b15_j_1_max__ = n_x15;
        for (size_t j_1__ = 0; j_1__ < b15_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b15" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b16_j_1_max__ = n_x16;
        for (size_t j_1__ = 0; j_1__ < b16_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b16" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b17_j_1_max__ = n_x17;
        for (size_t j_1__ = 0; j_1__ < b17_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b17" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b18_j_1_max__ = n_x18;
        for (size_t j_1__ = 0; j_1__ < b18_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b18" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi1_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi2_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi2" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi3_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi3_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi3" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi4_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi4_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi4" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi5_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi5_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi5" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi6_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi6_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi6" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi7_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi7_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi7" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi8_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi8_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi8" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi9_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi9_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi9" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi10_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi10_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi10" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi11_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi11_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi11" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi12_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi12_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi12" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi13_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi13_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi13" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi14_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi14_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi14" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi15_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi15_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi15" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi16_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi16_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi16" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi17_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi17_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi17" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi18_j_1_max__ = n_block;
            for (size_t j_1__ = 0; j_1__ < psi18_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi18" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi1_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi1_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi1_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi2_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi2_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi2_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi3_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi3_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi3_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi4_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi4_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi4_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi5_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi5_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi5_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi6_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi6_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi6_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi7_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi7_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi7_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi8_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi8_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi8_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi9_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi9_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi9_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi10_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi10_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi10_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi11_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi11_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi11_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi12_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi12_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi12_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi13_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi13_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi13_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi14_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi14_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi14_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi15_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi15_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi15_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi16_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi16_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi16_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi17_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi17_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi17_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t psi18_pred_j_1_max__ = n_block_pred;
            for (size_t j_1__ = 0; j_1__ < psi18_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi18_pred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t mu_plot_growth_j_2_max__ = n_block;
        size_t mu_plot_growth_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < mu_plot_growth_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < mu_plot_growth_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_growth" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_plot_agr_j_2_max__ = n_block;
        size_t mu_plot_agr_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < mu_plot_agr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < mu_plot_agr_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_agr" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < mu_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_plot_j_2_max__ = n_block;
        size_t size_plot_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < size_plot_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < size_plot_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t size_plot_agr_j_2_max__ = n_block;
        size_t size_plot_agr_j_1_max__ = n_plot;
        for (size_t j_2__ = 0; j_2__ < size_plot_agr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < size_plot_agr_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot_agr" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t size_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < size_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_spline_pred_blockmod_namespace::model_spline_pred_blockmod stan_model;
#endif
