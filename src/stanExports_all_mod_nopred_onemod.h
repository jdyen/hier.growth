// Generated by rstantools.  Do not edit by hand.

/*
    hier.growth is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    hier.growth is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with hier.growth.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_all_mod_nopred_onemod_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_all_mod_nopred_onemod");
    reader.add_event(207, 205, "end", "model_all_mod_nopred_onemod");
    return reader;
}
#include <stan_meta_header.hpp>
class model_all_mod_nopred_onemod : public prob_grad {
private:
        int model_id;
        int n;
        int n_pred;
        vector_d size_data;
        vector_d age;
        int n_plot;
        vector_d age_plot;
        matrix_d age_holdout;
public:
    model_all_mod_nopred_onemod(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_all_mod_nopred_onemod(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_all_mod_nopred_onemod_namespace::model_all_mod_nopred_onemod";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "model_id", "int", context__.to_vec());
            model_id = int(0);
            vals_i__ = context__.vals_i("model_id");
            pos__ = 0;
            model_id = vals_i__[pos__++];
            check_greater_or_equal(function__, "model_id", model_id, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_pred", "int", context__.to_vec());
            n_pred = int(0);
            vals_i__ = context__.vals_i("n_pred");
            pos__ = 0;
            n_pred = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_pred", n_pred, 0);
            current_statement_begin__ = 5;
            validate_non_negative_index("size_data", "n", n);
            context__.validate_dims("data initialization", "size_data", "vector_d", context__.to_vec(n));
            size_data = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("size_data");
            pos__ = 0;
            size_t size_data_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < size_data_j_1_max__; ++j_1__) {
                size_data(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "size_data", size_data, 0);
            current_statement_begin__ = 6;
            validate_non_negative_index("age", "n", n);
            context__.validate_dims("data initialization", "age", "vector_d", context__.to_vec(n));
            age = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("age");
            pos__ = 0;
            size_t age_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < age_j_1_max__; ++j_1__) {
                age(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "n_plot", "int", context__.to_vec());
            n_plot = int(0);
            vals_i__ = context__.vals_i("n_plot");
            pos__ = 0;
            n_plot = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_plot", n_plot, 0);
            current_statement_begin__ = 8;
            validate_non_negative_index("age_plot", "n_plot", n_plot);
            context__.validate_dims("data initialization", "age_plot", "vector_d", context__.to_vec(n_plot));
            age_plot = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_plot);
            vals_r__ = context__.vals_r("age_plot");
            pos__ = 0;
            size_t age_plot_j_1_max__ = n_plot;
            for (size_t j_1__ = 0; j_1__ < age_plot_j_1_max__; ++j_1__) {
                age_plot(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("age_holdout", "n_pred", n_pred);
            validate_non_negative_index("age_holdout", "1", 1);
            context__.validate_dims("data initialization", "age_holdout", "matrix_d", context__.to_vec(n_pred,1));
            age_holdout = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_pred, 1);
            vals_r__ = context__.vals_r("age_holdout");
            pos__ = 0;
            size_t age_holdout_j_2_max__ = 1;
            size_t age_holdout_j_1_max__ = n_pred;
            for (size_t j_2__ = 0; j_2__ < age_holdout_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < age_holdout_j_1_max__; ++j_1__) {
                    age_holdout(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 13;
            num_params_r__ += 1;
            current_statement_begin__ = 14;
            num_params_r__ += 1;
            current_statement_begin__ = 15;
            num_params_r__ += 1;
            current_statement_begin__ = 16;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_all_mod_nopred_onemod() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 13;
        if (!(context__.contains_r("sigma_obs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_obs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_obs", "double", context__.to_vec());
        double sigma_obs(0);
        sigma_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_obs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 14;
        if (!(context__.contains_r("h1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h1", "double", context__.to_vec());
        double h1(0);
        h1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, h1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 15;
        if (!(context__.contains_r("h2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h2", "double", context__.to_vec());
        double h2(0);
        h2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, h2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 16;
        if (!(context__.contains_r("h3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable h3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("h3");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "h3", "double", context__.to_vec());
        double h3(0);
        h3 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, h3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable h3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 13;
            local_scalar_t__ sigma_obs;
            (void) sigma_obs;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_obs = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_obs = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 14;
            local_scalar_t__ h1;
            (void) h1;  // dummy to suppress unused var warning
            if (jacobian__)
                h1 = in__.scalar_lb_constrain(0, lp__);
            else
                h1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 15;
            local_scalar_t__ h2;
            (void) h2;  // dummy to suppress unused var warning
            if (jacobian__)
                h2 = in__.scalar_lb_constrain(0, lp__);
            else
                h2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 16;
            local_scalar_t__ h3;
            (void) h3;  // dummy to suppress unused var warning
            if (jacobian__)
                h3 = in__.scalar_lb_constrain(0, lp__);
            else
                h3 = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 20;
            validate_non_negative_index("mu", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(n);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 21;
            local_scalar_t__ h1_holdout;
            (void) h1_holdout;  // dummy to suppress unused var warning
            stan::math::initialize(h1_holdout, DUMMY_VAR__);
            stan::math::fill(h1_holdout, DUMMY_VAR__);
            current_statement_begin__ = 22;
            local_scalar_t__ h2_holdout;
            (void) h2_holdout;  // dummy to suppress unused var warning
            stan::math::initialize(h2_holdout, DUMMY_VAR__);
            stan::math::fill(h2_holdout, DUMMY_VAR__);
            current_statement_begin__ = 23;
            local_scalar_t__ h3_holdout;
            (void) h3_holdout;  // dummy to suppress unused var warning
            stan::math::initialize(h3_holdout, DUMMY_VAR__);
            stan::math::fill(h3_holdout, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 24;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 25;
                if (as_bool(logical_eq(model_id, 1))) {
                    current_statement_begin__ = 27;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 / (h2 + pow(h3, get_base1(age, i, "age", 1)))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 29;
                if (as_bool(logical_eq(model_id, 2))) {
                    current_statement_begin__ = 31;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 / (1 + stan::math::exp((-(h2) * (get_base1(age, i, "age", 1) - h3))))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 33;
                if (as_bool(logical_eq(model_id, 3))) {
                    current_statement_begin__ = 35;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 / (1 + stan::math::exp((-(h2) * (stan::math::log(get_base1(age, i, "age", 1)) - h3))))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 37;
                if (as_bool(logical_eq(model_id, 4))) {
                    current_statement_begin__ = 39;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 + (h2 * stan::math::log(get_base1(age, i, "age", 1)))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 41;
                if (as_bool(logical_eq(model_id, 5))) {
                    current_statement_begin__ = 43;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * stan::math::log((1 + (get_base1(age, i, "age", 1) / h2)))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 45;
                if (as_bool(logical_eq(model_id, 6))) {
                    current_statement_begin__ = 47;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 / (1 + stan::math::exp(((-(h2) * get_base1(age, i, "age", 1)) + h3)))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 49;
                if (as_bool(logical_eq(model_id, 7))) {
                    current_statement_begin__ = 51;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * (get_base1(age, i, "age", 1) / (h2 + get_base1(age, i, "age", 1)))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 53;
                if (as_bool(logical_eq(model_id, 8))) {
                    current_statement_begin__ = 55;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * (1 - stan::math::exp((-(h2) * get_base1(age, i, "age", 1))))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 57;
                if (as_bool(logical_eq(model_id, 9))) {
                    current_statement_begin__ = 59;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * pow(get_base1(age, i, "age", 1), h2)), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 61;
                if (as_bool(logical_eq(model_id, 10))) {
                    current_statement_begin__ = 63;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * pow(get_base1(age, i, "age", 1), (h2 - (h3 / get_base1(age, i, "age", 1))))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 65;
                if (as_bool(logical_eq(model_id, 11))) {
                    current_statement_begin__ = 67;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * (1 - stan::math::exp((-(h2) * pow(get_base1(age, i, "age", 1), h3))))), 
                                "assigning variable mu");
                }
            }
            current_statement_begin__ = 70;
            stan::math::assign(h1_holdout, h1);
            current_statement_begin__ = 71;
            stan::math::assign(h2_holdout, h2);
            current_statement_begin__ = 72;
            stan::math::assign(h3_holdout, h3);
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 20;
            size_t mu_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 21;
            if (stan::math::is_uninitialized(h1_holdout)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: h1_holdout";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable h1_holdout: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "h1_holdout", h1_holdout, 0);
            current_statement_begin__ = 22;
            if (stan::math::is_uninitialized(h2_holdout)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: h2_holdout";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable h2_holdout: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "h2_holdout", h2_holdout, 0);
            current_statement_begin__ = 23;
            if (stan::math::is_uninitialized(h3_holdout)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: h3_holdout";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable h3_holdout: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "h3_holdout", h3_holdout, 0);
            // model body
            current_statement_begin__ = 76;
            lp_accum__.add(normal_log<propto__>(stan::math::log(size_data), mu, sigma_obs));
            current_statement_begin__ = 77;
            lp_accum__.add(normal_log<propto__>(sigma_obs, 0, 2));
            current_statement_begin__ = 78;
            lp_accum__.add(normal_log<propto__>(h1, 0.0, 2.0));
            current_statement_begin__ = 79;
            lp_accum__.add(normal_log<propto__>(h2, 0.0, 2.0));
            current_statement_begin__ = 80;
            lp_accum__.add(normal_log<propto__>(h3, 0.0, 2.0));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma_obs");
        names__.push_back("h1");
        names__.push_back("h2");
        names__.push_back("h3");
        names__.push_back("mu");
        names__.push_back("h1_holdout");
        names__.push_back("h2_holdout");
        names__.push_back("h3_holdout");
        names__.push_back("mu_plot_growth");
        names__.push_back("mu_plot_agr");
        names__.push_back("mu_pred");
        names__.push_back("size_plot");
        names__.push_back("size_plot_agr");
        names__.push_back("size_pred");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_all_mod_nopred_onemod_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigma_obs = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_obs);
        double h1 = in__.scalar_lb_constrain(0);
        vars__.push_back(h1);
        double h2 = in__.scalar_lb_constrain(0);
        vars__.push_back(h2);
        double h3 = in__.scalar_lb_constrain(0);
        vars__.push_back(h3);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 20;
            validate_non_negative_index("mu", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu(n);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 21;
            double h1_holdout;
            (void) h1_holdout;  // dummy to suppress unused var warning
            stan::math::initialize(h1_holdout, DUMMY_VAR__);
            stan::math::fill(h1_holdout, DUMMY_VAR__);
            current_statement_begin__ = 22;
            double h2_holdout;
            (void) h2_holdout;  // dummy to suppress unused var warning
            stan::math::initialize(h2_holdout, DUMMY_VAR__);
            stan::math::fill(h2_holdout, DUMMY_VAR__);
            current_statement_begin__ = 23;
            double h3_holdout;
            (void) h3_holdout;  // dummy to suppress unused var warning
            stan::math::initialize(h3_holdout, DUMMY_VAR__);
            stan::math::fill(h3_holdout, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 24;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 25;
                if (as_bool(logical_eq(model_id, 1))) {
                    current_statement_begin__ = 27;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 / (h2 + pow(h3, get_base1(age, i, "age", 1)))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 29;
                if (as_bool(logical_eq(model_id, 2))) {
                    current_statement_begin__ = 31;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 / (1 + stan::math::exp((-(h2) * (get_base1(age, i, "age", 1) - h3))))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 33;
                if (as_bool(logical_eq(model_id, 3))) {
                    current_statement_begin__ = 35;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 / (1 + stan::math::exp((-(h2) * (stan::math::log(get_base1(age, i, "age", 1)) - h3))))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 37;
                if (as_bool(logical_eq(model_id, 4))) {
                    current_statement_begin__ = 39;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 + (h2 * stan::math::log(get_base1(age, i, "age", 1)))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 41;
                if (as_bool(logical_eq(model_id, 5))) {
                    current_statement_begin__ = 43;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * stan::math::log((1 + (get_base1(age, i, "age", 1) / h2)))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 45;
                if (as_bool(logical_eq(model_id, 6))) {
                    current_statement_begin__ = 47;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 / (1 + stan::math::exp(((-(h2) * get_base1(age, i, "age", 1)) + h3)))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 49;
                if (as_bool(logical_eq(model_id, 7))) {
                    current_statement_begin__ = 51;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * (get_base1(age, i, "age", 1) / (h2 + get_base1(age, i, "age", 1)))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 53;
                if (as_bool(logical_eq(model_id, 8))) {
                    current_statement_begin__ = 55;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * (1 - stan::math::exp((-(h2) * get_base1(age, i, "age", 1))))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 57;
                if (as_bool(logical_eq(model_id, 9))) {
                    current_statement_begin__ = 59;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * pow(get_base1(age, i, "age", 1), h2)), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 61;
                if (as_bool(logical_eq(model_id, 10))) {
                    current_statement_begin__ = 63;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * pow(get_base1(age, i, "age", 1), (h2 - (h3 / get_base1(age, i, "age", 1))))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 65;
                if (as_bool(logical_eq(model_id, 11))) {
                    current_statement_begin__ = 67;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * (1 - stan::math::exp((-(h2) * pow(get_base1(age, i, "age", 1), h3))))), 
                                "assigning variable mu");
                }
            }
            current_statement_begin__ = 70;
            stan::math::assign(h1_holdout, h1);
            current_statement_begin__ = 71;
            stan::math::assign(h2_holdout, h2);
            current_statement_begin__ = 72;
            stan::math::assign(h3_holdout, h3);
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 21;
            check_greater_or_equal(function__, "h1_holdout", h1_holdout, 0);
            current_statement_begin__ = 22;
            check_greater_or_equal(function__, "h2_holdout", h2_holdout, 0);
            current_statement_begin__ = 23;
            check_greater_or_equal(function__, "h3_holdout", h3_holdout, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t mu_j_1_max__ = n;
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    vars__.push_back(mu(j_1__));
                }
                vars__.push_back(h1_holdout);
                vars__.push_back(h2_holdout);
                vars__.push_back(h3_holdout);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 84;
            validate_non_negative_index("mu_plot_growth", "n_plot", n_plot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_plot_growth(n_plot);
            stan::math::initialize(mu_plot_growth, DUMMY_VAR__);
            stan::math::fill(mu_plot_growth, DUMMY_VAR__);
            current_statement_begin__ = 85;
            validate_non_negative_index("mu_plot_agr", "n_plot", n_plot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_plot_agr(n_plot);
            stan::math::initialize(mu_plot_agr, DUMMY_VAR__);
            stan::math::fill(mu_plot_agr, DUMMY_VAR__);
            current_statement_begin__ = 86;
            validate_non_negative_index("mu_pred", "n_pred", n_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_pred(n_pred);
            stan::math::initialize(mu_pred, DUMMY_VAR__);
            stan::math::fill(mu_pred, DUMMY_VAR__);
            current_statement_begin__ = 87;
            validate_non_negative_index("size_plot", "n_plot", n_plot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> size_plot(n_plot);
            stan::math::initialize(size_plot, DUMMY_VAR__);
            stan::math::fill(size_plot, DUMMY_VAR__);
            current_statement_begin__ = 88;
            validate_non_negative_index("size_plot_agr", "n_plot", n_plot);
            Eigen::Matrix<double, Eigen::Dynamic, 1> size_plot_agr(n_plot);
            stan::math::initialize(size_plot_agr, DUMMY_VAR__);
            stan::math::fill(size_plot_agr, DUMMY_VAR__);
            current_statement_begin__ = 89;
            validate_non_negative_index("size_pred", "n_pred", n_pred);
            Eigen::Matrix<double, Eigen::Dynamic, 1> size_pred(n_pred);
            stan::math::initialize(size_pred, DUMMY_VAR__);
            stan::math::fill(size_pred, DUMMY_VAR__);
            current_statement_begin__ = 90;
            validate_non_negative_index("log_lik", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(n);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 92;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 93;
                if (as_bool(logical_eq(model_id, 1))) {
                    current_statement_begin__ = 94;
                    stan::model::assign(mu_plot_growth, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 / (h2 + pow(h3, get_base1(age_plot, i, "age_plot", 1)))), 
                                "assigning variable mu_plot_growth");
                }
                current_statement_begin__ = 96;
                if (as_bool(logical_eq(model_id, 2))) {
                    current_statement_begin__ = 97;
                    stan::model::assign(mu_plot_growth, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 / (1 + stan::math::exp((-(h2) * (get_base1(age_plot, i, "age_plot", 1) - h3))))), 
                                "assigning variable mu_plot_growth");
                }
                current_statement_begin__ = 99;
                if (as_bool(logical_eq(model_id, 3))) {
                    current_statement_begin__ = 100;
                    stan::model::assign(mu_plot_growth, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 / (1 + stan::math::exp((-(h2) * (stan::math::log(get_base1(age_plot, i, "age_plot", 1)) - h3))))), 
                                "assigning variable mu_plot_growth");
                }
                current_statement_begin__ = 102;
                if (as_bool(logical_eq(model_id, 4))) {
                    current_statement_begin__ = 103;
                    stan::model::assign(mu_plot_growth, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 + (h2 * stan::math::log(get_base1(age_plot, i, "age_plot", 1)))), 
                                "assigning variable mu_plot_growth");
                }
                current_statement_begin__ = 105;
                if (as_bool(logical_eq(model_id, 5))) {
                    current_statement_begin__ = 106;
                    stan::model::assign(mu_plot_growth, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * stan::math::log((1 + (get_base1(age_plot, i, "age_plot", 1) / h2)))), 
                                "assigning variable mu_plot_growth");
                }
                current_statement_begin__ = 108;
                if (as_bool(logical_eq(model_id, 6))) {
                    current_statement_begin__ = 109;
                    stan::model::assign(mu_plot_growth, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 / (1 + stan::math::exp(((-(h2) * get_base1(age_plot, i, "age_plot", 1)) + h3)))), 
                                "assigning variable mu_plot_growth");
                }
                current_statement_begin__ = 111;
                if (as_bool(logical_eq(model_id, 7))) {
                    current_statement_begin__ = 112;
                    stan::model::assign(mu_plot_growth, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * (get_base1(age_plot, i, "age_plot", 1) / (h2 + get_base1(age_plot, i, "age_plot", 1)))), 
                                "assigning variable mu_plot_growth");
                }
                current_statement_begin__ = 114;
                if (as_bool(logical_eq(model_id, 8))) {
                    current_statement_begin__ = 115;
                    stan::model::assign(mu_plot_growth, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * (1 - stan::math::exp((-(h2) * get_base1(age_plot, i, "age_plot", 1))))), 
                                "assigning variable mu_plot_growth");
                }
                current_statement_begin__ = 117;
                if (as_bool(logical_eq(model_id, 9))) {
                    current_statement_begin__ = 118;
                    stan::model::assign(mu_plot_growth, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * pow(get_base1(age_plot, i, "age_plot", 1), h2)), 
                                "assigning variable mu_plot_growth");
                }
                current_statement_begin__ = 120;
                if (as_bool(logical_eq(model_id, 10))) {
                    current_statement_begin__ = 121;
                    stan::model::assign(mu_plot_growth, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * pow(get_base1(age_plot, i, "age_plot", 1), (h2 - (h3 / get_base1(age_plot, i, "age_plot", 1))))), 
                                "assigning variable mu_plot_growth");
                }
                current_statement_begin__ = 123;
                if (as_bool(logical_eq(model_id, 11))) {
                    current_statement_begin__ = 124;
                    stan::model::assign(mu_plot_growth, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * (1 - stan::math::exp((-(h2) * pow(get_base1(age_plot, i, "age_plot", 1), h3))))), 
                                "assigning variable mu_plot_growth");
                }
            }
            current_statement_begin__ = 127;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 128;
                stan::model::assign(size_plot, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(mu_plot_growth, i, "mu_plot_growth", 1)), 
                            "assigning variable size_plot");
            }
            current_statement_begin__ = 129;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 130;
                if (as_bool(logical_eq(model_id, 1))) {
                    current_statement_begin__ = 131;
                    stan::model::assign(mu_plot_agr, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (((-(h1) * pow(h3, get_base1(age_plot, i, "age_plot", 1))) * stan::math::log(h3)) / pow((h2 + pow(h3, get_base1(age_plot, i, "age_plot", 1))), 2)), 
                                "assigning variable mu_plot_agr");
                }
                current_statement_begin__ = 133;
                if (as_bool(logical_eq(model_id, 2))) {
                    current_statement_begin__ = 134;
                    stan::model::assign(mu_plot_agr, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(mu_plot_growth, i, "mu_plot_growth", 1) * ((h2 * stan::math::exp((-(h2) * (get_base1(age_plot, i, "age_plot", 1) - h3)))) / (1 + stan::math::exp((-(h2) * (get_base1(age_plot, i, "age_plot", 1) - h3)))))), 
                                "assigning variable mu_plot_agr");
                }
                current_statement_begin__ = 136;
                if (as_bool(logical_eq(model_id, 3))) {
                    current_statement_begin__ = 137;
                    stan::model::assign(mu_plot_agr, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(mu_plot_growth, i, "mu_plot_growth", 1) * ((h2 * stan::math::exp((-(h2) * (stan::math::log(get_base1(age_plot, i, "age_plot", 1)) - h3)))) / (1 + stan::math::exp((-(h2) * (stan::math::log(get_base1(age_plot, i, "age_plot", 1)) - h3)))))), 
                                "assigning variable mu_plot_agr");
                }
                current_statement_begin__ = 139;
                if (as_bool(logical_eq(model_id, 4))) {
                    current_statement_begin__ = 140;
                    stan::model::assign(mu_plot_agr, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h2 / get_base1(age_plot, i, "age_plot", 1)), 
                                "assigning variable mu_plot_agr");
                }
                current_statement_begin__ = 142;
                if (as_bool(logical_eq(model_id, 5))) {
                    current_statement_begin__ = 143;
                    stan::model::assign(mu_plot_agr, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 / (h2 + get_base1(age_plot, i, "age_plot", 1))), 
                                "assigning variable mu_plot_agr");
                }
                current_statement_begin__ = 145;
                if (as_bool(logical_eq(model_id, 6))) {
                    current_statement_begin__ = 146;
                    stan::model::assign(mu_plot_agr, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((h2 * h1) / ((2 * stan::math::cosh((h3 - (h2 * get_base1(age_plot, i, "age_plot", 1))))) + 2)), 
                                "assigning variable mu_plot_agr");
                }
                current_statement_begin__ = 148;
                if (as_bool(logical_eq(model_id, 7))) {
                    current_statement_begin__ = 149;
                    stan::model::assign(mu_plot_agr, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1 * (h2 / pow((h2 + get_base1(age_plot, i, "age_plot", 1)), 2))), 
                                "assigning variable mu_plot_agr");
                }
                current_statement_begin__ = 151;
                if (as_bool(logical_eq(model_id, 8))) {
                    current_statement_begin__ = 152;
                    stan::model::assign(mu_plot_agr, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((h1 * h2) * stan::math::exp((-(h2) * get_base1(age_plot, i, "age_plot", 1)))), 
                                "assigning variable mu_plot_agr");
                }
                current_statement_begin__ = 154;
                if (as_bool(logical_eq(model_id, 9))) {
                    current_statement_begin__ = 155;
                    stan::model::assign(mu_plot_agr, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((h1 * h2) * pow(get_base1(age_plot, i, "age_plot", 1), (h2 - 1))), 
                                "assigning variable mu_plot_agr");
                }
                current_statement_begin__ = 157;
                if (as_bool(logical_eq(model_id, 10))) {
                    current_statement_begin__ = 158;
                    stan::model::assign(mu_plot_agr, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(mu_plot_growth, i, "mu_plot_growth", 1) * (((h2 - (h3 / get_base1(age_plot, i, "age_plot", 1))) / get_base1(age_plot, i, "age_plot", 1)) + ((h3 * stan::math::log(get_base1(age_plot, i, "age_plot", 1))) / pow(get_base1(age_plot, i, "age_plot", 1), 2)))), 
                                "assigning variable mu_plot_agr");
                }
                current_statement_begin__ = 160;
                if (as_bool(logical_eq(model_id, 11))) {
                    current_statement_begin__ = 161;
                    stan::model::assign(mu_plot_agr, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((((h1 * h2) * h3) * pow(get_base1(age_plot, i, "age_plot", 1), (h3 - 1))) * stan::math::exp((-(h2) * pow(get_base1(age_plot, i, "age_plot", 1), h3)))), 
                                "assigning variable mu_plot_agr");
                }
            }
            current_statement_begin__ = 164;
            for (int i = 1; i <= n_plot; ++i) {
                current_statement_begin__ = 165;
                stan::model::assign(size_plot_agr, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(mu_plot_agr, i, "mu_plot_agr", 1)), 
                            "assigning variable size_plot_agr");
            }
            current_statement_begin__ = 166;
            for (int i = 1; i <= n_pred; ++i) {
                current_statement_begin__ = 167;
                if (as_bool(logical_eq(model_id, 1))) {
                    current_statement_begin__ = 168;
                    stan::model::assign(mu_pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1_holdout / (h2_holdout + pow(h3_holdout, get_base1(age_holdout, i, 1, "age_holdout", 1)))), 
                                "assigning variable mu_pred");
                }
                current_statement_begin__ = 170;
                if (as_bool(logical_eq(model_id, 2))) {
                    current_statement_begin__ = 171;
                    stan::model::assign(mu_pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1_holdout / (1 + stan::math::exp((-(h2_holdout) * (get_base1(age_holdout, i, 1, "age_holdout", 1) - h3_holdout))))), 
                                "assigning variable mu_pred");
                }
                current_statement_begin__ = 173;
                if (as_bool(logical_eq(model_id, 3))) {
                    current_statement_begin__ = 174;
                    stan::model::assign(mu_pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1_holdout / (1 + stan::math::exp((-(h2_holdout) * (stan::math::log(get_base1(age_holdout, i, 1, "age_holdout", 1)) - h3_holdout))))), 
                                "assigning variable mu_pred");
                }
                current_statement_begin__ = 176;
                if (as_bool(logical_eq(model_id, 4))) {
                    current_statement_begin__ = 177;
                    stan::model::assign(mu_pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1_holdout + (h2_holdout * stan::math::log(get_base1(age_holdout, i, 1, "age_holdout", 1)))), 
                                "assigning variable mu_pred");
                }
                current_statement_begin__ = 179;
                if (as_bool(logical_eq(model_id, 5))) {
                    current_statement_begin__ = 180;
                    stan::model::assign(mu_pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1_holdout * stan::math::log((1 + (get_base1(age_holdout, i, 1, "age_holdout", 1) / h2_holdout)))), 
                                "assigning variable mu_pred");
                }
                current_statement_begin__ = 182;
                if (as_bool(logical_eq(model_id, 6))) {
                    current_statement_begin__ = 183;
                    stan::model::assign(mu_pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1_holdout / (1 + stan::math::exp(((-(h2_holdout) * get_base1(age_holdout, i, 1, "age_holdout", 1)) + h3_holdout)))), 
                                "assigning variable mu_pred");
                }
                current_statement_begin__ = 185;
                if (as_bool(logical_eq(model_id, 7))) {
                    current_statement_begin__ = 186;
                    stan::model::assign(mu_pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1_holdout * (get_base1(age_holdout, i, 1, "age_holdout", 1) / (h2_holdout + get_base1(age_holdout, i, 1, "age_holdout", 1)))), 
                                "assigning variable mu_pred");
                }
                current_statement_begin__ = 188;
                if (as_bool(logical_eq(model_id, 8))) {
                    current_statement_begin__ = 189;
                    stan::model::assign(mu_pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1_holdout * (1 - stan::math::exp((-(h2_holdout) * get_base1(age_holdout, i, 1, "age_holdout", 1))))), 
                                "assigning variable mu_pred");
                }
                current_statement_begin__ = 191;
                if (as_bool(logical_eq(model_id, 9))) {
                    current_statement_begin__ = 192;
                    stan::model::assign(mu_pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1_holdout * pow(get_base1(age_holdout, i, 1, "age_holdout", 1), h2_holdout)), 
                                "assigning variable mu_pred");
                }
                current_statement_begin__ = 194;
                if (as_bool(logical_eq(model_id, 10))) {
                    current_statement_begin__ = 195;
                    stan::model::assign(mu_pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1_holdout * pow(get_base1(age_holdout, i, 1, "age_holdout", 1), (h2_holdout - (h3_holdout / get_base1(age_holdout, i, 1, "age_holdout", 1))))), 
                                "assigning variable mu_pred");
                }
                current_statement_begin__ = 197;
                if (as_bool(logical_eq(model_id, 11))) {
                    current_statement_begin__ = 198;
                    stan::model::assign(mu_pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (h1_holdout * (1 - stan::math::exp((-(h2_holdout) * pow(get_base1(age_holdout, i, 1, "age_holdout", 1), h3_holdout))))), 
                                "assigning variable mu_pred");
                }
            }
            current_statement_begin__ = 201;
            for (int i = 1; i <= n_pred; ++i) {
                current_statement_begin__ = 202;
                stan::model::assign(size_pred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(mu_pred, i, "mu_pred", 1)), 
                            "assigning variable size_pred");
            }
            current_statement_begin__ = 203;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 204;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_log(stan::math::log(get_base1(size_data, i, "size_data", 1)), get_base1(mu, i, "mu", 1), sigma_obs), 
                            "assigning variable log_lik");
            }
            // validate, write generated quantities
            current_statement_begin__ = 84;
            size_t mu_plot_growth_j_1_max__ = n_plot;
            for (size_t j_1__ = 0; j_1__ < mu_plot_growth_j_1_max__; ++j_1__) {
                vars__.push_back(mu_plot_growth(j_1__));
            }
            current_statement_begin__ = 85;
            size_t mu_plot_agr_j_1_max__ = n_plot;
            for (size_t j_1__ = 0; j_1__ < mu_plot_agr_j_1_max__; ++j_1__) {
                vars__.push_back(mu_plot_agr(j_1__));
            }
            current_statement_begin__ = 86;
            size_t mu_pred_j_1_max__ = n_pred;
            for (size_t j_1__ = 0; j_1__ < mu_pred_j_1_max__; ++j_1__) {
                vars__.push_back(mu_pred(j_1__));
            }
            current_statement_begin__ = 87;
            check_greater_or_equal(function__, "size_plot", size_plot, 0);
            size_t size_plot_j_1_max__ = n_plot;
            for (size_t j_1__ = 0; j_1__ < size_plot_j_1_max__; ++j_1__) {
                vars__.push_back(size_plot(j_1__));
            }
            current_statement_begin__ = 88;
            check_greater_or_equal(function__, "size_plot_agr", size_plot_agr, 0);
            size_t size_plot_agr_j_1_max__ = n_plot;
            for (size_t j_1__ = 0; j_1__ < size_plot_agr_j_1_max__; ++j_1__) {
                vars__.push_back(size_plot_agr(j_1__));
            }
            current_statement_begin__ = 89;
            check_greater_or_equal(function__, "size_pred", size_pred, 0);
            size_t size_pred_j_1_max__ = n_pred;
            for (size_t j_1__ = 0; j_1__ < size_pred_j_1_max__; ++j_1__) {
                vars__.push_back(size_pred(j_1__));
            }
            current_statement_begin__ = 90;
            size_t log_lik_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_all_mod_nopred_onemod";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h3";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1_holdout";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2_holdout";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3_holdout";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t mu_plot_growth_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < mu_plot_growth_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_growth" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_plot_agr_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < mu_plot_agr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_agr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < mu_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_plot_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < size_plot_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_plot_agr_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < size_plot_agr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot_agr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < size_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h3";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1_holdout";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2_holdout";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3_holdout";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t mu_plot_growth_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < mu_plot_growth_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_growth" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_plot_agr_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < mu_plot_agr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_agr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < mu_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_plot_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < size_plot_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_plot_agr_j_1_max__ = n_plot;
        for (size_t j_1__ = 0; j_1__ < size_plot_agr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot_agr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t size_pred_j_1_max__ = n_pred;
        for (size_t j_1__ = 0; j_1__ < size_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_all_mod_nopred_onemod_namespace::model_all_mod_nopred_onemod stan_model;
#endif
